/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tiktoken";
exports.ids = ["vendor-chunks/tiktoken"];
exports.modules = {

/***/ "(rsc)/./node_modules/tiktoken/tiktoken.cjs":
/*!********************************************!*\
  !*** ./node_modules/tiktoken/tiktoken.cjs ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const wasm = __webpack_require__(/*! ./tiktoken_bg.cjs */ \"(rsc)/./node_modules/tiktoken/tiktoken_bg.cjs\");\nlet imports = {};\nimports[\"./tiktoken_bg.js\"] = wasm;\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst candidates = __dirname.split(path.sep).reduce((memo, _, index, array)=>{\n    const prefix = array.slice(0, index + 1).join(path.sep) + path.sep;\n    if (!prefix.includes(\"node_modules\" + path.sep)) {\n        memo.unshift(path.join(prefix, \"node_modules\", \"tiktoken\", \"\", \"./tiktoken_bg.wasm\"));\n    }\n    return memo;\n}, []);\ncandidates.unshift(path.join(__dirname, \"./tiktoken_bg.wasm\"));\nlet bytes = null;\nfor (const candidate of candidates){\n    try {\n        bytes = fs.readFileSync(candidate);\n        break;\n    } catch  {}\n}\nif (bytes == null) throw new Error(\"Missing tiktoken_bg.wasm\");\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm.__wbg_set_wasm(wasmInstance.exports);\nexports.get_encoding = wasm[\"get_encoding\"];\nexports.encoding_for_model = wasm[\"encoding_for_model\"];\nexports.Tiktoken = wasm[\"Tiktoken\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGlrdG9rZW4vdGlrdG9rZW4uY2pzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDLHdFQUFtQjtBQUN4QyxJQUFJQyxVQUFVLENBQUM7QUFDZkEsT0FBTyxDQUFDLG1CQUFtQixHQUFHRjtBQUM5QixNQUFNRyxPQUFPRixtQkFBT0EsQ0FBQyxrQkFBTTtBQUMzQixNQUFNRyxLQUFLSCxtQkFBT0EsQ0FBQyxjQUFJO0FBRXZCLE1BQU1JLGFBQWFDLFVBQ2hCQyxLQUFLLENBQUNKLEtBQUtLLEdBQUcsRUFDZEMsTUFBTSxDQUFDLENBQUNDLE1BQU1DLEdBQUdDLE9BQU9DO0lBQ3ZCLE1BQU1DLFNBQVNELE1BQU1FLEtBQUssQ0FBQyxHQUFHSCxRQUFRLEdBQUdJLElBQUksQ0FBQ2IsS0FBS0ssR0FBRyxJQUFJTCxLQUFLSyxHQUFHO0lBQ2xFLElBQUksQ0FBQ00sT0FBT0csUUFBUSxDQUFDLGlCQUFpQmQsS0FBS0ssR0FBRyxHQUFHO1FBQy9DRSxLQUFLUSxPQUFPLENBQ1ZmLEtBQUthLElBQUksQ0FDUEYsUUFDQSxnQkFDQSxZQUNBLElBQ0E7SUFHTjtJQUNBLE9BQU9KO0FBQ1QsR0FBRyxFQUFFO0FBQ1BMLFdBQVdhLE9BQU8sQ0FBQ2YsS0FBS2EsSUFBSSxDQUFDVixXQUFXO0FBRXhDLElBQUlhLFFBQVE7QUFDWixLQUFLLE1BQU1DLGFBQWFmLFdBQVk7SUFDbEMsSUFBSTtRQUNGYyxRQUFRZixHQUFHaUIsWUFBWSxDQUFDRDtRQUN4QjtJQUNGLEVBQUUsT0FBTSxDQUFDO0FBQ1g7QUFFQSxJQUFJRCxTQUFTLE1BQU0sTUFBTSxJQUFJRyxNQUFNO0FBQ25DLE1BQU1DLGFBQWEsSUFBSUMsWUFBWUMsTUFBTSxDQUFDTjtBQUMxQyxNQUFNTyxlQUFlLElBQUlGLFlBQVlHLFFBQVEsQ0FBQ0osWUFBWXJCO0FBQzFERixLQUFLNEIsY0FBYyxDQUFDRixhQUFhRyxPQUFPO0FBQ3hDQSxvQkFBdUIsR0FBRzdCLElBQUksQ0FBQyxlQUFlO0FBQzlDNkIsMEJBQTZCLEdBQUc3QixJQUFJLENBQUMscUJBQXFCO0FBQzFENkIsZ0JBQW1CLEdBQUc3QixJQUFJLENBQUMsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL3NydC8uL25vZGVfbW9kdWxlcy90aWt0b2tlbi90aWt0b2tlbi5janM/NGY0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB3YXNtID0gcmVxdWlyZShcIi4vdGlrdG9rZW5fYmcuY2pzXCIpO1xubGV0IGltcG9ydHMgPSB7fTtcbmltcG9ydHNbXCIuL3Rpa3Rva2VuX2JnLmpzXCJdID0gd2FzbTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuXG5jb25zdCBjYW5kaWRhdGVzID0gX19kaXJuYW1lXG4gIC5zcGxpdChwYXRoLnNlcClcbiAgLnJlZHVjZSgobWVtbywgXywgaW5kZXgsIGFycmF5KSA9PiB7XG4gICAgY29uc3QgcHJlZml4ID0gYXJyYXkuc2xpY2UoMCwgaW5kZXggKyAxKS5qb2luKHBhdGguc2VwKSArIHBhdGguc2VwO1xuICAgIGlmICghcHJlZml4LmluY2x1ZGVzKFwibm9kZV9tb2R1bGVzXCIgKyBwYXRoLnNlcCkpIHtcbiAgICAgIG1lbW8udW5zaGlmdChcbiAgICAgICAgcGF0aC5qb2luKFxuICAgICAgICAgIHByZWZpeCxcbiAgICAgICAgICBcIm5vZGVfbW9kdWxlc1wiLFxuICAgICAgICAgIFwidGlrdG9rZW5cIixcbiAgICAgICAgICBcIlwiLFxuICAgICAgICAgIFwiLi90aWt0b2tlbl9iZy53YXNtXCJcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH0sIFtdKVxuY2FuZGlkYXRlcy51bnNoaWZ0KHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi90aWt0b2tlbl9iZy53YXNtXCIpKTtcblxubGV0IGJ5dGVzID0gbnVsbDtcbmZvciAoY29uc3QgY2FuZGlkYXRlIG9mIGNhbmRpZGF0ZXMpIHtcbiAgdHJ5IHtcbiAgICBieXRlcyA9IGZzLnJlYWRGaWxlU3luYyhjYW5kaWRhdGUpO1xuICAgIGJyZWFrO1xuICB9IGNhdGNoIHt9XG59XG5cbmlmIChieXRlcyA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRpa3Rva2VuX2JnLndhc21cIik7XG5jb25zdCB3YXNtTW9kdWxlID0gbmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShieXRlcyk7XG5jb25zdCB3YXNtSW5zdGFuY2UgPSBuZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2Uod2FzbU1vZHVsZSwgaW1wb3J0cyk7XG53YXNtLl9fd2JnX3NldF93YXNtKHdhc21JbnN0YW5jZS5leHBvcnRzKTtcbmV4cG9ydHNbXCJnZXRfZW5jb2RpbmdcIl0gPSB3YXNtW1wiZ2V0X2VuY29kaW5nXCJdO1xuZXhwb3J0c1tcImVuY29kaW5nX2Zvcl9tb2RlbFwiXSA9IHdhc21bXCJlbmNvZGluZ19mb3JfbW9kZWxcIl07XG5leHBvcnRzW1wiVGlrdG9rZW5cIl0gPSB3YXNtW1wiVGlrdG9rZW5cIl07Il0sIm5hbWVzIjpbIndhc20iLCJyZXF1aXJlIiwiaW1wb3J0cyIsInBhdGgiLCJmcyIsImNhbmRpZGF0ZXMiLCJfX2Rpcm5hbWUiLCJzcGxpdCIsInNlcCIsInJlZHVjZSIsIm1lbW8iLCJfIiwiaW5kZXgiLCJhcnJheSIsInByZWZpeCIsInNsaWNlIiwiam9pbiIsImluY2x1ZGVzIiwidW5zaGlmdCIsImJ5dGVzIiwiY2FuZGlkYXRlIiwicmVhZEZpbGVTeW5jIiwiRXJyb3IiLCJ3YXNtTW9kdWxlIiwiV2ViQXNzZW1ibHkiLCJNb2R1bGUiLCJ3YXNtSW5zdGFuY2UiLCJJbnN0YW5jZSIsIl9fd2JnX3NldF93YXNtIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tiktoken/tiktoken.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/tiktoken/tiktoken_bg.cjs":
/*!***********************************************!*\
  !*** ./node_modules/tiktoken/tiktoken_bg.cjs ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nlet wasm;\nmodule.exports.__wbg_set_wasm = function(val) {\n    wasm = val;\n};\nconst heap = new Array(128).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n    return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nlet WASM_VECTOR_LEN = 0;\nlet cachedUint8ArrayMemory0 = null;\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\nconst lTextEncoder = typeof TextEncoder === \"undefined\" ? (0, module.require)(\"util\").TextEncoder : TextEncoder;\nlet cachedTextEncoder = new lTextEncoder(\"utf-8\");\nconst encodeString = typeof cachedTextEncoder.encodeInto === \"function\" ? function(arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n} : function(arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n    const mem = getUint8ArrayMemory0();\n    let offset = 0;\n    for(; offset < len; offset++){\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\nlet cachedDataViewMemory0 = null;\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\nconst lTextDecoder = typeof TextDecoder === \"undefined\" ? (0, module.require)(\"util\").TextDecoder : TextDecoder;\nlet cachedTextDecoder = new lTextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true\n});\ncachedTextDecoder.decode();\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nlet cachedUint32ArrayMemory0 = null;\nfunction getUint32ArrayMemory0() {\n    if (cachedUint32ArrayMemory0 === null || cachedUint32ArrayMemory0.byteLength === 0) {\n        cachedUint32ArrayMemory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32ArrayMemory0;\n}\nfunction getArrayU32FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint32ArrayMemory0().subarray(ptr / 4, ptr / 4 + len);\n}\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4, 4) >>> 0;\n    getUint32ArrayMemory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\nmodule.exports.get_encoding = function(encoding, extend_special_tokens) {\n    if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(encoding, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.get_encoding(retptr, ptr0, len0, addHeapObject(extend_special_tokens));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Tiktoken.__wrap(r0);\n    } finally{\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\nmodule.exports.encoding_for_model = function(model, extend_special_tokens) {\n    if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(model, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.encoding_for_model(retptr, ptr0, len0, addHeapObject(extend_special_tokens));\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Tiktoken.__wrap(r0);\n    } finally{\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_export_3(addHeapObject(e));\n    }\n}\nconst TiktokenFinalization = typeof FinalizationRegistry === \"undefined\" ? {\n    register: ()=>{},\n    unregister: ()=>{}\n} : new FinalizationRegistry((ptr)=>wasm.__wbg_tiktoken_free(ptr >>> 0, 1));\n/** */ class Tiktoken {\n    /**\n     * @param {string} tiktoken_bfe\n     * @param {any} special_tokens\n     * @param {string} pat_str\n     */ constructor(tiktoken_bfe, special_tokens, pat_str){\n        if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n        const ptr0 = passStringToWasm0(tiktoken_bfe, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(pat_str, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.tiktoken_new(ptr0, len0, addHeapObject(special_tokens), ptr1, len1);\n        this.__wbg_ptr = ret >>> 0;\n        TiktokenFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /** @returns {string | undefined} */ get name() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tiktoken_name(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_2(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Tiktoken.prototype);\n        obj.__wbg_ptr = ptr;\n        TiktokenFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TiktokenFinalization.unregister(this);\n        return ptr;\n    }\n    free() {\n        if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tiktoken_free(ptr, 0);\n    }\n    /**\n     * @param {string} text\n     * @param {any} allowed_special\n     * @param {any} disallowed_special\n     * @returns {Uint32Array}\n     */ encode(text, allowed_special, disallowed_special) {\n        if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.tiktoken_encode(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(allowed_special), addHeapObject(disallowed_special));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v2 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_2(r0, r1 * 4, 4);\n            return v2;\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} text\n     * @returns {Uint32Array}\n     */ encode_ordinary(text) {\n        if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.tiktoken_encode_ordinary(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v2 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_2(r0, r1 * 4, 4);\n            return v2;\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} text\n     * @param {any} allowed_special\n     * @param {any} disallowed_special\n     * @returns {any}\n     */ encode_with_unstable(text, allowed_special, disallowed_special) {\n        if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.tiktoken_encode_with_unstable(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(allowed_special), addHeapObject(disallowed_special));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {number}\n     */ encode_single_token(bytes) {\n        if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_0);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.tiktoken_encode_single_token(this.__wbg_ptr, ptr0, len0);\n        return ret >>> 0;\n    }\n    /**\n     * @param {Uint32Array} tokens\n     * @returns {Uint8Array}\n     */ decode(tokens) {\n        if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray32ToWasm0(tokens, wasm.__wbindgen_export_0);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.tiktoken_decode(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v2 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_2(r0, r1 * 1, 1);\n            return v2;\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} token\n     * @returns {Uint8Array}\n     */ decode_single_token_bytes(token) {\n        if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.tiktoken_decode_single_token_bytes(retptr, this.__wbg_ptr, token);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_export_2(r0, r1 * 1, 1);\n            return v1;\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /** @returns {any} */ token_byte_values() {\n        if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n        const ret = wasm.tiktoken_token_byte_values(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.Tiktoken = Tiktoken;\nmodule.exports.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n;\nmodule.exports.__wbindgen_is_undefined = function(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n;\nmodule.exports.__wbindgen_string_get = function(arg0, arg1) {\n    if (wasm == null) throw new Error(\"tiktoken: WASM binary has not been propery initialized.\");\n    const obj = getObject(arg1);\n    const ret = typeof obj === \"string\" ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n;\nmodule.exports.__wbindgen_error_new = function(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n;\nmodule.exports.__wbg_parse_52202f117ec9ecfa = function() {\n    return handleError(function(arg0, arg1) {\n        const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments);\n};\n;\nmodule.exports.__wbg_stringify_bbf45426c92a6bf5 = function() {\n    return handleError(function(arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments);\n};\n;\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tiktoken/tiktoken_bg.cjs\n");

/***/ })

};
;