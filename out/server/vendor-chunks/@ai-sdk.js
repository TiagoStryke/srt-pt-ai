"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ai-sdk";
exports.ids = ["vendor-chunks/@ai-sdk"];
exports.modules = {

/***/ "(rsc)/./node_modules/@ai-sdk/google/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@ai-sdk/google/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGoogleGenerativeAI: () => (/* binding */ createGoogleGenerativeAI),\n/* harmony export */   google: () => (/* binding */ google)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n// src/google-provider.ts\n\n// src/google-generative-ai-language-model.ts\n\n\n// src/convert-json-schema-to-openapi-schema.ts\nfunction convertJSONSchemaToOpenAPISchema(jsonSchema) {\n    if (isEmptyObjectSchema(jsonSchema)) {\n        return void 0;\n    }\n    if (typeof jsonSchema === \"boolean\") {\n        return {\n            type: \"boolean\",\n            properties: {}\n        };\n    }\n    const { type, description, required, properties, items, allOf, anyOf, oneOf, format, const: constValue, minLength } = jsonSchema;\n    const result = {};\n    if (description) result.description = description;\n    if (required) result.required = required;\n    if (format) result.format = format;\n    if (constValue !== void 0) {\n        result.enum = [\n            constValue\n        ];\n    }\n    if (type) {\n        if (Array.isArray(type)) {\n            if (type.includes(\"null\")) {\n                result.type = type.filter((t)=>t !== \"null\")[0];\n                result.nullable = true;\n            } else {\n                result.type = type;\n            }\n        } else if (type === \"null\") {\n            result.type = \"null\";\n        } else {\n            result.type = type;\n        }\n    }\n    if (properties != null) {\n        result.properties = Object.entries(properties).reduce((acc, [key, value])=>{\n            acc[key] = convertJSONSchemaToOpenAPISchema(value);\n            return acc;\n        }, {});\n    }\n    if (items) {\n        result.items = Array.isArray(items) ? items.map(convertJSONSchemaToOpenAPISchema) : convertJSONSchemaToOpenAPISchema(items);\n    }\n    if (allOf) {\n        result.allOf = allOf.map(convertJSONSchemaToOpenAPISchema);\n    }\n    if (anyOf) {\n        result.anyOf = anyOf.map(convertJSONSchemaToOpenAPISchema);\n    }\n    if (oneOf) {\n        result.oneOf = oneOf.map(convertJSONSchemaToOpenAPISchema);\n    }\n    if (minLength !== void 0) result.minLength = minLength;\n    return result;\n}\nfunction isEmptyObjectSchema(jsonSchema) {\n    return jsonSchema != null && typeof jsonSchema === \"object\" && jsonSchema.type === \"object\" && (jsonSchema.properties == null || Object.keys(jsonSchema.properties).length === 0);\n}\n// src/convert-to-google-generative-ai-messages.ts\n\n\nfunction convertToGoogleGenerativeAIMessages(prompt) {\n    var _a, _b;\n    const systemInstructionParts = [];\n    const contents = [];\n    let systemMessagesAllowed = true;\n    for (const { role, content } of prompt){\n        switch(role){\n            case \"system\":\n                {\n                    if (!systemMessagesAllowed) {\n                        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.UnsupportedFunctionalityError({\n                            functionality: \"system messages are only supported at the beginning of the conversation\"\n                        });\n                    }\n                    systemInstructionParts.push({\n                        text: content\n                    });\n                    break;\n                }\n            case \"user\":\n                {\n                    systemMessagesAllowed = false;\n                    const parts = [];\n                    for (const part of content){\n                        switch(part.type){\n                            case \"text\":\n                                {\n                                    parts.push({\n                                        text: part.text\n                                    });\n                                    break;\n                                }\n                            case \"image\":\n                                {\n                                    parts.push(part.image instanceof URL ? {\n                                        fileData: {\n                                            mimeType: (_a = part.mimeType) != null ? _a : \"image/jpeg\",\n                                            fileUri: part.image.toString()\n                                        }\n                                    } : {\n                                        inlineData: {\n                                            mimeType: (_b = part.mimeType) != null ? _b : \"image/jpeg\",\n                                            data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertUint8ArrayToBase64)(part.image)\n                                        }\n                                    });\n                                    break;\n                                }\n                            case \"file\":\n                                {\n                                    parts.push(part.data instanceof URL ? {\n                                        fileData: {\n                                            mimeType: part.mimeType,\n                                            fileUri: part.data.toString()\n                                        }\n                                    } : {\n                                        inlineData: {\n                                            mimeType: part.mimeType,\n                                            data: part.data\n                                        }\n                                    });\n                                    break;\n                                }\n                            default:\n                                {\n                                    const _exhaustiveCheck = part;\n                                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.UnsupportedFunctionalityError({\n                                        functionality: `prompt part: ${_exhaustiveCheck}`\n                                    });\n                                }\n                        }\n                    }\n                    contents.push({\n                        role: \"user\",\n                        parts\n                    });\n                    break;\n                }\n            case \"assistant\":\n                {\n                    systemMessagesAllowed = false;\n                    contents.push({\n                        role: \"model\",\n                        parts: content.map((part)=>{\n                            switch(part.type){\n                                case \"text\":\n                                    {\n                                        return part.text.length === 0 ? void 0 : {\n                                            text: part.text\n                                        };\n                                    }\n                                case \"tool-call\":\n                                    {\n                                        return {\n                                            functionCall: {\n                                                name: part.toolName,\n                                                args: part.args\n                                            }\n                                        };\n                                    }\n                            }\n                        }).filter((part)=>part !== void 0)\n                    });\n                    break;\n                }\n            case \"tool\":\n                {\n                    systemMessagesAllowed = false;\n                    contents.push({\n                        role: \"user\",\n                        parts: content.map((part)=>({\n                                functionResponse: {\n                                    name: part.toolName,\n                                    response: {\n                                        name: part.toolName,\n                                        content: part.result\n                                    }\n                                }\n                            }))\n                    });\n                    break;\n                }\n            default:\n                {\n                    const _exhaustiveCheck = role;\n                    throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n                }\n        }\n    }\n    return {\n        systemInstruction: systemInstructionParts.length > 0 ? {\n            parts: systemInstructionParts\n        } : void 0,\n        contents\n    };\n}\n// src/get-model-path.ts\nfunction getModelPath(modelId) {\n    return modelId.includes(\"/\") ? modelId : `models/${modelId}`;\n}\n// src/google-error.ts\n\n\nvar googleErrorDataSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    error: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        code: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullable(),\n        message: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n        status: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n    })\n});\nvar googleFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n    errorSchema: googleErrorDataSchema,\n    errorToMessage: (data)=>data.error.message\n});\n// src/google-prepare-tools.ts\n\nfunction prepareTools(mode, useSearchGrounding, isGemini2) {\n    var _a, _b;\n    const tools = ((_a = mode.tools) == null ? void 0 : _a.length) ? mode.tools : void 0;\n    const toolWarnings = [];\n    if (useSearchGrounding) {\n        return {\n            tools: isGemini2 ? {\n                googleSearch: {}\n            } : {\n                googleSearchRetrieval: {}\n            },\n            toolConfig: void 0,\n            toolWarnings\n        };\n    }\n    if (tools == null) {\n        return {\n            tools: void 0,\n            toolConfig: void 0,\n            toolWarnings\n        };\n    }\n    const functionDeclarations = [];\n    for (const tool of tools){\n        if (tool.type === \"provider-defined\") {\n            toolWarnings.push({\n                type: \"unsupported-tool\",\n                tool\n            });\n        } else {\n            functionDeclarations.push({\n                name: tool.name,\n                description: (_b = tool.description) != null ? _b : \"\",\n                parameters: convertJSONSchemaToOpenAPISchema(tool.parameters)\n            });\n        }\n    }\n    const toolChoice = mode.toolChoice;\n    if (toolChoice == null) {\n        return {\n            tools: {\n                functionDeclarations\n            },\n            toolConfig: void 0,\n            toolWarnings\n        };\n    }\n    const type = toolChoice.type;\n    switch(type){\n        case \"auto\":\n            return {\n                tools: {\n                    functionDeclarations\n                },\n                toolConfig: {\n                    functionCallingConfig: {\n                        mode: \"AUTO\"\n                    }\n                },\n                toolWarnings\n            };\n        case \"none\":\n            return {\n                tools: {\n                    functionDeclarations\n                },\n                toolConfig: {\n                    functionCallingConfig: {\n                        mode: \"NONE\"\n                    }\n                },\n                toolWarnings\n            };\n        case \"required\":\n            return {\n                tools: {\n                    functionDeclarations\n                },\n                toolConfig: {\n                    functionCallingConfig: {\n                        mode: \"ANY\"\n                    }\n                },\n                toolWarnings\n            };\n        case \"tool\":\n            return {\n                tools: {\n                    functionDeclarations\n                },\n                toolConfig: {\n                    functionCallingConfig: {\n                        mode: \"ANY\",\n                        allowedFunctionNames: [\n                            toolChoice.toolName\n                        ]\n                    }\n                },\n                toolWarnings\n            };\n        default:\n            {\n                const _exhaustiveCheck = type;\n                throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.UnsupportedFunctionalityError({\n                    functionality: `Unsupported tool choice type: ${_exhaustiveCheck}`\n                });\n            }\n    }\n}\n// src/map-google-generative-ai-finish-reason.ts\nfunction mapGoogleGenerativeAIFinishReason({ finishReason, hasToolCalls }) {\n    switch(finishReason){\n        case \"STOP\":\n            return hasToolCalls ? \"tool-calls\" : \"stop\";\n        case \"MAX_TOKENS\":\n            return \"length\";\n        case \"RECITATION\":\n        case \"SAFETY\":\n            return \"content-filter\";\n        case \"FINISH_REASON_UNSPECIFIED\":\n        case \"OTHER\":\n            return \"other\";\n        default:\n            return \"unknown\";\n    }\n}\n// src/google-generative-ai-language-model.ts\nvar GoogleGenerativeAILanguageModel = class {\n    constructor(modelId, settings, config){\n        this.specificationVersion = \"v1\";\n        this.defaultObjectGenerationMode = \"json\";\n        this.supportsImageUrls = false;\n        this.modelId = modelId;\n        this.settings = settings;\n        this.config = config;\n    }\n    get supportsStructuredOutputs() {\n        var _a;\n        return (_a = this.settings.structuredOutputs) != null ? _a : true;\n    }\n    get provider() {\n        return this.config.provider;\n    }\n    async getArgs({ mode, prompt, maxTokens, temperature, topP, topK, frequencyPenalty, presencePenalty, stopSequences, responseFormat, seed }) {\n        var _a, _b;\n        const type = mode.type;\n        const warnings = [];\n        if (seed != null) {\n            warnings.push({\n                type: \"unsupported-setting\",\n                setting: \"seed\"\n            });\n        }\n        const generationConfig = {\n            // standardized settings:\n            maxOutputTokens: maxTokens,\n            temperature,\n            topK,\n            topP,\n            frequencyPenalty,\n            presencePenalty,\n            stopSequences,\n            // response format:\n            responseMimeType: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" ? \"application/json\" : void 0,\n            responseSchema: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null && // Google GenAI does not support all OpenAPI Schema features,\n            // so this is needed as an escape hatch:\n            this.supportsStructuredOutputs ? convertJSONSchemaToOpenAPISchema(responseFormat.schema) : void 0,\n            ...this.settings.audioTimestamp && {\n                audioTimestamp: this.settings.audioTimestamp\n            }\n        };\n        const { contents, systemInstruction } = convertToGoogleGenerativeAIMessages(prompt);\n        switch(type){\n            case \"regular\":\n                {\n                    const { tools, toolConfig, toolWarnings } = prepareTools(mode, (_a = this.settings.useSearchGrounding) != null ? _a : false, this.modelId.includes(\"gemini-2\"));\n                    return {\n                        args: {\n                            generationConfig,\n                            contents,\n                            systemInstruction,\n                            safetySettings: this.settings.safetySettings,\n                            tools,\n                            toolConfig,\n                            cachedContent: this.settings.cachedContent\n                        },\n                        warnings: [\n                            ...warnings,\n                            ...toolWarnings\n                        ]\n                    };\n                }\n            case \"object-json\":\n                {\n                    return {\n                        args: {\n                            generationConfig: {\n                                ...generationConfig,\n                                responseMimeType: \"application/json\",\n                                responseSchema: mode.schema != null && // Google GenAI does not support all OpenAPI Schema features,\n                                // so this is needed as an escape hatch:\n                                this.supportsStructuredOutputs ? convertJSONSchemaToOpenAPISchema(mode.schema) : void 0\n                            },\n                            contents,\n                            systemInstruction,\n                            safetySettings: this.settings.safetySettings,\n                            cachedContent: this.settings.cachedContent\n                        },\n                        warnings\n                    };\n                }\n            case \"object-tool\":\n                {\n                    return {\n                        args: {\n                            generationConfig,\n                            contents,\n                            tools: {\n                                functionDeclarations: [\n                                    {\n                                        name: mode.tool.name,\n                                        description: (_b = mode.tool.description) != null ? _b : \"\",\n                                        parameters: convertJSONSchemaToOpenAPISchema(mode.tool.parameters)\n                                    }\n                                ]\n                            },\n                            toolConfig: {\n                                functionCallingConfig: {\n                                    mode: \"ANY\"\n                                }\n                            },\n                            safetySettings: this.settings.safetySettings,\n                            cachedContent: this.settings.cachedContent\n                        },\n                        warnings\n                    };\n                }\n            default:\n                {\n                    const _exhaustiveCheck = type;\n                    throw new Error(`Unsupported type: ${_exhaustiveCheck}`);\n                }\n        }\n    }\n    supportsUrl(url) {\n        return url.toString().startsWith(\"https://generativelanguage.googleapis.com/v1beta/files/\");\n    }\n    async doGenerate(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const { args, warnings } = await this.getArgs(options);\n        const body = JSON.stringify(args);\n        const mergedHeaders = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers), options.headers);\n        const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n            url: `${this.config.baseURL}/${getModelPath(this.modelId)}:generateContent`,\n            headers: mergedHeaders,\n            body: args,\n            failedResponseHandler: googleFailedResponseHandler,\n            successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(responseSchema),\n            abortSignal: options.abortSignal,\n            fetch: this.config.fetch\n        });\n        const { contents: rawPrompt, ...rawSettings } = args;\n        const candidate = response.candidates[0];\n        const toolCalls = getToolCallsFromParts({\n            parts: (_b = (_a = candidate.content) == null ? void 0 : _a.parts) != null ? _b : [],\n            generateId: this.config.generateId\n        });\n        const usageMetadata = response.usageMetadata;\n        return {\n            text: getTextFromParts((_d = (_c = candidate.content) == null ? void 0 : _c.parts) != null ? _d : []),\n            toolCalls,\n            finishReason: mapGoogleGenerativeAIFinishReason({\n                finishReason: candidate.finishReason,\n                hasToolCalls: toolCalls != null && toolCalls.length > 0\n            }),\n            usage: {\n                promptTokens: (_e = usageMetadata == null ? void 0 : usageMetadata.promptTokenCount) != null ? _e : NaN,\n                completionTokens: (_f = usageMetadata == null ? void 0 : usageMetadata.candidatesTokenCount) != null ? _f : NaN\n            },\n            rawCall: {\n                rawPrompt,\n                rawSettings\n            },\n            rawResponse: {\n                headers: responseHeaders\n            },\n            warnings,\n            providerMetadata: {\n                google: {\n                    groundingMetadata: (_g = candidate.groundingMetadata) != null ? _g : null,\n                    safetyRatings: (_h = candidate.safetyRatings) != null ? _h : null\n                }\n            },\n            request: {\n                body\n            }\n        };\n    }\n    async doStream(options) {\n        const { args, warnings } = await this.getArgs(options);\n        const body = JSON.stringify(args);\n        const headers = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers), options.headers);\n        const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n            url: `${this.config.baseURL}/${getModelPath(this.modelId)}:streamGenerateContent?alt=sse`,\n            headers,\n            body: args,\n            failedResponseHandler: googleFailedResponseHandler,\n            successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(chunkSchema),\n            abortSignal: options.abortSignal,\n            fetch: this.config.fetch\n        });\n        const { contents: rawPrompt, ...rawSettings } = args;\n        let finishReason = \"unknown\";\n        let usage = {\n            promptTokens: Number.NaN,\n            completionTokens: Number.NaN\n        };\n        let providerMetadata = void 0;\n        const generateId2 = this.config.generateId;\n        let hasToolCalls = false;\n        return {\n            stream: response.pipeThrough(new TransformStream({\n                transform (chunk, controller) {\n                    var _a, _b, _c, _d, _e;\n                    if (!chunk.success) {\n                        controller.enqueue({\n                            type: \"error\",\n                            error: chunk.error\n                        });\n                        return;\n                    }\n                    const value = chunk.value;\n                    const usageMetadata = value.usageMetadata;\n                    if (usageMetadata != null) {\n                        usage = {\n                            promptTokens: (_a = usageMetadata.promptTokenCount) != null ? _a : NaN,\n                            completionTokens: (_b = usageMetadata.candidatesTokenCount) != null ? _b : NaN\n                        };\n                    }\n                    const candidate = (_c = value.candidates) == null ? void 0 : _c[0];\n                    if (candidate == null) {\n                        return;\n                    }\n                    if (candidate.finishReason != null) {\n                        finishReason = mapGoogleGenerativeAIFinishReason({\n                            finishReason: candidate.finishReason,\n                            hasToolCalls\n                        });\n                        providerMetadata = {\n                            google: {\n                                groundingMetadata: (_d = candidate.groundingMetadata) != null ? _d : null,\n                                safetyRatings: (_e = candidate.safetyRatings) != null ? _e : null\n                            }\n                        };\n                    }\n                    const content = candidate.content;\n                    if (content == null) {\n                        return;\n                    }\n                    const deltaText = getTextFromParts(content.parts);\n                    if (deltaText != null) {\n                        controller.enqueue({\n                            type: \"text-delta\",\n                            textDelta: deltaText\n                        });\n                    }\n                    const toolCallDeltas = getToolCallsFromParts({\n                        parts: content.parts,\n                        generateId: generateId2\n                    });\n                    if (toolCallDeltas != null) {\n                        for (const toolCall of toolCallDeltas){\n                            controller.enqueue({\n                                type: \"tool-call-delta\",\n                                toolCallType: \"function\",\n                                toolCallId: toolCall.toolCallId,\n                                toolName: toolCall.toolName,\n                                argsTextDelta: toolCall.args\n                            });\n                            controller.enqueue({\n                                type: \"tool-call\",\n                                toolCallType: \"function\",\n                                toolCallId: toolCall.toolCallId,\n                                toolName: toolCall.toolName,\n                                args: toolCall.args\n                            });\n                            hasToolCalls = true;\n                        }\n                    }\n                },\n                flush (controller) {\n                    controller.enqueue({\n                        type: \"finish\",\n                        finishReason,\n                        usage,\n                        providerMetadata\n                    });\n                }\n            })),\n            rawCall: {\n                rawPrompt,\n                rawSettings\n            },\n            rawResponse: {\n                headers: responseHeaders\n            },\n            warnings,\n            request: {\n                body\n            }\n        };\n    }\n};\nfunction getToolCallsFromParts({ parts, generateId: generateId2 }) {\n    const functionCallParts = parts.filter((part)=>\"functionCall\" in part);\n    return functionCallParts.length === 0 ? void 0 : functionCallParts.map((part)=>({\n            toolCallType: \"function\",\n            toolCallId: generateId2(),\n            toolName: part.functionCall.name,\n            args: JSON.stringify(part.functionCall.args)\n        }));\n}\nfunction getTextFromParts(parts) {\n    const textParts = parts.filter((part)=>\"text\" in part);\n    return textParts.length === 0 ? void 0 : textParts.map((part)=>part.text).join(\"\");\n}\nvar contentSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    parts: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            text: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n        }),\n        zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            functionCall: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n                name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n                args: zod__WEBPACK_IMPORTED_MODULE_2__.z.unknown()\n            })\n        })\n    ]))\n});\nvar groundingMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    webSearchQueries: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).nullish(),\n    retrievalQueries: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).nullish(),\n    searchEntryPoint: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        renderedContent: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n    }).nullish(),\n    groundingChunks: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        web: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            uri: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            title: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n        }).nullish(),\n        retrievedContext: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            uri: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n            title: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n        }).nullish()\n    })).nullish(),\n    groundingSupports: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        segment: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            startIndex: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n            endIndex: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n            text: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish()\n        }),\n        segment_text: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n        groundingChunkIndices: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.number()).nullish(),\n        supportChunkIndices: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.number()).nullish(),\n        confidenceScores: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.number()).nullish(),\n        confidenceScore: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.number()).nullish()\n    })).nullish(),\n    retrievalMetadata: zod__WEBPACK_IMPORTED_MODULE_2__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n            webDynamicRetrievalScore: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n        }),\n        zod__WEBPACK_IMPORTED_MODULE_2__.z.object({})\n    ]).nullish()\n});\nvar safetyRatingSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    category: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    probability: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n    probabilityScore: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n    severity: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n    severityScore: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n    blocked: zod__WEBPACK_IMPORTED_MODULE_2__.z.boolean().nullish()\n});\nvar responseSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    candidates: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        content: contentSchema.nullish(),\n        finishReason: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n        safetyRatings: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(safetyRatingSchema).nullish(),\n        groundingMetadata: groundingMetadataSchema.nullish()\n    })),\n    usageMetadata: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        promptTokenCount: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n        candidatesTokenCount: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n        totalTokenCount: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish()\n    }).nullish()\n});\nvar chunkSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    candidates: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        content: contentSchema.nullish(),\n        finishReason: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().nullish(),\n        safetyRatings: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(safetyRatingSchema).nullish(),\n        groundingMetadata: groundingMetadataSchema.nullish()\n    })).nullish(),\n    usageMetadata: zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        promptTokenCount: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n        candidatesTokenCount: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish(),\n        totalTokenCount: zod__WEBPACK_IMPORTED_MODULE_2__.z.number().nullish()\n    }).nullish()\n});\n// src/google-generative-ai-embedding-model.ts\n\n\n\nvar GoogleGenerativeAIEmbeddingModel = class {\n    constructor(modelId, settings, config){\n        this.specificationVersion = \"v1\";\n        this.modelId = modelId;\n        this.settings = settings;\n        this.config = config;\n    }\n    get provider() {\n        return this.config.provider;\n    }\n    get maxEmbeddingsPerCall() {\n        return 2048;\n    }\n    get supportsParallelCalls() {\n        return true;\n    }\n    async doEmbed({ values, headers, abortSignal }) {\n        if (values.length > this.maxEmbeddingsPerCall) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.TooManyEmbeddingValuesForCallError({\n                provider: this.provider,\n                modelId: this.modelId,\n                maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n                values\n            });\n        }\n        const mergedHeaders = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers), headers);\n        const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n            url: `${this.config.baseURL}/models/${this.modelId}:batchEmbedContents`,\n            headers: mergedHeaders,\n            body: {\n                requests: values.map((value)=>({\n                        model: `models/${this.modelId}`,\n                        content: {\n                            role: \"user\",\n                            parts: [\n                                {\n                                    text: value\n                                }\n                            ]\n                        },\n                        outputDimensionality: this.settings.outputDimensionality\n                    }))\n            },\n            failedResponseHandler: googleFailedResponseHandler,\n            successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(googleGenerativeAITextEmbeddingResponseSchema),\n            abortSignal,\n            fetch: this.config.fetch\n        });\n        return {\n            embeddings: response.embeddings.map((item)=>item.values),\n            usage: void 0,\n            rawResponse: {\n                headers: responseHeaders\n            }\n        };\n    }\n};\nvar googleGenerativeAITextEmbeddingResponseSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    embeddings: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n        values: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.number())\n    }))\n});\n// src/google-provider.ts\nfunction createGoogleGenerativeAI(options = {}) {\n    var _a;\n    const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://generativelanguage.googleapis.com/v1beta\";\n    const getHeaders = ()=>({\n            \"x-goog-api-key\": (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n                apiKey: options.apiKey,\n                environmentVariableName: \"GOOGLE_GENERATIVE_AI_API_KEY\",\n                description: \"Google Generative AI\"\n            }),\n            ...options.headers\n        });\n    const createChatModel = (modelId, settings = {})=>{\n        var _a2;\n        return new GoogleGenerativeAILanguageModel(modelId, settings, {\n            provider: \"google.generative-ai\",\n            baseURL,\n            headers: getHeaders,\n            generateId: (_a2 = options.generateId) != null ? _a2 : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId,\n            fetch: options.fetch\n        });\n    };\n    const createEmbeddingModel = (modelId, settings = {})=>new GoogleGenerativeAIEmbeddingModel(modelId, settings, {\n            provider: \"google.generative-ai\",\n            baseURL,\n            headers: getHeaders,\n            fetch: options.fetch\n        });\n    const provider = function(modelId, settings) {\n        if (new.target) {\n            throw new Error(\"The Google Generative AI model function cannot be called with the new keyword.\");\n        }\n        return createChatModel(modelId, settings);\n    };\n    provider.languageModel = createChatModel;\n    provider.chat = createChatModel;\n    provider.generativeAI = createChatModel;\n    provider.embedding = createEmbeddingModel;\n    provider.textEmbedding = createEmbeddingModel;\n    provider.textEmbeddingModel = createEmbeddingModel;\n    return provider;\n}\nvar google = createGoogleGenerativeAI();\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/google/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@ai-sdk/provider-utils/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asValidator: () => (/* binding */ asValidator),\n/* harmony export */   combineHeaders: () => (/* binding */ combineHeaders),\n/* harmony export */   convertAsyncIteratorToReadableStream: () => (/* binding */ convertAsyncIteratorToReadableStream),\n/* harmony export */   convertBase64ToUint8Array: () => (/* binding */ convertBase64ToUint8Array),\n/* harmony export */   convertUint8ArrayToBase64: () => (/* binding */ convertUint8ArrayToBase64),\n/* harmony export */   createEventSourceResponseHandler: () => (/* binding */ createEventSourceResponseHandler),\n/* harmony export */   createIdGenerator: () => (/* binding */ createIdGenerator),\n/* harmony export */   createJsonErrorResponseHandler: () => (/* binding */ createJsonErrorResponseHandler),\n/* harmony export */   createJsonResponseHandler: () => (/* binding */ createJsonResponseHandler),\n/* harmony export */   createJsonStreamResponseHandler: () => (/* binding */ createJsonStreamResponseHandler),\n/* harmony export */   extractResponseHeaders: () => (/* binding */ extractResponseHeaders),\n/* harmony export */   generateId: () => (/* binding */ generateId),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError),\n/* harmony export */   isParsableJson: () => (/* binding */ isParsableJson),\n/* harmony export */   isValidator: () => (/* binding */ isValidator),\n/* harmony export */   loadApiKey: () => (/* binding */ loadApiKey),\n/* harmony export */   loadOptionalSetting: () => (/* binding */ loadOptionalSetting),\n/* harmony export */   loadSetting: () => (/* binding */ loadSetting),\n/* harmony export */   parseJSON: () => (/* binding */ parseJSON),\n/* harmony export */   postJsonToApi: () => (/* binding */ postJsonToApi),\n/* harmony export */   postToApi: () => (/* binding */ postToApi),\n/* harmony export */   resolve: () => (/* binding */ resolve),\n/* harmony export */   safeParseJSON: () => (/* binding */ safeParseJSON),\n/* harmony export */   safeValidateTypes: () => (/* binding */ safeValidateTypes),\n/* harmony export */   validateTypes: () => (/* binding */ validateTypes),\n/* harmony export */   validator: () => (/* binding */ validator),\n/* harmony export */   validatorSymbol: () => (/* binding */ validatorSymbol),\n/* harmony export */   withoutTrailingSlash: () => (/* binding */ withoutTrailingSlash),\n/* harmony export */   zodValidator: () => (/* binding */ zodValidator)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var nanoid_non_secure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nanoid/non-secure */ \"(rsc)/./node_modules/nanoid/non-secure/index.js\");\n/* harmony import */ var secure_json_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! secure-json-parse */ \"(rsc)/./node_modules/secure-json-parse/index.js\");\n/* harmony import */ var eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventsource-parser/stream */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/node_modules/eventsource-parser/dist/stream.js\");\n// src/combine-headers.ts\nfunction combineHeaders(...headers) {\n    return headers.reduce((combinedHeaders, currentHeaders)=>({\n            ...combinedHeaders,\n            ...currentHeaders != null ? currentHeaders : {}\n        }), {});\n}\n// src/convert-async-iterator-to-readable-stream.ts\nfunction convertAsyncIteratorToReadableStream(iterator) {\n    return new ReadableStream({\n        /**\n     * Called when the consumer wants to pull more data from the stream.\n     *\n     * @param {ReadableStreamDefaultController<T>} controller - The controller to enqueue data into the stream.\n     * @returns {Promise<void>}\n     */ async pull (controller) {\n            try {\n                const { value, done } = await iterator.next();\n                if (done) {\n                    controller.close();\n                } else {\n                    controller.enqueue(value);\n                }\n            } catch (error) {\n                controller.error(error);\n            }\n        },\n        /**\n     * Called when the consumer cancels the stream.\n     */ cancel () {}\n    });\n}\n// src/extract-response-headers.ts\nfunction extractResponseHeaders(response) {\n    const headers = {};\n    response.headers.forEach((value, key)=>{\n        headers[key] = value;\n    });\n    return headers;\n}\n// src/generate-id.ts\n\n\nvar createIdGenerator = ({ prefix, size: defaultSize = 16, alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", separator = \"-\" } = {})=>{\n    const generator = (0,nanoid_non_secure__WEBPACK_IMPORTED_MODULE_0__.customAlphabet)(alphabet, defaultSize);\n    if (prefix == null) {\n        return generator;\n    }\n    if (alphabet.includes(separator)) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n            argument: \"separator\",\n            message: `The separator \"${separator}\" must not be part of the alphabet \"${alphabet}\".`\n        });\n    }\n    return (size)=>`${prefix}${separator}${generator(size)}`;\n};\nvar generateId = createIdGenerator();\n// src/get-error-message.ts\nfunction getErrorMessage(error) {\n    if (error == null) {\n        return \"unknown error\";\n    }\n    if (typeof error === \"string\") {\n        return error;\n    }\n    if (error instanceof Error) {\n        return error.message;\n    }\n    return JSON.stringify(error);\n}\n// src/is-abort-error.ts\nfunction isAbortError(error) {\n    return error instanceof Error && (error.name === \"AbortError\" || error.name === \"TimeoutError\");\n}\n// src/load-api-key.ts\n\nfunction loadApiKey({ apiKey, environmentVariableName, apiKeyParameterName = \"apiKey\", description }) {\n    if (typeof apiKey === \"string\") {\n        return apiKey;\n    }\n    if (apiKey != null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadAPIKeyError({\n            message: `${description} API key must be a string.`\n        });\n    }\n    if (typeof process === \"undefined\") {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadAPIKeyError({\n            message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter. Environment variables is not supported in this environment.`\n        });\n    }\n    apiKey = process.env[environmentVariableName];\n    if (apiKey == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadAPIKeyError({\n            message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter or the ${environmentVariableName} environment variable.`\n        });\n    }\n    if (typeof apiKey !== \"string\") {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadAPIKeyError({\n            message: `${description} API key must be a string. The value of the ${environmentVariableName} environment variable is not a string.`\n        });\n    }\n    return apiKey;\n}\n// src/load-optional-setting.ts\nfunction loadOptionalSetting({ settingValue, environmentVariableName }) {\n    if (typeof settingValue === \"string\") {\n        return settingValue;\n    }\n    if (settingValue != null || typeof process === \"undefined\") {\n        return void 0;\n    }\n    settingValue = process.env[environmentVariableName];\n    if (settingValue == null || typeof settingValue !== \"string\") {\n        return void 0;\n    }\n    return settingValue;\n}\n// src/load-setting.ts\n\nfunction loadSetting({ settingValue, environmentVariableName, settingName, description }) {\n    if (typeof settingValue === \"string\") {\n        return settingValue;\n    }\n    if (settingValue != null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadSettingError({\n            message: `${description} setting must be a string.`\n        });\n    }\n    if (typeof process === \"undefined\") {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadSettingError({\n            message: `${description} setting is missing. Pass it using the '${settingName}' parameter. Environment variables is not supported in this environment.`\n        });\n    }\n    settingValue = process.env[environmentVariableName];\n    if (settingValue == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadSettingError({\n            message: `${description} setting is missing. Pass it using the '${settingName}' parameter or the ${environmentVariableName} environment variable.`\n        });\n    }\n    if (typeof settingValue !== \"string\") {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadSettingError({\n            message: `${description} setting must be a string. The value of the ${environmentVariableName} environment variable is not a string.`\n        });\n    }\n    return settingValue;\n}\n// src/parse-json.ts\n\n\n// src/validate-types.ts\n\n// src/validator.ts\nvar validatorSymbol = Symbol.for(\"vercel.ai.validator\");\nfunction validator(validate) {\n    return {\n        [validatorSymbol]: true,\n        validate\n    };\n}\nfunction isValidator(value) {\n    return typeof value === \"object\" && value !== null && validatorSymbol in value && value[validatorSymbol] === true && \"validate\" in value;\n}\nfunction asValidator(value) {\n    return isValidator(value) ? value : zodValidator(value);\n}\nfunction zodValidator(zodSchema) {\n    return validator((value)=>{\n        const result = zodSchema.safeParse(value);\n        return result.success ? {\n            success: true,\n            value: result.data\n        } : {\n            success: false,\n            error: result.error\n        };\n    });\n}\n// src/validate-types.ts\nfunction validateTypes({ value, schema: inputSchema }) {\n    const result = safeValidateTypes({\n        value,\n        schema: inputSchema\n    });\n    if (!result.success) {\n        throw _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError.wrap({\n            value,\n            cause: result.error\n        });\n    }\n    return result.value;\n}\nfunction safeValidateTypes({ value, schema }) {\n    const validator2 = asValidator(schema);\n    try {\n        if (validator2.validate == null) {\n            return {\n                success: true,\n                value\n            };\n        }\n        const result = validator2.validate(value);\n        if (result.success) {\n            return result;\n        }\n        return {\n            success: false,\n            error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError.wrap({\n                value,\n                cause: result.error\n            })\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError.wrap({\n                value,\n                cause: error\n            })\n        };\n    }\n}\n// src/parse-json.ts\nfunction parseJSON({ text, schema }) {\n    try {\n        const value = secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(text);\n        if (schema == null) {\n            return value;\n        }\n        return validateTypes({\n            value,\n            schema\n        });\n    } catch (error) {\n        if (_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError.isInstance(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError.isInstance(error)) {\n            throw error;\n        }\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError({\n            text,\n            cause: error\n        });\n    }\n}\nfunction safeParseJSON({ text, schema }) {\n    try {\n        const value = secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(text);\n        if (schema == null) {\n            return {\n                success: true,\n                value\n            };\n        }\n        return safeValidateTypes({\n            value,\n            schema\n        });\n    } catch (error) {\n        return {\n            success: false,\n            error: _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError.isInstance(error) ? error : new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError({\n                text,\n                cause: error\n            })\n        };\n    }\n}\nfunction isParsableJson(input) {\n    try {\n        secure_json_parse__WEBPACK_IMPORTED_MODULE_2__.parse(input);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n// src/post-to-api.ts\n\n// src/remove-undefined-entries.ts\nfunction removeUndefinedEntries(record) {\n    return Object.fromEntries(Object.entries(record).filter(([_key, value])=>value != null));\n}\n// src/post-to-api.ts\nvar getOriginalFetch = ()=>globalThis.fetch;\nvar postJsonToApi = async ({ url, headers, body, failedResponseHandler, successfulResponseHandler, abortSignal, fetch })=>postToApi({\n        url,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...headers\n        },\n        body: {\n            content: JSON.stringify(body),\n            values: body\n        },\n        failedResponseHandler,\n        successfulResponseHandler,\n        abortSignal,\n        fetch\n    });\nvar postToApi = async ({ url, headers = {}, body, successfulResponseHandler, failedResponseHandler, abortSignal, fetch = getOriginalFetch() })=>{\n    try {\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: removeUndefinedEntries(headers),\n            body: body.content,\n            signal: abortSignal\n        });\n        const responseHeaders = extractResponseHeaders(response);\n        if (!response.ok) {\n            let errorInformation;\n            try {\n                errorInformation = await failedResponseHandler({\n                    response,\n                    url,\n                    requestBodyValues: body.values\n                });\n            } catch (error) {\n                if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error)) {\n                    throw error;\n                }\n                throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: \"Failed to process error response\",\n                    cause: error,\n                    statusCode: response.status,\n                    url,\n                    responseHeaders,\n                    requestBodyValues: body.values\n                });\n            }\n            throw errorInformation.value;\n        }\n        try {\n            return await successfulResponseHandler({\n                response,\n                url,\n                requestBodyValues: body.values\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                if (isAbortError(error) || _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error)) {\n                    throw error;\n                }\n            }\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                message: \"Failed to process successful response\",\n                cause: error,\n                statusCode: response.status,\n                url,\n                responseHeaders,\n                requestBodyValues: body.values\n            });\n        }\n    } catch (error) {\n        if (isAbortError(error)) {\n            throw error;\n        }\n        if (error instanceof TypeError && error.message === \"fetch failed\") {\n            const cause = error.cause;\n            if (cause != null) {\n                throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: `Cannot connect to API: ${cause.message}`,\n                    cause,\n                    url,\n                    requestBodyValues: body.values,\n                    isRetryable: true\n                });\n            }\n        }\n        throw error;\n    }\n};\n// src/resolve.ts\nasync function resolve(value) {\n    if (typeof value === \"function\") {\n        value = value();\n    }\n    return Promise.resolve(value);\n}\n// src/response-handler.ts\n\n\nvar createJsonErrorResponseHandler = ({ errorSchema, errorToMessage, isRetryable })=>async ({ response, url, requestBodyValues })=>{\n        const responseBody = await response.text();\n        const responseHeaders = extractResponseHeaders(response);\n        if (responseBody.trim() === \"\") {\n            return {\n                responseHeaders,\n                value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: response.statusText,\n                    url,\n                    requestBodyValues,\n                    statusCode: response.status,\n                    responseHeaders,\n                    responseBody,\n                    isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n                })\n            };\n        }\n        try {\n            const parsedError = parseJSON({\n                text: responseBody,\n                schema: errorSchema\n            });\n            return {\n                responseHeaders,\n                value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: errorToMessage(parsedError),\n                    url,\n                    requestBodyValues,\n                    statusCode: response.status,\n                    responseHeaders,\n                    responseBody,\n                    data: parsedError,\n                    isRetryable: isRetryable == null ? void 0 : isRetryable(response, parsedError)\n                })\n            };\n        } catch (parseError) {\n            return {\n                responseHeaders,\n                value: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                    message: response.statusText,\n                    url,\n                    requestBodyValues,\n                    statusCode: response.status,\n                    responseHeaders,\n                    responseBody,\n                    isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n                })\n            };\n        }\n    };\nvar createEventSourceResponseHandler = (chunkSchema)=>async ({ response })=>{\n        const responseHeaders = extractResponseHeaders(response);\n        if (response.body == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.EmptyResponseBodyError({});\n        }\n        return {\n            responseHeaders,\n            value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(new eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_3__.EventSourceParserStream()).pipeThrough(new TransformStream({\n                transform ({ data }, controller) {\n                    if (data === \"[DONE]\") {\n                        return;\n                    }\n                    controller.enqueue(safeParseJSON({\n                        text: data,\n                        schema: chunkSchema\n                    }));\n                }\n            }))\n        };\n    };\nvar createJsonStreamResponseHandler = (chunkSchema)=>async ({ response })=>{\n        const responseHeaders = extractResponseHeaders(response);\n        if (response.body == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.EmptyResponseBodyError({});\n        }\n        let buffer = \"\";\n        return {\n            responseHeaders,\n            value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({\n                transform (chunkText, controller) {\n                    if (chunkText.endsWith(\"\\n\")) {\n                        controller.enqueue(safeParseJSON({\n                            text: buffer + chunkText,\n                            schema: chunkSchema\n                        }));\n                        buffer = \"\";\n                    } else {\n                        buffer += chunkText;\n                    }\n                }\n            }))\n        };\n    };\nvar createJsonResponseHandler = (responseSchema)=>async ({ response, url, requestBodyValues })=>{\n        const responseBody = await response.text();\n        const parsedResult = safeParseJSON({\n            text: responseBody,\n            schema: responseSchema\n        });\n        const responseHeaders = extractResponseHeaders(response);\n        if (!parsedResult.success) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError({\n                message: \"Invalid JSON response\",\n                cause: parsedResult.error,\n                statusCode: response.status,\n                responseHeaders,\n                responseBody,\n                url,\n                requestBodyValues\n            });\n        }\n        return {\n            responseHeaders,\n            value: parsedResult.value\n        };\n    };\n// src/uint8-utils.ts\nvar { btoa, atob } = globalThis;\nfunction convertBase64ToUint8Array(base64String) {\n    const base64Url = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const latin1string = atob(base64Url);\n    return Uint8Array.from(latin1string, (byte)=>byte.codePointAt(0));\n}\nfunction convertUint8ArrayToBase64(array) {\n    let latin1string = \"\";\n    for(let i = 0; i < array.length; i++){\n        latin1string += String.fromCodePoint(array[i]);\n    }\n    return btoa(latin1string);\n}\n// src/without-trailing-slash.ts\nfunction withoutTrailingSlash(url) {\n    return url == null ? void 0 : url.replace(/\\/$/, \"\");\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/provider-utils/node_modules/eventsource-parser/dist/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@ai-sdk/provider-utils/node_modules/eventsource-parser/dist/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParseError: () => (/* binding */ ParseError),\n/* harmony export */   createParser: () => (/* binding */ createParser)\n/* harmony export */ });\nvar __defProp = Object.defineProperty, __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value\n    }) : obj[key] = value, __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key != \"symbol\" ? key + \"\" : key, value);\nclass ParseError extends Error {\n    constructor(message, options){\n        super(message), __publicField(this, \"type\"), __publicField(this, \"field\"), __publicField(this, \"value\"), __publicField(this, \"line\"), this.name = \"ParseError\", this.type = options.type, this.field = options.field, this.value = options.value, this.line = options.line;\n    }\n}\nfunction noop(_arg) {}\nfunction createParser(callbacks) {\n    const { onEvent = noop, onError = noop, onRetry = noop, onComment } = callbacks;\n    let incompleteLine = \"\", isFirstChunk = !0, id, data = \"\", eventType = \"\";\n    function feed(newChunk) {\n        const chunk = isFirstChunk ? newChunk.replace(/^\\xEF\\xBB\\xBF/, \"\") : newChunk, [complete, incomplete] = splitLines(`${incompleteLine}${chunk}`);\n        for (const line of complete)parseLine(line);\n        incompleteLine = incomplete, isFirstChunk = !1;\n    }\n    function parseLine(line) {\n        if (line === \"\") {\n            dispatchEvent();\n            return;\n        }\n        if (line.startsWith(\":\")) {\n            onComment && onComment(line.slice(line.startsWith(\": \") ? 2 : 1));\n            return;\n        }\n        const fieldSeparatorIndex = line.indexOf(\":\");\n        if (fieldSeparatorIndex !== -1) {\n            const field = line.slice(0, fieldSeparatorIndex), offset = line[fieldSeparatorIndex + 1] === \" \" ? 2 : 1, value = line.slice(fieldSeparatorIndex + offset);\n            processField(field, value, line);\n            return;\n        }\n        processField(line, \"\", line);\n    }\n    function processField(field, value, line) {\n        switch(field){\n            case \"event\":\n                eventType = value;\n                break;\n            case \"data\":\n                data = `${data}${value}\n`;\n                break;\n            case \"id\":\n                id = value.includes(\"\\x00\") ? void 0 : value;\n                break;\n            case \"retry\":\n                /^\\d+$/.test(value) ? onRetry(parseInt(value, 10)) : onError(new ParseError(`Invalid \\`retry\\` value: \"${value}\"`, {\n                    type: \"invalid-retry\",\n                    value,\n                    line\n                }));\n                break;\n            default:\n                onError(new ParseError(`Unknown field \"${field.length > 20 ? `${field.slice(0, 20)}\\u2026` : field}\"`, {\n                    type: \"unknown-field\",\n                    field,\n                    value,\n                    line\n                }));\n                break;\n        }\n    }\n    function dispatchEvent() {\n        data.length > 0 && onEvent({\n            id,\n            event: eventType || void 0,\n            // If the data buffer's last character is a U+000A LINE FEED (LF) character,\n            // then remove the last character from the data buffer.\n            data: data.endsWith(`\n`) ? data.slice(0, -1) : data\n        }), id = void 0, data = \"\", eventType = \"\";\n    }\n    function reset(options = {}) {\n        incompleteLine && options.consume && parseLine(incompleteLine), id = void 0, data = \"\", eventType = \"\", incompleteLine = \"\";\n    }\n    return {\n        feed,\n        reset\n    };\n}\nfunction splitLines(chunk) {\n    const lines = [];\n    let incompleteLine = \"\";\n    const totalLength = chunk.length;\n    for(let i = 0; i < totalLength; i++){\n        const char = chunk[i];\n        char === \"\\r\" && chunk[i + 1] === `\n` ? (lines.push(incompleteLine), incompleteLine = \"\", i++) : char === \"\\r\" || char === `\n` ? (lines.push(incompleteLine), incompleteLine = \"\") : incompleteLine += char;\n    }\n    return [\n        lines,\n        incompleteLine\n    ];\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/provider-utils/node_modules/eventsource-parser/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/provider-utils/node_modules/eventsource-parser/dist/stream.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@ai-sdk/provider-utils/node_modules/eventsource-parser/dist/stream.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventSourceParserStream: () => (/* binding */ EventSourceParserStream),\n/* harmony export */   ParseError: () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_0__.ParseError)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/node_modules/eventsource-parser/dist/index.js\");\n\n\nclass EventSourceParserStream extends TransformStream {\n    constructor({ onError, onRetry, onComment } = {}){\n        let parser;\n        super({\n            start (controller) {\n                parser = (0,_index_js__WEBPACK_IMPORTED_MODULE_0__.createParser)({\n                    onEvent: (event)=>{\n                        controller.enqueue(event);\n                    },\n                    onError (error) {\n                        onError === \"terminate\" ? controller.error(error) : typeof onError == \"function\" && onError(error);\n                    },\n                    onRetry,\n                    onComment\n                });\n            },\n            transform (chunk) {\n                parser.feed(chunk);\n            }\n        });\n    }\n}\n //# sourceMappingURL=stream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFpLXNkay9wcm92aWRlci11dGlscy9ub2RlX21vZHVsZXMvZXZlbnRzb3VyY2UtcGFyc2VyL2Rpc3Qvc3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQztBQUNGO0FBQ3hDLE1BQU1FLGdDQUFnQ0M7SUFDcENDLFlBQVksRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFFO1FBQ2hELElBQUlDO1FBQ0osS0FBSyxDQUFDO1lBQ0pDLE9BQU1DLFVBQVU7Z0JBQ2RGLFNBQVNSLHVEQUFZQSxDQUFDO29CQUNwQlcsU0FBUyxDQUFDQzt3QkFDUkYsV0FBV0csT0FBTyxDQUFDRDtvQkFDckI7b0JBQ0FQLFNBQVFTLEtBQUs7d0JBQ1hULFlBQVksY0FBY0ssV0FBV0ksS0FBSyxDQUFDQSxTQUFTLE9BQU9ULFdBQVcsY0FBY0EsUUFBUVM7b0JBQzlGO29CQUNBUjtvQkFDQUM7Z0JBQ0Y7WUFDRjtZQUNBUSxXQUFVQyxLQUFLO2dCQUNiUixPQUFPUyxJQUFJLENBQUNEO1lBQ2Q7UUFDRjtJQUNGO0FBQ0Y7QUFJRSxDQUNGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NydC8uL25vZGVfbW9kdWxlcy9AYWktc2RrL3Byb3ZpZGVyLXV0aWxzL25vZGVfbW9kdWxlcy9ldmVudHNvdXJjZS1wYXJzZXIvZGlzdC9zdHJlYW0uanM/ZDMxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVQYXJzZXIgfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgUGFyc2VFcnJvciB9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5jbGFzcyBFdmVudFNvdXJjZVBhcnNlclN0cmVhbSBleHRlbmRzIFRyYW5zZm9ybVN0cmVhbSB7XG4gIGNvbnN0cnVjdG9yKHsgb25FcnJvciwgb25SZXRyeSwgb25Db21tZW50IH0gPSB7fSkge1xuICAgIGxldCBwYXJzZXI7XG4gICAgc3VwZXIoe1xuICAgICAgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgICBwYXJzZXIgPSBjcmVhdGVQYXJzZXIoe1xuICAgICAgICAgIG9uRXZlbnQ6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGV2ZW50KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgICAgIG9uRXJyb3IgPT09IFwidGVybWluYXRlXCIgPyBjb250cm9sbGVyLmVycm9yKGVycm9yKSA6IHR5cGVvZiBvbkVycm9yID09IFwiZnVuY3Rpb25cIiAmJiBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uUmV0cnksXG4gICAgICAgICAgb25Db21tZW50XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHRyYW5zZm9ybShjaHVuaykge1xuICAgICAgICBwYXJzZXIuZmVlZChjaHVuayk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIEV2ZW50U291cmNlUGFyc2VyU3RyZWFtLFxuICBQYXJzZUVycm9yXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZVBhcnNlciIsIlBhcnNlRXJyb3IiLCJFdmVudFNvdXJjZVBhcnNlclN0cmVhbSIsIlRyYW5zZm9ybVN0cmVhbSIsImNvbnN0cnVjdG9yIiwib25FcnJvciIsIm9uUmV0cnkiLCJvbkNvbW1lbnQiLCJwYXJzZXIiLCJzdGFydCIsImNvbnRyb2xsZXIiLCJvbkV2ZW50IiwiZXZlbnQiLCJlbnF1ZXVlIiwiZXJyb3IiLCJ0cmFuc2Zvcm0iLCJjaHVuayIsImZlZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/provider-utils/node_modules/eventsource-parser/dist/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@ai-sdk/provider/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AISDKError: () => (/* binding */ AISDKError),\n/* harmony export */   APICallError: () => (/* binding */ APICallError),\n/* harmony export */   EmptyResponseBodyError: () => (/* binding */ EmptyResponseBodyError),\n/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),\n/* harmony export */   InvalidPromptError: () => (/* binding */ InvalidPromptError),\n/* harmony export */   InvalidResponseDataError: () => (/* binding */ InvalidResponseDataError),\n/* harmony export */   JSONParseError: () => (/* binding */ JSONParseError),\n/* harmony export */   LoadAPIKeyError: () => (/* binding */ LoadAPIKeyError),\n/* harmony export */   LoadSettingError: () => (/* binding */ LoadSettingError),\n/* harmony export */   NoContentGeneratedError: () => (/* binding */ NoContentGeneratedError),\n/* harmony export */   NoSuchModelError: () => (/* binding */ NoSuchModelError),\n/* harmony export */   TooManyEmbeddingValuesForCallError: () => (/* binding */ TooManyEmbeddingValuesForCallError),\n/* harmony export */   TypeValidationError: () => (/* binding */ TypeValidationError),\n/* harmony export */   UnsupportedFunctionalityError: () => (/* binding */ UnsupportedFunctionalityError),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   isJSONArray: () => (/* binding */ isJSONArray),\n/* harmony export */   isJSONObject: () => (/* binding */ isJSONObject),\n/* harmony export */   isJSONValue: () => (/* binding */ isJSONValue)\n/* harmony export */ });\n// src/errors/ai-sdk-error.ts\nvar marker = \"vercel.ai.error\";\nvar symbol = Symbol.for(marker);\nvar _a;\nvar _AISDKError = class _AISDKError extends Error {\n    /**\n   * Creates an AI SDK Error.\n   *\n   * @param {Object} params - The parameters for creating the error.\n   * @param {string} params.name - The name of the error.\n   * @param {string} params.message - The error message.\n   * @param {unknown} [params.cause] - The underlying cause of the error.\n   */ constructor({ name: name14, message, cause }){\n        super(message);\n        this[_a] = true;\n        this.name = name14;\n        this.cause = cause;\n    }\n    /**\n   * Checks if the given error is an AI SDK Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is an AI SDK Error, false otherwise.\n   */ static isInstance(error) {\n        return _AISDKError.hasMarker(error, marker);\n    }\n    static hasMarker(error, marker15) {\n        const markerSymbol = Symbol.for(marker15);\n        return error != null && typeof error === \"object\" && markerSymbol in error && typeof error[markerSymbol] === \"boolean\" && error[markerSymbol] === true;\n    }\n};\n_a = symbol;\nvar AISDKError = _AISDKError;\n// src/errors/api-call-error.ts\nvar name = \"AI_APICallError\";\nvar marker2 = `vercel.ai.error.${name}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2;\nvar APICallError = class extends AISDKError {\n    constructor({ message, url, requestBodyValues, statusCode, responseHeaders, responseBody, cause, isRetryable = statusCode != null && (statusCode === 408 || // request timeout\n    statusCode === 409 || // conflict\n    statusCode === 429 || // too many requests\n    statusCode >= 500), // server error\n    data }){\n        super({\n            name,\n            message,\n            cause\n        });\n        this[_a2] = true;\n        this.url = url;\n        this.requestBodyValues = requestBodyValues;\n        this.statusCode = statusCode;\n        this.responseHeaders = responseHeaders;\n        this.responseBody = responseBody;\n        this.isRetryable = isRetryable;\n        this.data = data;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker2);\n    }\n};\n_a2 = symbol2;\n// src/errors/empty-response-body-error.ts\nvar name2 = \"AI_EmptyResponseBodyError\";\nvar marker3 = `vercel.ai.error.${name2}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3;\nvar EmptyResponseBodyError = class extends AISDKError {\n    // used in isInstance\n    constructor({ message = \"Empty response body\" } = {}){\n        super({\n            name: name2,\n            message\n        });\n        this[_a3] = true;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker3);\n    }\n};\n_a3 = symbol3;\n// src/errors/get-error-message.ts\nfunction getErrorMessage(error) {\n    if (error == null) {\n        return \"unknown error\";\n    }\n    if (typeof error === \"string\") {\n        return error;\n    }\n    if (error instanceof Error) {\n        return error.message;\n    }\n    return JSON.stringify(error);\n}\n// src/errors/invalid-argument-error.ts\nvar name3 = \"AI_InvalidArgumentError\";\nvar marker4 = `vercel.ai.error.${name3}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4;\nvar InvalidArgumentError = class extends AISDKError {\n    constructor({ message, cause, argument }){\n        super({\n            name: name3,\n            message,\n            cause\n        });\n        this[_a4] = true;\n        this.argument = argument;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker4);\n    }\n};\n_a4 = symbol4;\n// src/errors/invalid-prompt-error.ts\nvar name4 = \"AI_InvalidPromptError\";\nvar marker5 = `vercel.ai.error.${name4}`;\nvar symbol5 = Symbol.for(marker5);\nvar _a5;\nvar InvalidPromptError = class extends AISDKError {\n    constructor({ prompt, message, cause }){\n        super({\n            name: name4,\n            message: `Invalid prompt: ${message}`,\n            cause\n        });\n        this[_a5] = true;\n        this.prompt = prompt;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker5);\n    }\n};\n_a5 = symbol5;\n// src/errors/invalid-response-data-error.ts\nvar name5 = \"AI_InvalidResponseDataError\";\nvar marker6 = `vercel.ai.error.${name5}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6;\nvar InvalidResponseDataError = class extends AISDKError {\n    constructor({ data, message = `Invalid response data: ${JSON.stringify(data)}.` }){\n        super({\n            name: name5,\n            message\n        });\n        this[_a6] = true;\n        this.data = data;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker6);\n    }\n};\n_a6 = symbol6;\n// src/errors/json-parse-error.ts\nvar name6 = \"AI_JSONParseError\";\nvar marker7 = `vercel.ai.error.${name6}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7;\nvar JSONParseError = class extends AISDKError {\n    constructor({ text, cause }){\n        super({\n            name: name6,\n            message: `JSON parsing failed: Text: ${text}.\nError message: ${getErrorMessage(cause)}`,\n            cause\n        });\n        this[_a7] = true;\n        this.text = text;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker7);\n    }\n};\n_a7 = symbol7;\n// src/errors/load-api-key-error.ts\nvar name7 = \"AI_LoadAPIKeyError\";\nvar marker8 = `vercel.ai.error.${name7}`;\nvar symbol8 = Symbol.for(marker8);\nvar _a8;\nvar LoadAPIKeyError = class extends AISDKError {\n    // used in isInstance\n    constructor({ message }){\n        super({\n            name: name7,\n            message\n        });\n        this[_a8] = true;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker8);\n    }\n};\n_a8 = symbol8;\n// src/errors/load-setting-error.ts\nvar name8 = \"AI_LoadSettingError\";\nvar marker9 = `vercel.ai.error.${name8}`;\nvar symbol9 = Symbol.for(marker9);\nvar _a9;\nvar LoadSettingError = class extends AISDKError {\n    // used in isInstance\n    constructor({ message }){\n        super({\n            name: name8,\n            message\n        });\n        this[_a9] = true;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker9);\n    }\n};\n_a9 = symbol9;\n// src/errors/no-content-generated-error.ts\nvar name9 = \"AI_NoContentGeneratedError\";\nvar marker10 = `vercel.ai.error.${name9}`;\nvar symbol10 = Symbol.for(marker10);\nvar _a10;\nvar NoContentGeneratedError = class extends AISDKError {\n    // used in isInstance\n    constructor({ message = \"No content generated.\" } = {}){\n        super({\n            name: name9,\n            message\n        });\n        this[_a10] = true;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker10);\n    }\n};\n_a10 = symbol10;\n// src/errors/no-such-model-error.ts\nvar name10 = \"AI_NoSuchModelError\";\nvar marker11 = `vercel.ai.error.${name10}`;\nvar symbol11 = Symbol.for(marker11);\nvar _a11;\nvar NoSuchModelError = class extends AISDKError {\n    constructor({ errorName = name10, modelId, modelType, message = `No such ${modelType}: ${modelId}` }){\n        super({\n            name: errorName,\n            message\n        });\n        this[_a11] = true;\n        this.modelId = modelId;\n        this.modelType = modelType;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker11);\n    }\n};\n_a11 = symbol11;\n// src/errors/too-many-embedding-values-for-call-error.ts\nvar name11 = \"AI_TooManyEmbeddingValuesForCallError\";\nvar marker12 = `vercel.ai.error.${name11}`;\nvar symbol12 = Symbol.for(marker12);\nvar _a12;\nvar TooManyEmbeddingValuesForCallError = class extends AISDKError {\n    constructor(options){\n        super({\n            name: name11,\n            message: `Too many values for a single embedding call. The ${options.provider} model \"${options.modelId}\" can only embed up to ${options.maxEmbeddingsPerCall} values per call, but ${options.values.length} values were provided.`\n        });\n        this[_a12] = true;\n        this.provider = options.provider;\n        this.modelId = options.modelId;\n        this.maxEmbeddingsPerCall = options.maxEmbeddingsPerCall;\n        this.values = options.values;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker12);\n    }\n};\n_a12 = symbol12;\n// src/errors/type-validation-error.ts\nvar name12 = \"AI_TypeValidationError\";\nvar marker13 = `vercel.ai.error.${name12}`;\nvar symbol13 = Symbol.for(marker13);\nvar _a13;\nvar _TypeValidationError = class _TypeValidationError extends AISDKError {\n    constructor({ value, cause }){\n        super({\n            name: name12,\n            message: `Type validation failed: Value: ${JSON.stringify(value)}.\nError message: ${getErrorMessage(cause)}`,\n            cause\n        });\n        this[_a13] = true;\n        this.value = value;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker13);\n    }\n    /**\n   * Wraps an error into a TypeValidationError.\n   * If the cause is already a TypeValidationError with the same value, it returns the cause.\n   * Otherwise, it creates a new TypeValidationError.\n   *\n   * @param {Object} params - The parameters for wrapping the error.\n   * @param {unknown} params.value - The value that failed validation.\n   * @param {unknown} params.cause - The original error or cause of the validation failure.\n   * @returns {TypeValidationError} A TypeValidationError instance.\n   */ static wrap({ value, cause }) {\n        return _TypeValidationError.isInstance(cause) && cause.value === value ? cause : new _TypeValidationError({\n            value,\n            cause\n        });\n    }\n};\n_a13 = symbol13;\nvar TypeValidationError = _TypeValidationError;\n// src/errors/unsupported-functionality-error.ts\nvar name13 = \"AI_UnsupportedFunctionalityError\";\nvar marker14 = `vercel.ai.error.${name13}`;\nvar symbol14 = Symbol.for(marker14);\nvar _a14;\nvar UnsupportedFunctionalityError = class extends AISDKError {\n    constructor({ functionality }){\n        super({\n            name: name13,\n            message: `'${functionality}' functionality not supported.`\n        });\n        this[_a14] = true;\n        this.functionality = functionality;\n    }\n    static isInstance(error) {\n        return AISDKError.hasMarker(error, marker14);\n    }\n};\n_a14 = symbol14;\n// src/json-value/is-json.ts\nfunction isJSONValue(value) {\n    if (value === null || typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n        return true;\n    }\n    if (Array.isArray(value)) {\n        return value.every(isJSONValue);\n    }\n    if (typeof value === \"object\") {\n        return Object.entries(value).every(([key, val])=>typeof key === \"string\" && isJSONValue(val));\n    }\n    return false;\n}\nfunction isJSONArray(value) {\n    return Array.isArray(value) && value.every(isJSONValue);\n}\nfunction isJSONObject(value) {\n    return value != null && typeof value === \"object\" && Object.entries(value).every(([key, val])=>typeof key === \"string\" && isJSONValue(val));\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ai-sdk/ui-utils/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@ai-sdk/ui-utils/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asSchema: () => (/* binding */ asSchema),\n/* harmony export */   callChatApi: () => (/* binding */ callChatApi),\n/* harmony export */   callCompletionApi: () => (/* binding */ callCompletionApi),\n/* harmony export */   formatAssistantStreamPart: () => (/* binding */ formatAssistantStreamPart),\n/* harmony export */   formatDataStreamPart: () => (/* binding */ formatDataStreamPart),\n/* harmony export */   generateId: () => (/* reexport safe */ _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId),\n/* harmony export */   getTextFromDataUrl: () => (/* binding */ getTextFromDataUrl),\n/* harmony export */   isDeepEqualData: () => (/* binding */ isDeepEqualData),\n/* harmony export */   jsonSchema: () => (/* binding */ jsonSchema),\n/* harmony export */   parseAssistantStreamPart: () => (/* binding */ parseAssistantStreamPart),\n/* harmony export */   parseDataStreamPart: () => (/* binding */ parseDataStreamPart),\n/* harmony export */   parsePartialJson: () => (/* binding */ parsePartialJson),\n/* harmony export */   prepareAttachmentsForRequest: () => (/* binding */ prepareAttachmentsForRequest),\n/* harmony export */   processAssistantStream: () => (/* binding */ processAssistantStream),\n/* harmony export */   processDataStream: () => (/* binding */ processDataStream),\n/* harmony export */   processTextStream: () => (/* binding */ processTextStream),\n/* harmony export */   zodSchema: () => (/* binding */ zodSchema)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n// src/index.ts\n\n// src/assistant-stream-parts.ts\nvar textStreamPart = {\n    code: \"0\",\n    name: \"text\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"text\" parts expect a string value.');\n        }\n        return {\n            type: \"text\",\n            value\n        };\n    }\n};\nvar errorStreamPart = {\n    code: \"3\",\n    name: \"error\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"error\" parts expect a string value.');\n        }\n        return {\n            type: \"error\",\n            value\n        };\n    }\n};\nvar assistantMessageStreamPart = {\n    code: \"4\",\n    name: \"assistant_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"id\" in value) || !(\"role\" in value) || !(\"content\" in value) || typeof value.id !== \"string\" || typeof value.role !== \"string\" || value.role !== \"assistant\" || !Array.isArray(value.content) || !value.content.every((item)=>item != null && typeof item === \"object\" && \"type\" in item && item.type === \"text\" && \"text\" in item && item.text != null && typeof item.text === \"object\" && \"value\" in item.text && typeof item.text.value === \"string\")) {\n            throw new Error('\"assistant_message\" parts expect an object with an \"id\", \"role\", and \"content\" property.');\n        }\n        return {\n            type: \"assistant_message\",\n            value\n        };\n    }\n};\nvar assistantControlDataStreamPart = {\n    code: \"5\",\n    name: \"assistant_control_data\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"threadId\" in value) || !(\"messageId\" in value) || typeof value.threadId !== \"string\" || typeof value.messageId !== \"string\") {\n            throw new Error('\"assistant_control_data\" parts expect an object with a \"threadId\" and \"messageId\" property.');\n        }\n        return {\n            type: \"assistant_control_data\",\n            value: {\n                threadId: value.threadId,\n                messageId: value.messageId\n            }\n        };\n    }\n};\nvar dataMessageStreamPart = {\n    code: \"6\",\n    name: \"data_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"role\" in value) || !(\"data\" in value) || typeof value.role !== \"string\" || value.role !== \"data\") {\n            throw new Error('\"data_message\" parts expect an object with a \"role\" and \"data\" property.');\n        }\n        return {\n            type: \"data_message\",\n            value\n        };\n    }\n};\nvar assistantStreamParts = [\n    textStreamPart,\n    errorStreamPart,\n    assistantMessageStreamPart,\n    assistantControlDataStreamPart,\n    dataMessageStreamPart\n];\nvar assistantStreamPartsByCode = {\n    [textStreamPart.code]: textStreamPart,\n    [errorStreamPart.code]: errorStreamPart,\n    [assistantMessageStreamPart.code]: assistantMessageStreamPart,\n    [assistantControlDataStreamPart.code]: assistantControlDataStreamPart,\n    [dataMessageStreamPart.code]: dataMessageStreamPart\n};\nvar StreamStringPrefixes = {\n    [textStreamPart.name]: textStreamPart.code,\n    [errorStreamPart.name]: errorStreamPart.code,\n    [assistantMessageStreamPart.name]: assistantMessageStreamPart.code,\n    [assistantControlDataStreamPart.name]: assistantControlDataStreamPart.code,\n    [dataMessageStreamPart.name]: dataMessageStreamPart.code\n};\nvar validCodes = assistantStreamParts.map((part)=>part.code);\nvar parseAssistantStreamPart = (line)=>{\n    const firstSeparatorIndex = line.indexOf(\":\");\n    if (firstSeparatorIndex === -1) {\n        throw new Error(\"Failed to parse stream string. No separator found.\");\n    }\n    const prefix = line.slice(0, firstSeparatorIndex);\n    if (!validCodes.includes(prefix)) {\n        throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);\n    }\n    const code = prefix;\n    const textValue = line.slice(firstSeparatorIndex + 1);\n    const jsonValue = JSON.parse(textValue);\n    return assistantStreamPartsByCode[code].parse(jsonValue);\n};\nfunction formatAssistantStreamPart(type, value) {\n    const streamPart = assistantStreamParts.find((part)=>part.name === type);\n    if (!streamPart) {\n        throw new Error(`Invalid stream part type: ${type}`);\n    }\n    return `${streamPart.code}:${JSON.stringify(value)}\n`;\n}\n// src/process-chat-response.ts\n\n// src/parse-partial-json.ts\n\n// src/fix-json.ts\nfunction fixJson(input) {\n    const stack = [\n        \"ROOT\"\n    ];\n    let lastValidIndex = -1;\n    let literalStart = null;\n    function processValueStart(char, i, swapState) {\n        {\n            switch(char){\n                case '\"':\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_STRING\");\n                        break;\n                    }\n                case \"f\":\n                case \"t\":\n                case \"n\":\n                    {\n                        lastValidIndex = i;\n                        literalStart = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_LITERAL\");\n                        break;\n                    }\n                case \"-\":\n                    {\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_NUMBER\");\n                        break;\n                    }\n                case \"0\":\n                case \"1\":\n                case \"2\":\n                case \"3\":\n                case \"4\":\n                case \"5\":\n                case \"6\":\n                case \"7\":\n                case \"8\":\n                case \"9\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_NUMBER\");\n                        break;\n                    }\n                case \"{\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_OBJECT_START\");\n                        break;\n                    }\n                case \"[\":\n                    {\n                        lastValidIndex = i;\n                        stack.pop();\n                        stack.push(swapState);\n                        stack.push(\"INSIDE_ARRAY_START\");\n                        break;\n                    }\n            }\n        }\n    }\n    function processAfterObjectValue(char, i) {\n        switch(char){\n            case \",\":\n                {\n                    stack.pop();\n                    stack.push(\"INSIDE_OBJECT_AFTER_COMMA\");\n                    break;\n                }\n            case \"}\":\n                {\n                    lastValidIndex = i;\n                    stack.pop();\n                    break;\n                }\n        }\n    }\n    function processAfterArrayValue(char, i) {\n        switch(char){\n            case \",\":\n                {\n                    stack.pop();\n                    stack.push(\"INSIDE_ARRAY_AFTER_COMMA\");\n                    break;\n                }\n            case \"]\":\n                {\n                    lastValidIndex = i;\n                    stack.pop();\n                    break;\n                }\n        }\n    }\n    for(let i = 0; i < input.length; i++){\n        const char = input[i];\n        const currentState = stack[stack.length - 1];\n        switch(currentState){\n            case \"ROOT\":\n                processValueStart(char, i, \"FINISH\");\n                break;\n            case \"INSIDE_OBJECT_START\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_KEY\");\n                                break;\n                            }\n                        case \"}\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_COMMA\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_KEY\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_KEY\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_AFTER_KEY\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_KEY\":\n                {\n                    switch(char){\n                        case \":\":\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_OBJECT_BEFORE_VALUE\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_OBJECT_BEFORE_VALUE\":\n                {\n                    processValueStart(char, i, \"INSIDE_OBJECT_AFTER_VALUE\");\n                    break;\n                }\n            case \"INSIDE_OBJECT_AFTER_VALUE\":\n                {\n                    processAfterObjectValue(char, i);\n                    break;\n                }\n            case \"INSIDE_STRING\":\n                {\n                    switch(char){\n                        case '\"':\n                            {\n                                stack.pop();\n                                lastValidIndex = i;\n                                break;\n                            }\n                        case \"\\\\\":\n                            {\n                                stack.push(\"INSIDE_STRING_ESCAPE\");\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_START\":\n                {\n                    switch(char){\n                        case \"]\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                                processValueStart(char, i, \"INSIDE_ARRAY_AFTER_VALUE\");\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_AFTER_VALUE\":\n                {\n                    switch(char){\n                        case \",\":\n                            {\n                                stack.pop();\n                                stack.push(\"INSIDE_ARRAY_AFTER_COMMA\");\n                                break;\n                            }\n                        case \"]\":\n                            {\n                                lastValidIndex = i;\n                                stack.pop();\n                                break;\n                            }\n                        default:\n                            {\n                                lastValidIndex = i;\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_ARRAY_AFTER_COMMA\":\n                {\n                    processValueStart(char, i, \"INSIDE_ARRAY_AFTER_VALUE\");\n                    break;\n                }\n            case \"INSIDE_STRING_ESCAPE\":\n                {\n                    stack.pop();\n                    lastValidIndex = i;\n                    break;\n                }\n            case \"INSIDE_NUMBER\":\n                {\n                    switch(char){\n                        case \"0\":\n                        case \"1\":\n                        case \"2\":\n                        case \"3\":\n                        case \"4\":\n                        case \"5\":\n                        case \"6\":\n                        case \"7\":\n                        case \"8\":\n                        case \"9\":\n                            {\n                                lastValidIndex = i;\n                                break;\n                            }\n                        case \"e\":\n                        case \"E\":\n                        case \"-\":\n                        case \".\":\n                            {\n                                break;\n                            }\n                        case \",\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                                    processAfterArrayValue(char, i);\n                                }\n                                if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                                    processAfterObjectValue(char, i);\n                                }\n                                break;\n                            }\n                        case \"}\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                                    processAfterObjectValue(char, i);\n                                }\n                                break;\n                            }\n                        case \"]\":\n                            {\n                                stack.pop();\n                                if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                                    processAfterArrayValue(char, i);\n                                }\n                                break;\n                            }\n                        default:\n                            {\n                                stack.pop();\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"INSIDE_LITERAL\":\n                {\n                    const partialLiteral = input.substring(literalStart, i + 1);\n                    if (!\"false\".startsWith(partialLiteral) && !\"true\".startsWith(partialLiteral) && !\"null\".startsWith(partialLiteral)) {\n                        stack.pop();\n                        if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n                            processAfterObjectValue(char, i);\n                        } else if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n                            processAfterArrayValue(char, i);\n                        }\n                    } else {\n                        lastValidIndex = i;\n                    }\n                    break;\n                }\n        }\n    }\n    let result = input.slice(0, lastValidIndex + 1);\n    for(let i = stack.length - 1; i >= 0; i--){\n        const state = stack[i];\n        switch(state){\n            case \"INSIDE_STRING\":\n                {\n                    result += '\"';\n                    break;\n                }\n            case \"INSIDE_OBJECT_KEY\":\n            case \"INSIDE_OBJECT_AFTER_KEY\":\n            case \"INSIDE_OBJECT_AFTER_COMMA\":\n            case \"INSIDE_OBJECT_START\":\n            case \"INSIDE_OBJECT_BEFORE_VALUE\":\n            case \"INSIDE_OBJECT_AFTER_VALUE\":\n                {\n                    result += \"}\";\n                    break;\n                }\n            case \"INSIDE_ARRAY_START\":\n            case \"INSIDE_ARRAY_AFTER_COMMA\":\n            case \"INSIDE_ARRAY_AFTER_VALUE\":\n                {\n                    result += \"]\";\n                    break;\n                }\n            case \"INSIDE_LITERAL\":\n                {\n                    const partialLiteral = input.substring(literalStart, input.length);\n                    if (\"true\".startsWith(partialLiteral)) {\n                        result += \"true\".slice(partialLiteral.length);\n                    } else if (\"false\".startsWith(partialLiteral)) {\n                        result += \"false\".slice(partialLiteral.length);\n                    } else if (\"null\".startsWith(partialLiteral)) {\n                        result += \"null\".slice(partialLiteral.length);\n                    }\n                }\n        }\n    }\n    return result;\n}\n// src/parse-partial-json.ts\nfunction parsePartialJson(jsonText) {\n    if (jsonText === void 0) {\n        return {\n            value: void 0,\n            state: \"undefined-input\"\n        };\n    }\n    let result = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)({\n        text: jsonText\n    });\n    if (result.success) {\n        return {\n            value: result.value,\n            state: \"successful-parse\"\n        };\n    }\n    result = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)({\n        text: fixJson(jsonText)\n    });\n    if (result.success) {\n        return {\n            value: result.value,\n            state: \"repaired-parse\"\n        };\n    }\n    return {\n        value: void 0,\n        state: \"failed-parse\"\n    };\n}\n// src/data-stream-parts.ts\nvar textStreamPart2 = {\n    code: \"0\",\n    name: \"text\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"text\" parts expect a string value.');\n        }\n        return {\n            type: \"text\",\n            value\n        };\n    }\n};\nvar dataStreamPart = {\n    code: \"2\",\n    name: \"data\",\n    parse: (value)=>{\n        if (!Array.isArray(value)) {\n            throw new Error('\"data\" parts expect an array value.');\n        }\n        return {\n            type: \"data\",\n            value\n        };\n    }\n};\nvar errorStreamPart2 = {\n    code: \"3\",\n    name: \"error\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"error\" parts expect a string value.');\n        }\n        return {\n            type: \"error\",\n            value\n        };\n    }\n};\nvar messageAnnotationsStreamPart = {\n    code: \"8\",\n    name: \"message_annotations\",\n    parse: (value)=>{\n        if (!Array.isArray(value)) {\n            throw new Error('\"message_annotations\" parts expect an array value.');\n        }\n        return {\n            type: \"message_annotations\",\n            value\n        };\n    }\n};\nvar toolCallStreamPart = {\n    code: \"9\",\n    name: \"tool_call\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"toolName\" in value) || typeof value.toolName !== \"string\" || !(\"args\" in value) || typeof value.args !== \"object\") {\n            throw new Error('\"tool_call\" parts expect an object with a \"toolCallId\", \"toolName\", and \"args\" property.');\n        }\n        return {\n            type: \"tool_call\",\n            value\n        };\n    }\n};\nvar toolResultStreamPart = {\n    code: \"a\",\n    name: \"tool_result\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"result\" in value)) {\n            throw new Error('\"tool_result\" parts expect an object with a \"toolCallId\" and a \"result\" property.');\n        }\n        return {\n            type: \"tool_result\",\n            value\n        };\n    }\n};\nvar toolCallStreamingStartStreamPart = {\n    code: \"b\",\n    name: \"tool_call_streaming_start\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"toolName\" in value) || typeof value.toolName !== \"string\") {\n            throw new Error('\"tool_call_streaming_start\" parts expect an object with a \"toolCallId\" and \"toolName\" property.');\n        }\n        return {\n            type: \"tool_call_streaming_start\",\n            value\n        };\n    }\n};\nvar toolCallDeltaStreamPart = {\n    code: \"c\",\n    name: \"tool_call_delta\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"argsTextDelta\" in value) || typeof value.argsTextDelta !== \"string\") {\n            throw new Error('\"tool_call_delta\" parts expect an object with a \"toolCallId\" and \"argsTextDelta\" property.');\n        }\n        return {\n            type: \"tool_call_delta\",\n            value\n        };\n    }\n};\nvar finishMessageStreamPart = {\n    code: \"d\",\n    name: \"finish_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"finishReason\" in value) || typeof value.finishReason !== \"string\") {\n            throw new Error('\"finish_message\" parts expect an object with a \"finishReason\" property.');\n        }\n        const result = {\n            finishReason: value.finishReason\n        };\n        if (\"usage\" in value && value.usage != null && typeof value.usage === \"object\" && \"promptTokens\" in value.usage && \"completionTokens\" in value.usage) {\n            result.usage = {\n                promptTokens: typeof value.usage.promptTokens === \"number\" ? value.usage.promptTokens : Number.NaN,\n                completionTokens: typeof value.usage.completionTokens === \"number\" ? value.usage.completionTokens : Number.NaN\n            };\n        }\n        return {\n            type: \"finish_message\",\n            value: result\n        };\n    }\n};\nvar finishStepStreamPart = {\n    code: \"e\",\n    name: \"finish_step\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"finishReason\" in value) || typeof value.finishReason !== \"string\") {\n            throw new Error('\"finish_step\" parts expect an object with a \"finishReason\" property.');\n        }\n        const result = {\n            finishReason: value.finishReason,\n            isContinued: false\n        };\n        if (\"usage\" in value && value.usage != null && typeof value.usage === \"object\" && \"promptTokens\" in value.usage && \"completionTokens\" in value.usage) {\n            result.usage = {\n                promptTokens: typeof value.usage.promptTokens === \"number\" ? value.usage.promptTokens : Number.NaN,\n                completionTokens: typeof value.usage.completionTokens === \"number\" ? value.usage.completionTokens : Number.NaN\n            };\n        }\n        if (\"isContinued\" in value && typeof value.isContinued === \"boolean\") {\n            result.isContinued = value.isContinued;\n        }\n        return {\n            type: \"finish_step\",\n            value: result\n        };\n    }\n};\nvar dataStreamParts = [\n    textStreamPart2,\n    dataStreamPart,\n    errorStreamPart2,\n    messageAnnotationsStreamPart,\n    toolCallStreamPart,\n    toolResultStreamPart,\n    toolCallStreamingStartStreamPart,\n    toolCallDeltaStreamPart,\n    finishMessageStreamPart,\n    finishStepStreamPart\n];\nvar dataStreamPartsByCode = {\n    [textStreamPart2.code]: textStreamPart2,\n    [dataStreamPart.code]: dataStreamPart,\n    [errorStreamPart2.code]: errorStreamPart2,\n    [messageAnnotationsStreamPart.code]: messageAnnotationsStreamPart,\n    [toolCallStreamPart.code]: toolCallStreamPart,\n    [toolResultStreamPart.code]: toolResultStreamPart,\n    [toolCallStreamingStartStreamPart.code]: toolCallStreamingStartStreamPart,\n    [toolCallDeltaStreamPart.code]: toolCallDeltaStreamPart,\n    [finishMessageStreamPart.code]: finishMessageStreamPart,\n    [finishStepStreamPart.code]: finishStepStreamPart\n};\nvar DataStreamStringPrefixes = {\n    [textStreamPart2.name]: textStreamPart2.code,\n    [dataStreamPart.name]: dataStreamPart.code,\n    [errorStreamPart2.name]: errorStreamPart2.code,\n    [messageAnnotationsStreamPart.name]: messageAnnotationsStreamPart.code,\n    [toolCallStreamPart.name]: toolCallStreamPart.code,\n    [toolResultStreamPart.name]: toolResultStreamPart.code,\n    [toolCallStreamingStartStreamPart.name]: toolCallStreamingStartStreamPart.code,\n    [toolCallDeltaStreamPart.name]: toolCallDeltaStreamPart.code,\n    [finishMessageStreamPart.name]: finishMessageStreamPart.code,\n    [finishStepStreamPart.name]: finishStepStreamPart.code\n};\nvar validCodes2 = dataStreamParts.map((part)=>part.code);\nvar parseDataStreamPart = (line)=>{\n    const firstSeparatorIndex = line.indexOf(\":\");\n    if (firstSeparatorIndex === -1) {\n        throw new Error(\"Failed to parse stream string. No separator found.\");\n    }\n    const prefix = line.slice(0, firstSeparatorIndex);\n    if (!validCodes2.includes(prefix)) {\n        throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);\n    }\n    const code = prefix;\n    const textValue = line.slice(firstSeparatorIndex + 1);\n    const jsonValue = JSON.parse(textValue);\n    return dataStreamPartsByCode[code].parse(jsonValue);\n};\nfunction formatDataStreamPart(type, value) {\n    const streamPart = dataStreamParts.find((part)=>part.name === type);\n    if (!streamPart) {\n        throw new Error(`Invalid stream part type: ${type}`);\n    }\n    return `${streamPart.code}:${JSON.stringify(value)}\n`;\n}\n// src/process-data-stream.ts\nvar NEWLINE = \"\\n\".charCodeAt(0);\nfunction concatChunks(chunks, totalLength) {\n    const concatenatedChunks = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const chunk of chunks){\n        concatenatedChunks.set(chunk, offset);\n        offset += chunk.length;\n    }\n    chunks.length = 0;\n    return concatenatedChunks;\n}\nasync function processDataStream({ stream, onTextPart, onDataPart, onErrorPart, onToolCallStreamingStartPart, onToolCallDeltaPart, onToolCallPart, onToolResultPart, onMessageAnnotationsPart, onFinishMessagePart, onFinishStepPart }) {\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    const chunks = [];\n    let totalLength = 0;\n    while(true){\n        const { value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            totalLength += value.length;\n            if (value[value.length - 1] !== NEWLINE) {\n                continue;\n            }\n        }\n        if (chunks.length === 0) {\n            break;\n        }\n        const concatenatedChunks = concatChunks(chunks, totalLength);\n        totalLength = 0;\n        const streamParts = decoder.decode(concatenatedChunks, {\n            stream: true\n        }).split(\"\\n\").filter((line)=>line !== \"\").map(parseDataStreamPart);\n        for (const { type, value: value2 } of streamParts){\n            switch(type){\n                case \"text\":\n                    await (onTextPart == null ? void 0 : onTextPart(value2));\n                    break;\n                case \"data\":\n                    await (onDataPart == null ? void 0 : onDataPart(value2));\n                    break;\n                case \"error\":\n                    await (onErrorPart == null ? void 0 : onErrorPart(value2));\n                    break;\n                case \"message_annotations\":\n                    await (onMessageAnnotationsPart == null ? void 0 : onMessageAnnotationsPart(value2));\n                    break;\n                case \"tool_call_streaming_start\":\n                    await (onToolCallStreamingStartPart == null ? void 0 : onToolCallStreamingStartPart(value2));\n                    break;\n                case \"tool_call_delta\":\n                    await (onToolCallDeltaPart == null ? void 0 : onToolCallDeltaPart(value2));\n                    break;\n                case \"tool_call\":\n                    await (onToolCallPart == null ? void 0 : onToolCallPart(value2));\n                    break;\n                case \"tool_result\":\n                    await (onToolResultPart == null ? void 0 : onToolResultPart(value2));\n                    break;\n                case \"finish_message\":\n                    await (onFinishMessagePart == null ? void 0 : onFinishMessagePart(value2));\n                    break;\n                case \"finish_step\":\n                    await (onFinishStepPart == null ? void 0 : onFinishStepPart(value2));\n                    break;\n                default:\n                    {\n                        const exhaustiveCheck = type;\n                        throw new Error(`Unknown stream part type: ${exhaustiveCheck}`);\n                    }\n            }\n        }\n    }\n}\n// src/duplicated/usage.ts\nfunction calculateLanguageModelUsage({ promptTokens, completionTokens }) {\n    return {\n        promptTokens,\n        completionTokens,\n        totalTokens: promptTokens + completionTokens\n    };\n}\n// src/process-chat-response.ts\nasync function processChatResponse({ stream, update, onToolCall, onFinish, generateId: generateId2 = _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.generateId, getCurrentDate = ()=>/* @__PURE__ */ new Date() }) {\n    const createdAt = getCurrentDate();\n    let currentMessage = void 0;\n    let createNewMessage = true;\n    const previousMessages = [];\n    const data = [];\n    let messageAnnotations = void 0;\n    const partialToolCalls = {};\n    let usage = {\n        completionTokens: NaN,\n        promptTokens: NaN,\n        totalTokens: NaN\n    };\n    let finishReason = \"unknown\";\n    function execUpdate() {\n        const copiedData = [\n            ...data\n        ];\n        if (currentMessage == null) {\n            update(previousMessages, copiedData);\n            return;\n        }\n        if (messageAnnotations == null ? void 0 : messageAnnotations.length) {\n            currentMessage.annotations = messageAnnotations;\n        }\n        const copiedMessage = {\n            // deep copy the message to ensure that deep changes (msg attachments) are updated\n            // with SolidJS. SolidJS uses referential integration of sub-objects to detect changes.\n            ...JSON.parse(JSON.stringify(currentMessage)),\n            // add a revision id to ensure that the message is updated with SWR. SWR uses a\n            // hashing approach by default to detect changes, but it only works for shallow\n            // changes. This is why we need to add a revision id to ensure that the message\n            // is updated with SWR (without it, the changes get stuck in SWR and are not\n            // forwarded to rendering):\n            revisionId: generateId2(),\n            // Fill in createdAt to retain Date object (lost in JSON.parse):\n            createdAt: currentMessage.createdAt\n        };\n        update([\n            ...previousMessages,\n            copiedMessage\n        ], copiedData);\n    }\n    function getMessage() {\n        if (createNewMessage || currentMessage == null) {\n            if (currentMessage != null) {\n                previousMessages.push(currentMessage);\n            }\n            createNewMessage = false;\n            currentMessage = {\n                id: generateId2(),\n                role: \"assistant\",\n                content: \"\",\n                createdAt\n            };\n        }\n        return currentMessage;\n    }\n    await processDataStream({\n        stream,\n        onTextPart (value) {\n            const activeMessage = getMessage();\n            currentMessage = {\n                ...activeMessage,\n                content: activeMessage.content + value\n            };\n            execUpdate();\n        },\n        onToolCallStreamingStartPart (value) {\n            const activeMessage = getMessage();\n            if (activeMessage.toolInvocations == null) {\n                activeMessage.toolInvocations = [];\n            }\n            partialToolCalls[value.toolCallId] = {\n                text: \"\",\n                toolName: value.toolName,\n                index: activeMessage.toolInvocations.length\n            };\n            activeMessage.toolInvocations.push({\n                state: \"partial-call\",\n                toolCallId: value.toolCallId,\n                toolName: value.toolName,\n                args: void 0\n            });\n            execUpdate();\n        },\n        onToolCallDeltaPart (value) {\n            const activeMessage = getMessage();\n            const partialToolCall = partialToolCalls[value.toolCallId];\n            partialToolCall.text += value.argsTextDelta;\n            const { value: partialArgs } = parsePartialJson(partialToolCall.text);\n            activeMessage.toolInvocations[partialToolCall.index] = {\n                state: \"partial-call\",\n                toolCallId: value.toolCallId,\n                toolName: partialToolCall.toolName,\n                args: partialArgs\n            };\n            execUpdate();\n        },\n        async onToolCallPart (value) {\n            const activeMessage = getMessage();\n            if (partialToolCalls[value.toolCallId] != null) {\n                activeMessage.toolInvocations[partialToolCalls[value.toolCallId].index] = {\n                    state: \"call\",\n                    ...value\n                };\n            } else {\n                if (activeMessage.toolInvocations == null) {\n                    activeMessage.toolInvocations = [];\n                }\n                activeMessage.toolInvocations.push({\n                    state: \"call\",\n                    ...value\n                });\n            }\n            if (onToolCall) {\n                const result = await onToolCall({\n                    toolCall: value\n                });\n                if (result != null) {\n                    activeMessage.toolInvocations[activeMessage.toolInvocations.length - 1] = {\n                        state: \"result\",\n                        ...value,\n                        result\n                    };\n                }\n            }\n            execUpdate();\n        },\n        onToolResultPart (value) {\n            const activeMessage = getMessage();\n            const toolInvocations = activeMessage.toolInvocations;\n            if (toolInvocations == null) {\n                throw new Error(\"tool_result must be preceded by a tool_call\");\n            }\n            const toolInvocationIndex = toolInvocations.findIndex((invocation)=>invocation.toolCallId === value.toolCallId);\n            if (toolInvocationIndex === -1) {\n                throw new Error(\"tool_result must be preceded by a tool_call with the same toolCallId\");\n            }\n            toolInvocations[toolInvocationIndex] = {\n                ...toolInvocations[toolInvocationIndex],\n                state: \"result\",\n                ...value\n            };\n            execUpdate();\n        },\n        onDataPart (value) {\n            data.push(...value);\n            execUpdate();\n        },\n        onMessageAnnotationsPart (value) {\n            if (messageAnnotations == null) {\n                messageAnnotations = [\n                    ...value\n                ];\n            } else {\n                messageAnnotations.push(...value);\n            }\n            execUpdate();\n        },\n        onFinishStepPart (value) {\n            createNewMessage = !value.isContinued;\n        },\n        onFinishMessagePart (value) {\n            finishReason = value.finishReason;\n            if (value.usage != null) {\n                usage = calculateLanguageModelUsage(value.usage);\n            }\n        },\n        onErrorPart (error) {\n            throw new Error(error);\n        }\n    });\n    onFinish == null ? void 0 : onFinish({\n        message: currentMessage,\n        finishReason,\n        usage\n    });\n}\n// src/process-text-stream.ts\nasync function processTextStream({ stream, onTextPart }) {\n    const reader = stream.pipeThrough(new TextDecoderStream()).getReader();\n    while(true){\n        const { done, value } = await reader.read();\n        if (done) {\n            break;\n        }\n        await onTextPart(value);\n    }\n}\n// src/call-chat-api.ts\nvar getOriginalFetch = ()=>fetch;\nasync function callChatApi({ api, body, streamProtocol = \"data\", credentials, headers, abortController, restoreMessagesOnFailure, onResponse, onUpdate, onFinish, onToolCall, generateId: generateId2, fetch: fetch2 = getOriginalFetch() }) {\n    var _a, _b;\n    const response = await fetch2(api, {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...headers\n        },\n        signal: (_a = abortController == null ? void 0 : abortController()) == null ? void 0 : _a.signal,\n        credentials\n    }).catch((err)=>{\n        restoreMessagesOnFailure();\n        throw err;\n    });\n    if (onResponse) {\n        try {\n            await onResponse(response);\n        } catch (err) {\n            throw err;\n        }\n    }\n    if (!response.ok) {\n        restoreMessagesOnFailure();\n        throw new Error((_b = await response.text()) != null ? _b : \"Failed to fetch the chat response.\");\n    }\n    if (!response.body) {\n        throw new Error(\"The response body is empty.\");\n    }\n    switch(streamProtocol){\n        case \"text\":\n            {\n                const resultMessage = {\n                    id: generateId2(),\n                    createdAt: /* @__PURE__ */ new Date(),\n                    role: \"assistant\",\n                    content: \"\"\n                };\n                await processTextStream({\n                    stream: response.body,\n                    onTextPart: (chunk)=>{\n                        resultMessage.content += chunk;\n                        onUpdate([\n                            {\n                                ...resultMessage\n                            }\n                        ], []);\n                    }\n                });\n                onFinish == null ? void 0 : onFinish(resultMessage, {\n                    usage: {\n                        completionTokens: NaN,\n                        promptTokens: NaN,\n                        totalTokens: NaN\n                    },\n                    finishReason: \"unknown\"\n                });\n                return;\n            }\n        case \"data\":\n            {\n                await processChatResponse({\n                    stream: response.body,\n                    update: onUpdate,\n                    onToolCall,\n                    onFinish ({ message, finishReason, usage }) {\n                        if (onFinish && message != null) {\n                            onFinish(message, {\n                                usage,\n                                finishReason\n                            });\n                        }\n                    },\n                    generateId: generateId2\n                });\n                return;\n            }\n        default:\n            {\n                const exhaustiveCheck = streamProtocol;\n                throw new Error(`Unknown stream protocol: ${exhaustiveCheck}`);\n            }\n    }\n}\n// src/call-completion-api.ts\nvar getOriginalFetch2 = ()=>fetch;\nasync function callCompletionApi({ api, prompt, credentials, headers, body, streamProtocol = \"data\", setCompletion, setLoading, setError, setAbortController, onResponse, onFinish, onError, onData, fetch: fetch2 = getOriginalFetch2() }) {\n    var _a;\n    try {\n        setLoading(true);\n        setError(void 0);\n        const abortController = new AbortController();\n        setAbortController(abortController);\n        setCompletion(\"\");\n        const response = await fetch2(api, {\n            method: \"POST\",\n            body: JSON.stringify({\n                prompt,\n                ...body\n            }),\n            credentials,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...headers\n            },\n            signal: abortController.signal\n        }).catch((err)=>{\n            throw err;\n        });\n        if (onResponse) {\n            try {\n                await onResponse(response);\n            } catch (err) {\n                throw err;\n            }\n        }\n        if (!response.ok) {\n            throw new Error((_a = await response.text()) != null ? _a : \"Failed to fetch the chat response.\");\n        }\n        if (!response.body) {\n            throw new Error(\"The response body is empty.\");\n        }\n        let result = \"\";\n        switch(streamProtocol){\n            case \"text\":\n                {\n                    await processTextStream({\n                        stream: response.body,\n                        onTextPart: (chunk)=>{\n                            result += chunk;\n                            setCompletion(result);\n                        }\n                    });\n                    break;\n                }\n            case \"data\":\n                {\n                    await processDataStream({\n                        stream: response.body,\n                        onTextPart (value) {\n                            result += value;\n                            setCompletion(result);\n                        },\n                        onDataPart (value) {\n                            onData == null ? void 0 : onData(value);\n                        },\n                        onErrorPart (value) {\n                            throw new Error(value);\n                        }\n                    });\n                    break;\n                }\n            default:\n                {\n                    const exhaustiveCheck = streamProtocol;\n                    throw new Error(`Unknown stream protocol: ${exhaustiveCheck}`);\n                }\n        }\n        if (onFinish) {\n            onFinish(prompt, result);\n        }\n        setAbortController(null);\n        return result;\n    } catch (err) {\n        if (err.name === \"AbortError\") {\n            setAbortController(null);\n            return null;\n        }\n        if (err instanceof Error) {\n            if (onError) {\n                onError(err);\n            }\n        }\n        setError(err);\n    } finally{\n        setLoading(false);\n    }\n}\n// src/data-url.ts\nfunction getTextFromDataUrl(dataUrl) {\n    const [header, base64Content] = dataUrl.split(\",\");\n    const mimeType = header.split(\";\")[0].split(\":\")[1];\n    if (mimeType == null || base64Content == null) {\n        throw new Error(\"Invalid data URL format\");\n    }\n    try {\n        return window.atob(base64Content);\n    } catch (error) {\n        throw new Error(`Error decoding data URL`);\n    }\n}\n// src/is-deep-equal-data.ts\nfunction isDeepEqualData(obj1, obj2) {\n    if (obj1 === obj2) return true;\n    if (obj1 == null || obj2 == null) return false;\n    if (typeof obj1 !== \"object\" && typeof obj2 !== \"object\") return obj1 === obj2;\n    if (obj1.constructor !== obj2.constructor) return false;\n    if (obj1 instanceof Date && obj2 instanceof Date) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    if (Array.isArray(obj1)) {\n        if (obj1.length !== obj2.length) return false;\n        for(let i = 0; i < obj1.length; i++){\n            if (!isDeepEqualData(obj1[i], obj2[i])) return false;\n        }\n        return true;\n    }\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) return false;\n    for (const key of keys1){\n        if (!keys2.includes(key)) return false;\n        if (!isDeepEqualData(obj1[key], obj2[key])) return false;\n    }\n    return true;\n}\n// src/prepare-attachments-for-request.ts\nasync function prepareAttachmentsForRequest(attachmentsFromOptions) {\n    if (!attachmentsFromOptions) {\n        return [];\n    }\n    if (attachmentsFromOptions instanceof FileList) {\n        return Promise.all(Array.from(attachmentsFromOptions).map(async (attachment)=>{\n            const { name, type } = attachment;\n            const dataUrl = await new Promise((resolve, reject)=>{\n                const reader = new FileReader();\n                reader.onload = (readerEvent)=>{\n                    var _a;\n                    resolve((_a = readerEvent.target) == null ? void 0 : _a.result);\n                };\n                reader.onerror = (error)=>reject(error);\n                reader.readAsDataURL(attachment);\n            });\n            return {\n                name,\n                contentType: type,\n                url: dataUrl\n            };\n        }));\n    }\n    if (Array.isArray(attachmentsFromOptions)) {\n        return attachmentsFromOptions;\n    }\n    throw new Error(\"Invalid attachments type\");\n}\n// src/process-assistant-stream.ts\nvar NEWLINE2 = \"\\n\".charCodeAt(0);\nfunction concatChunks2(chunks, totalLength) {\n    const concatenatedChunks = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const chunk of chunks){\n        concatenatedChunks.set(chunk, offset);\n        offset += chunk.length;\n    }\n    chunks.length = 0;\n    return concatenatedChunks;\n}\nasync function processAssistantStream({ stream, onTextPart, onErrorPart, onAssistantMessagePart, onAssistantControlDataPart, onDataMessagePart }) {\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    const chunks = [];\n    let totalLength = 0;\n    while(true){\n        const { value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            totalLength += value.length;\n            if (value[value.length - 1] !== NEWLINE2) {\n                continue;\n            }\n        }\n        if (chunks.length === 0) {\n            break;\n        }\n        const concatenatedChunks = concatChunks2(chunks, totalLength);\n        totalLength = 0;\n        const streamParts = decoder.decode(concatenatedChunks, {\n            stream: true\n        }).split(\"\\n\").filter((line)=>line !== \"\").map(parseAssistantStreamPart);\n        for (const { type, value: value2 } of streamParts){\n            switch(type){\n                case \"text\":\n                    await (onTextPart == null ? void 0 : onTextPart(value2));\n                    break;\n                case \"error\":\n                    await (onErrorPart == null ? void 0 : onErrorPart(value2));\n                    break;\n                case \"assistant_message\":\n                    await (onAssistantMessagePart == null ? void 0 : onAssistantMessagePart(value2));\n                    break;\n                case \"assistant_control_data\":\n                    await (onAssistantControlDataPart == null ? void 0 : onAssistantControlDataPart(value2));\n                    break;\n                case \"data_message\":\n                    await (onDataMessagePart == null ? void 0 : onDataMessagePart(value2));\n                    break;\n                default:\n                    {\n                        const exhaustiveCheck = type;\n                        throw new Error(`Unknown stream part type: ${exhaustiveCheck}`);\n                    }\n            }\n        }\n    }\n}\n// src/schema.ts\n\n\nvar schemaSymbol = Symbol.for(\"vercel.ai.schema\");\nfunction jsonSchema(jsonSchema2, { validate } = {}) {\n    return {\n        [schemaSymbol]: true,\n        _type: void 0,\n        // should never be used directly\n        [_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.validatorSymbol]: true,\n        jsonSchema: jsonSchema2,\n        validate\n    };\n}\nfunction isSchema(value) {\n    return typeof value === \"object\" && value !== null && schemaSymbol in value && value[schemaSymbol] === true && \"jsonSchema\" in value && \"validate\" in value;\n}\nfunction asSchema(schema) {\n    return isSchema(schema) ? schema : zodSchema(schema);\n}\nfunction zodSchema(zodSchema2) {\n    return jsonSchema(// we assume that zodToJsonSchema will return a valid JSONSchema7:\n    (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(zodSchema2), {\n        validate: (value)=>{\n            const result = zodSchema2.safeParse(value);\n            return result.success ? {\n                success: true,\n                value: result.data\n            } : {\n                success: false,\n                error: result.error\n            };\n        }\n    });\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ai-sdk/ui-utils/dist/index.mjs\n");

/***/ })

};
;