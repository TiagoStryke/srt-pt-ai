"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ai";
exports.ids = ["vendor-chunks/ai"];
exports.modules = {

/***/ "(rsc)/./node_modules/ai/dist/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/ai/dist/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AISDKError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError),\n/* harmony export */   APICallError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError),\n/* harmony export */   AssistantResponse: () => (/* binding */ AssistantResponse),\n/* harmony export */   DownloadError: () => (/* binding */ DownloadError),\n/* harmony export */   EmptyResponseBodyError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.EmptyResponseBodyError),\n/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),\n/* harmony export */   InvalidDataContentError: () => (/* binding */ InvalidDataContentError),\n/* harmony export */   InvalidMessageRoleError: () => (/* binding */ InvalidMessageRoleError),\n/* harmony export */   InvalidPromptError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError),\n/* harmony export */   InvalidResponseDataError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidResponseDataError),\n/* harmony export */   InvalidToolArgumentsError: () => (/* binding */ InvalidToolArgumentsError),\n/* harmony export */   JSONParseError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError),\n/* harmony export */   LangChainAdapter: () => (/* binding */ langchain_adapter_exports),\n/* harmony export */   LlamaIndexAdapter: () => (/* binding */ llamaindex_adapter_exports),\n/* harmony export */   LoadAPIKeyError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadAPIKeyError),\n/* harmony export */   MessageConversionError: () => (/* binding */ MessageConversionError),\n/* harmony export */   NoContentGeneratedError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoContentGeneratedError),\n/* harmony export */   NoObjectGeneratedError: () => (/* binding */ NoObjectGeneratedError),\n/* harmony export */   NoSuchModelError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError),\n/* harmony export */   NoSuchProviderError: () => (/* binding */ NoSuchProviderError),\n/* harmony export */   NoSuchToolError: () => (/* binding */ NoSuchToolError),\n/* harmony export */   Output: () => (/* binding */ output_exports),\n/* harmony export */   RetryError: () => (/* binding */ RetryError),\n/* harmony export */   StreamData: () => (/* binding */ StreamData),\n/* harmony export */   ToolCallRepairError: () => (/* binding */ ToolCallRepairError),\n/* harmony export */   ToolExecutionError: () => (/* binding */ ToolExecutionError),\n/* harmony export */   TypeValidationError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError),\n/* harmony export */   UnsupportedFunctionalityError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError),\n/* harmony export */   convertToCoreMessages: () => (/* binding */ convertToCoreMessages),\n/* harmony export */   cosineSimilarity: () => (/* binding */ cosineSimilarity),\n/* harmony export */   createDataStream: () => (/* binding */ createDataStream),\n/* harmony export */   createDataStreamResponse: () => (/* binding */ createDataStreamResponse),\n/* harmony export */   embed: () => (/* binding */ embed),\n/* harmony export */   embedMany: () => (/* binding */ embedMany),\n/* harmony export */   experimental_createProviderRegistry: () => (/* binding */ experimental_createProviderRegistry),\n/* harmony export */   experimental_customProvider: () => (/* binding */ experimental_customProvider),\n/* harmony export */   experimental_generateImage: () => (/* binding */ generateImage),\n/* harmony export */   experimental_wrapLanguageModel: () => (/* binding */ experimental_wrapLanguageModel),\n/* harmony export */   formatAssistantStreamPart: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart),\n/* harmony export */   formatDataStreamPart: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart),\n/* harmony export */   generateId: () => (/* reexport safe */ _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.generateId),\n/* harmony export */   generateObject: () => (/* binding */ generateObject),\n/* harmony export */   generateText: () => (/* binding */ generateText),\n/* harmony export */   jsonSchema: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.jsonSchema),\n/* harmony export */   parseAssistantStreamPart: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.parseAssistantStreamPart),\n/* harmony export */   parseDataStreamPart: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.parseDataStreamPart),\n/* harmony export */   pipeDataStreamToResponse: () => (/* binding */ pipeDataStreamToResponse),\n/* harmony export */   processDataStream: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.processDataStream),\n/* harmony export */   processTextStream: () => (/* reexport safe */ _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.processTextStream),\n/* harmony export */   smoothStream: () => (/* binding */ smoothStream),\n/* harmony export */   streamObject: () => (/* binding */ streamObject),\n/* harmony export */   streamText: () => (/* binding */ streamText),\n/* harmony export */   tool: () => (/* binding */ tool)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/ui-utils */ \"(rsc)/./node_modules/@ai-sdk/ui-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name13 in all)__defProp(target, name13, {\n        get: all[name13],\n        enumerable: true\n    });\n};\n// streams/index.ts\n\n\n// core/index.ts\n\n// core/data-stream/create-data-stream.ts\n\nfunction createDataStream({ execute, onError = ()=>\"An error occurred.\" }) {\n    let controller;\n    const ongoingStreamPromises = [];\n    const stream = new ReadableStream({\n        start (controllerArg) {\n            controller = controllerArg;\n        }\n    });\n    function safeEnqueue(data) {\n        try {\n            controller.enqueue(data);\n        } catch (error) {}\n    }\n    try {\n        const result = execute({\n            writeData (data) {\n                safeEnqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"data\", [\n                    data\n                ]));\n            },\n            writeMessageAnnotation (annotation) {\n                safeEnqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"message_annotations\", [\n                    annotation\n                ]));\n            },\n            merge (streamArg) {\n                ongoingStreamPromises.push((async ()=>{\n                    const reader = streamArg.getReader();\n                    while(true){\n                        const { done, value } = await reader.read();\n                        if (done) break;\n                        safeEnqueue(value);\n                    }\n                })().catch((error)=>{\n                    safeEnqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"error\", onError(error)));\n                }));\n            },\n            onError\n        });\n        if (result) {\n            ongoingStreamPromises.push(result.catch((error)=>{\n                safeEnqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"error\", onError(error)));\n            }));\n        }\n    } catch (error) {\n        safeEnqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"error\", onError(error)));\n    }\n    const waitForStreams = new Promise(async (resolve)=>{\n        while(ongoingStreamPromises.length > 0){\n            await ongoingStreamPromises.shift();\n        }\n        resolve();\n    });\n    waitForStreams.finally(()=>{\n        try {\n            controller.close();\n        } catch (error) {}\n    });\n    return stream;\n}\n// core/util/prepare-response-headers.ts\nfunction prepareResponseHeaders(headers, { contentType, dataStreamVersion }) {\n    const responseHeaders = new Headers(headers != null ? headers : {});\n    if (!responseHeaders.has(\"Content-Type\")) {\n        responseHeaders.set(\"Content-Type\", contentType);\n    }\n    if (dataStreamVersion !== void 0) {\n        responseHeaders.set(\"X-Vercel-AI-Data-Stream\", dataStreamVersion);\n    }\n    return responseHeaders;\n}\n// core/data-stream/create-data-stream-response.ts\nfunction createDataStreamResponse({ status, statusText, headers, execute, onError }) {\n    return new Response(createDataStream({\n        execute,\n        onError\n    }).pipeThrough(new TextEncoderStream()), {\n        status,\n        statusText,\n        headers: prepareResponseHeaders(headers, {\n            contentType: \"text/plain; charset=utf-8\",\n            dataStreamVersion: \"v1\"\n        })\n    });\n}\n// core/util/prepare-outgoing-http-headers.ts\nfunction prepareOutgoingHttpHeaders(headers, { contentType, dataStreamVersion }) {\n    const outgoingHeaders = {};\n    if (headers != null) {\n        for (const [key, value] of Object.entries(headers)){\n            outgoingHeaders[key] = value;\n        }\n    }\n    if (outgoingHeaders[\"Content-Type\"] == null) {\n        outgoingHeaders[\"Content-Type\"] = contentType;\n    }\n    if (dataStreamVersion !== void 0) {\n        outgoingHeaders[\"X-Vercel-AI-Data-Stream\"] = dataStreamVersion;\n    }\n    return outgoingHeaders;\n}\n// core/util/write-to-server-response.ts\nfunction writeToServerResponse({ response, status, statusText, headers, stream }) {\n    response.writeHead(status != null ? status : 200, statusText, headers);\n    const reader = stream.getReader();\n    const read = async ()=>{\n        try {\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) break;\n                response.write(value);\n            }\n        } catch (error) {\n            throw error;\n        } finally{\n            response.end();\n        }\n    };\n    read();\n}\n// core/data-stream/pipe-data-stream-to-response.ts\nfunction pipeDataStreamToResponse(response, { status, statusText, headers, execute, onError }) {\n    writeToServerResponse({\n        response,\n        status,\n        statusText,\n        headers: prepareOutgoingHttpHeaders(headers, {\n            contentType: \"text/plain; charset=utf-8\",\n            dataStreamVersion: \"v1\"\n        }),\n        stream: createDataStream({\n            execute,\n            onError\n        }).pipeThrough(new TextEncoderStream())\n    });\n}\n// errors/invalid-argument-error.ts\n\nvar name = \"AI_InvalidArgumentError\";\nvar marker = `vercel.ai.error.${name}`;\nvar symbol = Symbol.for(marker);\nvar _a;\nvar InvalidArgumentError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ parameter, value, message }){\n        super({\n            name,\n            message: `Invalid argument for parameter ${parameter}: ${message}`\n        });\n        this[_a] = true;\n        this.parameter = parameter;\n        this.value = value;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker);\n    }\n};\n_a = symbol;\n// util/retry-with-exponential-backoff.ts\n\n\n// util/delay.ts\nasync function delay(delayInMs) {\n    return delayInMs === void 0 ? Promise.resolve() : new Promise((resolve)=>setTimeout(resolve, delayInMs));\n}\n// util/retry-error.ts\n\nvar name2 = \"AI_RetryError\";\nvar marker2 = `vercel.ai.error.${name2}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2;\nvar RetryError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ message, reason, errors }){\n        super({\n            name: name2,\n            message\n        });\n        this[_a2] = true;\n        this.reason = reason;\n        this.errors = errors;\n        this.lastError = errors[errors.length - 1];\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker2);\n    }\n};\n_a2 = symbol2;\n// util/retry-with-exponential-backoff.ts\nvar retryWithExponentialBackoff = ({ maxRetries = 2, initialDelayInMs = 2e3, backoffFactor = 2 } = {})=>async (f)=>_retryWithExponentialBackoff(f, {\n            maxRetries,\n            delayInMs: initialDelayInMs,\n            backoffFactor\n        });\nasync function _retryWithExponentialBackoff(f, { maxRetries, delayInMs, backoffFactor }, errors = []) {\n    try {\n        return await f();\n    } catch (error) {\n        if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.isAbortError)(error)) {\n            throw error;\n        }\n        if (maxRetries === 0) {\n            throw error;\n        }\n        const errorMessage = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.getErrorMessage)(error);\n        const newErrors = [\n            ...errors,\n            error\n        ];\n        const tryNumber = newErrors.length;\n        if (tryNumber > maxRetries) {\n            throw new RetryError({\n                message: `Failed after ${tryNumber} attempts. Last error: ${errorMessage}`,\n                reason: \"maxRetriesExceeded\",\n                errors: newErrors\n            });\n        }\n        if (error instanceof Error && _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isInstance(error) && error.isRetryable === true && tryNumber <= maxRetries) {\n            await delay(delayInMs);\n            return _retryWithExponentialBackoff(f, {\n                maxRetries,\n                delayInMs: backoffFactor * delayInMs,\n                backoffFactor\n            }, newErrors);\n        }\n        if (tryNumber === 1) {\n            throw error;\n        }\n        throw new RetryError({\n            message: `Failed after ${tryNumber} attempts with non-retryable error: '${errorMessage}'`,\n            reason: \"errorNotRetryable\",\n            errors: newErrors\n        });\n    }\n}\n// core/prompt/prepare-retries.ts\nfunction prepareRetries({ maxRetries }) {\n    if (maxRetries != null) {\n        if (!Number.isInteger(maxRetries)) {\n            throw new InvalidArgumentError({\n                parameter: \"maxRetries\",\n                value: maxRetries,\n                message: \"maxRetries must be an integer\"\n            });\n        }\n        if (maxRetries < 0) {\n            throw new InvalidArgumentError({\n                parameter: \"maxRetries\",\n                value: maxRetries,\n                message: \"maxRetries must be >= 0\"\n            });\n        }\n    }\n    const maxRetriesResult = maxRetries != null ? maxRetries : 2;\n    return {\n        maxRetries: maxRetriesResult,\n        retry: retryWithExponentialBackoff({\n            maxRetries: maxRetriesResult\n        })\n    };\n}\n// core/telemetry/assemble-operation-name.ts\nfunction assembleOperationName({ operationId, telemetry }) {\n    return {\n        // standardized operation and resource name:\n        \"operation.name\": `${operationId}${(telemetry == null ? void 0 : telemetry.functionId) != null ? ` ${telemetry.functionId}` : \"\"}`,\n        \"resource.name\": telemetry == null ? void 0 : telemetry.functionId,\n        // detailed, AI SDK specific data:\n        \"ai.operationId\": operationId,\n        \"ai.telemetry.functionId\": telemetry == null ? void 0 : telemetry.functionId\n    };\n}\n// core/telemetry/get-base-telemetry-attributes.ts\nfunction getBaseTelemetryAttributes({ model, settings, telemetry, headers }) {\n    var _a13;\n    return {\n        \"ai.model.provider\": model.provider,\n        \"ai.model.id\": model.modelId,\n        // settings:\n        ...Object.entries(settings).reduce((attributes, [key, value])=>{\n            attributes[`ai.settings.${key}`] = value;\n            return attributes;\n        }, {}),\n        // add metadata as attributes:\n        ...Object.entries((_a13 = telemetry == null ? void 0 : telemetry.metadata) != null ? _a13 : {}).reduce((attributes, [key, value])=>{\n            attributes[`ai.telemetry.metadata.${key}`] = value;\n            return attributes;\n        }, {}),\n        // request headers\n        ...Object.entries(headers != null ? headers : {}).reduce((attributes, [key, value])=>{\n            if (value !== void 0) {\n                attributes[`ai.request.headers.${key}`] = value;\n            }\n            return attributes;\n        }, {})\n    };\n}\n// core/telemetry/get-tracer.ts\n\n// core/telemetry/noop-tracer.ts\nvar noopTracer = {\n    startSpan () {\n        return noopSpan;\n    },\n    startActiveSpan (name13, arg1, arg2, arg3) {\n        if (typeof arg1 === \"function\") {\n            return arg1(noopSpan);\n        }\n        if (typeof arg2 === \"function\") {\n            return arg2(noopSpan);\n        }\n        if (typeof arg3 === \"function\") {\n            return arg3(noopSpan);\n        }\n    }\n};\nvar noopSpan = {\n    spanContext () {\n        return noopSpanContext;\n    },\n    setAttribute () {\n        return this;\n    },\n    setAttributes () {\n        return this;\n    },\n    addEvent () {\n        return this;\n    },\n    addLink () {\n        return this;\n    },\n    addLinks () {\n        return this;\n    },\n    setStatus () {\n        return this;\n    },\n    updateName () {\n        return this;\n    },\n    end () {\n        return this;\n    },\n    isRecording () {\n        return false;\n    },\n    recordException () {\n        return this;\n    }\n};\nvar noopSpanContext = {\n    traceId: \"\",\n    spanId: \"\",\n    traceFlags: 0\n};\n// core/telemetry/get-tracer.ts\nfunction getTracer({ isEnabled = false, tracer } = {}) {\n    if (!isEnabled) {\n        return noopTracer;\n    }\n    if (tracer) {\n        return tracer;\n    }\n    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getTracer(\"ai\");\n}\n// core/telemetry/record-span.ts\n\nfunction recordSpan({ name: name13, tracer, attributes, fn, endWhenDone = true }) {\n    return tracer.startActiveSpan(name13, {\n        attributes\n    }, async (span)=>{\n        try {\n            const result = await fn(span);\n            if (endWhenDone) {\n                span.end();\n            }\n            return result;\n        } catch (error) {\n            try {\n                if (error instanceof Error) {\n                    span.recordException({\n                        name: error.name,\n                        message: error.message,\n                        stack: error.stack\n                    });\n                    span.setStatus({\n                        code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.SpanStatusCode.ERROR,\n                        message: error.message\n                    });\n                } else {\n                    span.setStatus({\n                        code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.SpanStatusCode.ERROR\n                    });\n                }\n            } finally{\n                span.end();\n            }\n            throw error;\n        }\n    });\n}\n// core/telemetry/select-telemetry-attributes.ts\nfunction selectTelemetryAttributes({ telemetry, attributes }) {\n    if ((telemetry == null ? void 0 : telemetry.isEnabled) !== true) {\n        return {};\n    }\n    return Object.entries(attributes).reduce((attributes2, [key, value])=>{\n        if (value === void 0) {\n            return attributes2;\n        }\n        if (typeof value === \"object\" && \"input\" in value && typeof value.input === \"function\") {\n            if ((telemetry == null ? void 0 : telemetry.recordInputs) === false) {\n                return attributes2;\n            }\n            const result = value.input();\n            return result === void 0 ? attributes2 : {\n                ...attributes2,\n                [key]: result\n            };\n        }\n        if (typeof value === \"object\" && \"output\" in value && typeof value.output === \"function\") {\n            if ((telemetry == null ? void 0 : telemetry.recordOutputs) === false) {\n                return attributes2;\n            }\n            const result = value.output();\n            return result === void 0 ? attributes2 : {\n                ...attributes2,\n                [key]: result\n            };\n        }\n        return {\n            ...attributes2,\n            [key]: value\n        };\n    }, {});\n}\n// core/embed/embed.ts\nasync function embed({ model, value, maxRetries: maxRetriesArg, abortSignal, headers, experimental_telemetry: telemetry }) {\n    const { maxRetries, retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            maxRetries\n        }\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.embed\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.embed\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                \"ai.value\": {\n                    input: ()=>JSON.stringify(value)\n                }\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            const { embedding, usage, rawResponse } = await retry(()=>// nested spans to align with the embedMany telemetry data:\n                recordSpan({\n                    name: \"ai.embed.doEmbed\",\n                    attributes: selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                            ...assembleOperationName({\n                                operationId: \"ai.embed.doEmbed\",\n                                telemetry\n                            }),\n                            ...baseTelemetryAttributes,\n                            // specific settings that only make sense on the outer level:\n                            \"ai.values\": {\n                                input: ()=>[\n                                        JSON.stringify(value)\n                                    ]\n                            }\n                        }\n                    }),\n                    tracer,\n                    fn: async (doEmbedSpan)=>{\n                        var _a13;\n                        const modelResponse = await model.doEmbed({\n                            values: [\n                                value\n                            ],\n                            abortSignal,\n                            headers\n                        });\n                        const embedding2 = modelResponse.embeddings[0];\n                        const usage2 = (_a13 = modelResponse.usage) != null ? _a13 : {\n                            tokens: NaN\n                        };\n                        doEmbedSpan.setAttributes(selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                \"ai.embeddings\": {\n                                    output: ()=>modelResponse.embeddings.map((embedding3)=>JSON.stringify(embedding3))\n                                },\n                                \"ai.usage.tokens\": usage2.tokens\n                            }\n                        }));\n                        return {\n                            embedding: embedding2,\n                            usage: usage2,\n                            rawResponse: modelResponse.rawResponse\n                        };\n                    }\n                }));\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.embedding\": {\n                        output: ()=>JSON.stringify(embedding)\n                    },\n                    \"ai.usage.tokens\": usage.tokens\n                }\n            }));\n            return new DefaultEmbedResult({\n                value,\n                embedding,\n                usage,\n                rawResponse\n            });\n        }\n    });\n}\nvar DefaultEmbedResult = class {\n    constructor(options){\n        this.value = options.value;\n        this.embedding = options.embedding;\n        this.usage = options.usage;\n        this.rawResponse = options.rawResponse;\n    }\n};\n// core/util/split-array.ts\nfunction splitArray(array, chunkSize) {\n    if (chunkSize <= 0) {\n        throw new Error(\"chunkSize must be greater than 0\");\n    }\n    const result = [];\n    for(let i = 0; i < array.length; i += chunkSize){\n        result.push(array.slice(i, i + chunkSize));\n    }\n    return result;\n}\n// core/embed/embed-many.ts\nasync function embedMany({ model, values, maxRetries: maxRetriesArg, abortSignal, headers, experimental_telemetry: telemetry }) {\n    const { maxRetries, retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            maxRetries\n        }\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.embedMany\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.embedMany\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                \"ai.values\": {\n                    input: ()=>values.map((value)=>JSON.stringify(value))\n                }\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            const maxEmbeddingsPerCall = model.maxEmbeddingsPerCall;\n            if (maxEmbeddingsPerCall == null) {\n                const { embeddings: embeddings2, usage } = await retry(()=>{\n                    return recordSpan({\n                        name: \"ai.embedMany.doEmbed\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.embedMany.doEmbed\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                // specific settings that only make sense on the outer level:\n                                \"ai.values\": {\n                                    input: ()=>values.map((value)=>JSON.stringify(value))\n                                }\n                            }\n                        }),\n                        tracer,\n                        fn: async (doEmbedSpan)=>{\n                            var _a13;\n                            const modelResponse = await model.doEmbed({\n                                values,\n                                abortSignal,\n                                headers\n                            });\n                            const embeddings3 = modelResponse.embeddings;\n                            const usage2 = (_a13 = modelResponse.usage) != null ? _a13 : {\n                                tokens: NaN\n                            };\n                            doEmbedSpan.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.embeddings\": {\n                                        output: ()=>embeddings3.map((embedding)=>JSON.stringify(embedding))\n                                    },\n                                    \"ai.usage.tokens\": usage2.tokens\n                                }\n                            }));\n                            return {\n                                embeddings: embeddings3,\n                                usage: usage2\n                            };\n                        }\n                    });\n                });\n                span.setAttributes(selectTelemetryAttributes({\n                    telemetry,\n                    attributes: {\n                        \"ai.embeddings\": {\n                            output: ()=>embeddings2.map((embedding)=>JSON.stringify(embedding))\n                        },\n                        \"ai.usage.tokens\": usage.tokens\n                    }\n                }));\n                return new DefaultEmbedManyResult({\n                    values,\n                    embeddings: embeddings2,\n                    usage\n                });\n            }\n            const valueChunks = splitArray(values, maxEmbeddingsPerCall);\n            const embeddings = [];\n            let tokens = 0;\n            for (const chunk of valueChunks){\n                const { embeddings: responseEmbeddings, usage } = await retry(()=>{\n                    return recordSpan({\n                        name: \"ai.embedMany.doEmbed\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.embedMany.doEmbed\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                // specific settings that only make sense on the outer level:\n                                \"ai.values\": {\n                                    input: ()=>chunk.map((value)=>JSON.stringify(value))\n                                }\n                            }\n                        }),\n                        tracer,\n                        fn: async (doEmbedSpan)=>{\n                            var _a13;\n                            const modelResponse = await model.doEmbed({\n                                values: chunk,\n                                abortSignal,\n                                headers\n                            });\n                            const embeddings2 = modelResponse.embeddings;\n                            const usage2 = (_a13 = modelResponse.usage) != null ? _a13 : {\n                                tokens: NaN\n                            };\n                            doEmbedSpan.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.embeddings\": {\n                                        output: ()=>embeddings2.map((embedding)=>JSON.stringify(embedding))\n                                    },\n                                    \"ai.usage.tokens\": usage2.tokens\n                                }\n                            }));\n                            return {\n                                embeddings: embeddings2,\n                                usage: usage2\n                            };\n                        }\n                    });\n                });\n                embeddings.push(...responseEmbeddings);\n                tokens += usage.tokens;\n            }\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.embeddings\": {\n                        output: ()=>embeddings.map((embedding)=>JSON.stringify(embedding))\n                    },\n                    \"ai.usage.tokens\": tokens\n                }\n            }));\n            return new DefaultEmbedManyResult({\n                values,\n                embeddings,\n                usage: {\n                    tokens\n                }\n            });\n        }\n    });\n}\nvar DefaultEmbedManyResult = class {\n    constructor(options){\n        this.values = options.values;\n        this.embeddings = options.embeddings;\n        this.usage = options.usage;\n    }\n};\n// core/generate-image/generate-image.ts\n\nasync function generateImage({ model, prompt, n, size, providerOptions, maxRetries: maxRetriesArg, abortSignal, headers }) {\n    const { retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const { images } = await retry(()=>model.doGenerate({\n            prompt,\n            n: n != null ? n : 1,\n            abortSignal,\n            headers,\n            size,\n            providerOptions: providerOptions != null ? providerOptions : {}\n        }));\n    return new DefaultGenerateImageResult({\n        base64Images: images\n    });\n}\nvar DefaultGenerateImageResult = class {\n    constructor(options){\n        this.images = options.base64Images.map((base64)=>({\n                base64,\n                get uint8Array () {\n                    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertBase64ToUint8Array)(this.base64);\n                }\n            }));\n    }\n    get image() {\n        return this.images[0];\n    }\n};\n// core/generate-object/generate-object.ts\n\n// errors/no-object-generated-error.ts\n\nvar name3 = \"AI_NoObjectGeneratedError\";\nvar marker3 = `vercel.ai.error.${name3}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3;\nvar NoObjectGeneratedError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ message = \"No object generated.\", cause, text: text2, response, usage }){\n        super({\n            name: name3,\n            message,\n            cause\n        });\n        this[_a3] = true;\n        this.text = text2;\n        this.response = response;\n        this.usage = usage;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker3);\n    }\n};\n_a3 = symbol3;\n// util/download-error.ts\n\nvar name4 = \"AI_DownloadError\";\nvar marker4 = `vercel.ai.error.${name4}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4;\nvar DownloadError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ url, statusCode, statusText, cause, message = cause == null ? `Failed to download ${url}: ${statusCode} ${statusText}` : `Failed to download ${url}: ${cause}` }){\n        super({\n            name: name4,\n            message,\n            cause\n        });\n        this[_a4] = true;\n        this.url = url;\n        this.statusCode = statusCode;\n        this.statusText = statusText;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker4);\n    }\n};\n_a4 = symbol4;\n// util/download.ts\nasync function download({ url, fetchImplementation = fetch }) {\n    var _a13;\n    const urlText = url.toString();\n    try {\n        const response = await fetchImplementation(urlText);\n        if (!response.ok) {\n            throw new DownloadError({\n                url: urlText,\n                statusCode: response.status,\n                statusText: response.statusText\n            });\n        }\n        return {\n            data: new Uint8Array(await response.arrayBuffer()),\n            mimeType: (_a13 = response.headers.get(\"content-type\")) != null ? _a13 : void 0\n        };\n    } catch (error) {\n        if (DownloadError.isInstance(error)) {\n            throw error;\n        }\n        throw new DownloadError({\n            url: urlText,\n            cause: error\n        });\n    }\n}\n// core/util/detect-image-mimetype.ts\nvar mimeTypeSignatures = [\n    {\n        mimeType: \"image/gif\",\n        bytes: [\n            71,\n            73,\n            70\n        ]\n    },\n    {\n        mimeType: \"image/png\",\n        bytes: [\n            137,\n            80,\n            78,\n            71\n        ]\n    },\n    {\n        mimeType: \"image/jpeg\",\n        bytes: [\n            255,\n            216\n        ]\n    },\n    {\n        mimeType: \"image/webp\",\n        bytes: [\n            82,\n            73,\n            70,\n            70\n        ]\n    }\n];\nfunction detectImageMimeType(image) {\n    for (const { bytes, mimeType } of mimeTypeSignatures){\n        if (image.length >= bytes.length && bytes.every((byte, index)=>image[index] === byte)) {\n            return mimeType;\n        }\n    }\n    return void 0;\n}\n// core/prompt/data-content.ts\n\n// core/prompt/invalid-data-content-error.ts\n\nvar name5 = \"AI_InvalidDataContentError\";\nvar marker5 = `vercel.ai.error.${name5}`;\nvar symbol5 = Symbol.for(marker5);\nvar _a5;\nvar InvalidDataContentError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ content, cause, message = `Invalid data content. Expected a base64 string, Uint8Array, ArrayBuffer, or Buffer, but got ${typeof content}.` }){\n        super({\n            name: name5,\n            message,\n            cause\n        });\n        this[_a5] = true;\n        this.content = content;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker5);\n    }\n};\n_a5 = symbol5;\n// core/prompt/data-content.ts\n\nvar dataContentSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.instanceof(Uint8Array),\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.instanceof(ArrayBuffer),\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.custom(// Buffer might not be available in some environments such as CloudFlare:\n    (value)=>{\n        var _a13, _b;\n        return (_b = (_a13 = globalThis.Buffer) == null ? void 0 : _a13.isBuffer(value)) != null ? _b : false;\n    }, {\n        message: \"Must be a Buffer\"\n    })\n]);\nfunction convertDataContentToBase64String(content) {\n    if (typeof content === \"string\") {\n        return content;\n    }\n    if (content instanceof ArrayBuffer) {\n        return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertUint8ArrayToBase64)(new Uint8Array(content));\n    }\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertUint8ArrayToBase64)(content);\n}\nfunction convertDataContentToUint8Array(content) {\n    if (content instanceof Uint8Array) {\n        return content;\n    }\n    if (typeof content === \"string\") {\n        try {\n            return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertBase64ToUint8Array)(content);\n        } catch (error) {\n            throw new InvalidDataContentError({\n                message: \"Invalid data content. Content string is not a base64-encoded media.\",\n                content,\n                cause: error\n            });\n        }\n    }\n    if (content instanceof ArrayBuffer) {\n        return new Uint8Array(content);\n    }\n    throw new InvalidDataContentError({\n        content\n    });\n}\nfunction convertUint8ArrayToText(uint8Array) {\n    try {\n        return new TextDecoder().decode(uint8Array);\n    } catch (error) {\n        throw new Error(\"Error decoding Uint8Array to text\");\n    }\n}\n// core/prompt/invalid-message-role-error.ts\n\nvar name6 = \"AI_InvalidMessageRoleError\";\nvar marker6 = `vercel.ai.error.${name6}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6;\nvar InvalidMessageRoleError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ role, message = `Invalid message role: '${role}'. Must be one of: \"system\", \"user\", \"assistant\", \"tool\".` }){\n        super({\n            name: name6,\n            message\n        });\n        this[_a6] = true;\n        this.role = role;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker6);\n    }\n};\n_a6 = symbol6;\n// core/prompt/split-data-url.ts\nfunction splitDataUrl(dataUrl) {\n    try {\n        const [header, base64Content] = dataUrl.split(\",\");\n        return {\n            mimeType: header.split(\";\")[0].split(\":\")[1],\n            base64Content\n        };\n    } catch (error) {\n        return {\n            mimeType: void 0,\n            base64Content: void 0\n        };\n    }\n}\n// core/prompt/convert-to-language-model-prompt.ts\nasync function convertToLanguageModelPrompt({ prompt, modelSupportsImageUrls = true, modelSupportsUrl = ()=>false, downloadImplementation = download }) {\n    const downloadedAssets = await downloadAssets(prompt.messages, downloadImplementation, modelSupportsImageUrls, modelSupportsUrl);\n    return [\n        ...prompt.system != null ? [\n            {\n                role: \"system\",\n                content: prompt.system\n            }\n        ] : [],\n        ...prompt.messages.map((message)=>convertToLanguageModelMessage(message, downloadedAssets))\n    ];\n}\nfunction convertToLanguageModelMessage(message, downloadedAssets) {\n    const role = message.role;\n    switch(role){\n        case \"system\":\n            {\n                return {\n                    role: \"system\",\n                    content: message.content,\n                    providerMetadata: message.experimental_providerMetadata\n                };\n            }\n        case \"user\":\n            {\n                if (typeof message.content === \"string\") {\n                    return {\n                        role: \"user\",\n                        content: [\n                            {\n                                type: \"text\",\n                                text: message.content\n                            }\n                        ],\n                        providerMetadata: message.experimental_providerMetadata\n                    };\n                }\n                return {\n                    role: \"user\",\n                    content: message.content.map((part)=>convertPartToLanguageModelPart(part, downloadedAssets)).filter((part)=>part.type !== \"text\" || part.text !== \"\"),\n                    providerMetadata: message.experimental_providerMetadata\n                };\n            }\n        case \"assistant\":\n            {\n                if (typeof message.content === \"string\") {\n                    return {\n                        role: \"assistant\",\n                        content: [\n                            {\n                                type: \"text\",\n                                text: message.content\n                            }\n                        ],\n                        providerMetadata: message.experimental_providerMetadata\n                    };\n                }\n                return {\n                    role: \"assistant\",\n                    content: message.content.filter(// remove empty text parts:\n                    (part)=>part.type !== \"text\" || part.text !== \"\").map((part)=>{\n                        const { experimental_providerMetadata, ...rest } = part;\n                        return {\n                            ...rest,\n                            providerMetadata: experimental_providerMetadata\n                        };\n                    }),\n                    providerMetadata: message.experimental_providerMetadata\n                };\n            }\n        case \"tool\":\n            {\n                return {\n                    role: \"tool\",\n                    content: message.content.map((part)=>({\n                            type: \"tool-result\",\n                            toolCallId: part.toolCallId,\n                            toolName: part.toolName,\n                            result: part.result,\n                            content: part.experimental_content,\n                            isError: part.isError,\n                            providerMetadata: part.experimental_providerMetadata\n                        })),\n                    providerMetadata: message.experimental_providerMetadata\n                };\n            }\n        default:\n            {\n                const _exhaustiveCheck = role;\n                throw new InvalidMessageRoleError({\n                    role: _exhaustiveCheck\n                });\n            }\n    }\n}\nasync function downloadAssets(messages, downloadImplementation, modelSupportsImageUrls, modelSupportsUrl) {\n    const urls = messages.filter((message)=>message.role === \"user\").map((message)=>message.content).filter((content)=>Array.isArray(content)).flat().filter((part)=>part.type === \"image\" || part.type === \"file\").filter((part)=>!(part.type === \"image\" && modelSupportsImageUrls === true)).map((part)=>part.type === \"image\" ? part.image : part.data).map((part)=>// support string urls:\n        typeof part === \"string\" && (part.startsWith(\"http:\") || part.startsWith(\"https:\")) ? new URL(part) : part).filter((image)=>image instanceof URL).filter((url)=>!modelSupportsUrl(url));\n    const downloadedImages = await Promise.all(urls.map(async (url)=>({\n            url,\n            data: await downloadImplementation({\n                url\n            })\n        })));\n    return Object.fromEntries(downloadedImages.map(({ url, data })=>[\n            url.toString(),\n            data\n        ]));\n}\nfunction convertPartToLanguageModelPart(part, downloadedAssets) {\n    var _a13;\n    if (part.type === \"text\") {\n        return {\n            type: \"text\",\n            text: part.text,\n            providerMetadata: part.experimental_providerMetadata\n        };\n    }\n    let mimeType = part.mimeType;\n    let data;\n    let content;\n    let normalizedData;\n    const type = part.type;\n    switch(type){\n        case \"image\":\n            data = part.image;\n            break;\n        case \"file\":\n            data = part.data;\n            break;\n        default:\n            throw new Error(`Unsupported part type: ${type}`);\n    }\n    try {\n        content = typeof data === \"string\" ? new URL(data) : data;\n    } catch (error) {\n        content = data;\n    }\n    if (content instanceof URL) {\n        if (content.protocol === \"data:\") {\n            const { mimeType: dataUrlMimeType, base64Content } = splitDataUrl(content.toString());\n            if (dataUrlMimeType == null || base64Content == null) {\n                throw new Error(`Invalid data URL format in part ${type}`);\n            }\n            mimeType = dataUrlMimeType;\n            normalizedData = convertDataContentToUint8Array(base64Content);\n        } else {\n            const downloadedFile = downloadedAssets[content.toString()];\n            if (downloadedFile) {\n                normalizedData = downloadedFile.data;\n                mimeType != null ? mimeType : mimeType = downloadedFile.mimeType;\n            } else {\n                normalizedData = content;\n            }\n        }\n    } else {\n        normalizedData = convertDataContentToUint8Array(content);\n    }\n    switch(type){\n        case \"image\":\n            {\n                if (normalizedData instanceof Uint8Array) {\n                    mimeType = (_a13 = detectImageMimeType(normalizedData)) != null ? _a13 : mimeType;\n                }\n                return {\n                    type: \"image\",\n                    image: normalizedData,\n                    mimeType,\n                    providerMetadata: part.experimental_providerMetadata\n                };\n            }\n        case \"file\":\n            {\n                if (mimeType == null) {\n                    throw new Error(`Mime type is missing for file part`);\n                }\n                return {\n                    type: \"file\",\n                    data: normalizedData instanceof Uint8Array ? convertDataContentToBase64String(normalizedData) : normalizedData,\n                    mimeType,\n                    providerMetadata: part.experimental_providerMetadata\n                };\n            }\n    }\n}\n// core/prompt/prepare-call-settings.ts\nfunction prepareCallSettings({ maxTokens, temperature, topP, topK, presencePenalty, frequencyPenalty, stopSequences, seed }) {\n    if (maxTokens != null) {\n        if (!Number.isInteger(maxTokens)) {\n            throw new InvalidArgumentError({\n                parameter: \"maxTokens\",\n                value: maxTokens,\n                message: \"maxTokens must be an integer\"\n            });\n        }\n        if (maxTokens < 1) {\n            throw new InvalidArgumentError({\n                parameter: \"maxTokens\",\n                value: maxTokens,\n                message: \"maxTokens must be >= 1\"\n            });\n        }\n    }\n    if (temperature != null) {\n        if (typeof temperature !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"temperature\",\n                value: temperature,\n                message: \"temperature must be a number\"\n            });\n        }\n    }\n    if (topP != null) {\n        if (typeof topP !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"topP\",\n                value: topP,\n                message: \"topP must be a number\"\n            });\n        }\n    }\n    if (topK != null) {\n        if (typeof topK !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"topK\",\n                value: topK,\n                message: \"topK must be a number\"\n            });\n        }\n    }\n    if (presencePenalty != null) {\n        if (typeof presencePenalty !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"presencePenalty\",\n                value: presencePenalty,\n                message: \"presencePenalty must be a number\"\n            });\n        }\n    }\n    if (frequencyPenalty != null) {\n        if (typeof frequencyPenalty !== \"number\") {\n            throw new InvalidArgumentError({\n                parameter: \"frequencyPenalty\",\n                value: frequencyPenalty,\n                message: \"frequencyPenalty must be a number\"\n            });\n        }\n    }\n    if (seed != null) {\n        if (!Number.isInteger(seed)) {\n            throw new InvalidArgumentError({\n                parameter: \"seed\",\n                value: seed,\n                message: \"seed must be an integer\"\n            });\n        }\n    }\n    return {\n        maxTokens,\n        temperature: temperature != null ? temperature : 0,\n        topP,\n        topK,\n        presencePenalty,\n        frequencyPenalty,\n        stopSequences: stopSequences != null && stopSequences.length > 0 ? stopSequences : void 0,\n        seed\n    };\n}\n// core/prompt/standardize-prompt.ts\n\n\n\n// core/prompt/message.ts\n\n// core/types/provider-metadata.ts\n\n// core/types/json-value.ts\n\nvar jsonValueSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.lazy(()=>zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.null(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.number(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.record(zod__WEBPACK_IMPORTED_MODULE_4__.z.string(), jsonValueSchema),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.array(jsonValueSchema)\n    ]));\n// core/types/provider-metadata.ts\nvar providerMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.record(zod__WEBPACK_IMPORTED_MODULE_4__.z.string(), zod__WEBPACK_IMPORTED_MODULE_4__.z.record(zod__WEBPACK_IMPORTED_MODULE_4__.z.string(), jsonValueSchema));\n// core/prompt/content-part.ts\n\n// core/prompt/tool-result-content.ts\n\nvar toolResultContentSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"text\"),\n        text: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n    }),\n    zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"image\"),\n        data: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        mimeType: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional()\n    })\n]));\n// core/prompt/content-part.ts\nvar textPartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"text\"),\n    text: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar imagePartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"image\"),\n    image: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        dataContentSchema,\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.instanceof(URL)\n    ]),\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar filePartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"file\"),\n    data: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        dataContentSchema,\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.instanceof(URL)\n    ]),\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar toolCallPartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"tool-call\"),\n    toolCallId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    toolName: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    args: zod__WEBPACK_IMPORTED_MODULE_4__.z.unknown()\n});\nvar toolResultPartSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"tool-result\"),\n    toolCallId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    toolName: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    result: zod__WEBPACK_IMPORTED_MODULE_4__.z.unknown(),\n    content: toolResultContentSchema.optional(),\n    isError: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean().optional(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\n// core/prompt/message.ts\nvar coreSystemMessageSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"system\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreUserMessageSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"user\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n            textPartSchema,\n            imagePartSchema,\n            filePartSchema\n        ]))\n    ]),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreAssistantMessageSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"assistant\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n            textPartSchema,\n            toolCallPartSchema\n        ]))\n    ]),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreToolMessageSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_4__.z.literal(\"tool\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(toolResultPartSchema),\n    experimental_providerMetadata: providerMetadataSchema.optional()\n});\nvar coreMessageSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n    coreSystemMessageSchema,\n    coreUserMessageSchema,\n    coreAssistantMessageSchema,\n    coreToolMessageSchema\n]);\n// core/prompt/detect-prompt-type.ts\nfunction detectPromptType(prompt) {\n    if (!Array.isArray(prompt)) {\n        return \"other\";\n    }\n    if (prompt.length === 0) {\n        return \"messages\";\n    }\n    const characteristics = prompt.map(detectSingleMessageCharacteristics);\n    if (characteristics.some((c)=>c === \"has-ui-specific-parts\")) {\n        return \"ui-messages\";\n    } else if (characteristics.every((c)=>c === \"has-core-specific-parts\" || c === \"message\")) {\n        return \"messages\";\n    } else {\n        return \"other\";\n    }\n}\nfunction detectSingleMessageCharacteristics(message) {\n    if (typeof message === \"object\" && message !== null && (message.role === \"function\" || // UI-only role\n    message.role === \"data\" || // UI-only role\n    \"toolInvocations\" in message || // UI-specific field\n    \"experimental_attachments\" in message)) {\n        return \"has-ui-specific-parts\";\n    } else if (typeof message === \"object\" && message !== null && \"content\" in message && (Array.isArray(message.content) || // Core messages can have array content\n    \"experimental_providerMetadata\" in message)) {\n        return \"has-core-specific-parts\";\n    } else if (typeof message === \"object\" && message !== null && \"role\" in message && \"content\" in message && typeof message.content === \"string\" && [\n        \"system\",\n        \"user\",\n        \"assistant\",\n        \"tool\"\n    ].includes(message.role)) {\n        return \"message\";\n    } else {\n        return \"other\";\n    }\n}\n// core/prompt/attachments-to-parts.ts\nfunction attachmentsToParts(attachments) {\n    var _a13, _b, _c;\n    const parts = [];\n    for (const attachment of attachments){\n        let url;\n        try {\n            url = new URL(attachment.url);\n        } catch (error) {\n            throw new Error(`Invalid URL: ${attachment.url}`);\n        }\n        switch(url.protocol){\n            case \"http:\":\n            case \"https:\":\n                {\n                    if ((_a13 = attachment.contentType) == null ? void 0 : _a13.startsWith(\"image/\")) {\n                        parts.push({\n                            type: \"image\",\n                            image: url\n                        });\n                    } else {\n                        if (!attachment.contentType) {\n                            throw new Error(\"If the attachment is not an image, it must specify a content type\");\n                        }\n                        parts.push({\n                            type: \"file\",\n                            data: url,\n                            mimeType: attachment.contentType\n                        });\n                    }\n                    break;\n                }\n            case \"data:\":\n                {\n                    let header;\n                    let base64Content;\n                    let mimeType;\n                    try {\n                        [header, base64Content] = attachment.url.split(\",\");\n                        mimeType = header.split(\";\")[0].split(\":\")[1];\n                    } catch (error) {\n                        throw new Error(`Error processing data URL: ${attachment.url}`);\n                    }\n                    if (mimeType == null || base64Content == null) {\n                        throw new Error(`Invalid data URL format: ${attachment.url}`);\n                    }\n                    if ((_b = attachment.contentType) == null ? void 0 : _b.startsWith(\"image/\")) {\n                        parts.push({\n                            type: \"image\",\n                            image: convertDataContentToUint8Array(base64Content)\n                        });\n                    } else if ((_c = attachment.contentType) == null ? void 0 : _c.startsWith(\"text/\")) {\n                        parts.push({\n                            type: \"text\",\n                            text: convertUint8ArrayToText(convertDataContentToUint8Array(base64Content))\n                        });\n                    } else {\n                        if (!attachment.contentType) {\n                            throw new Error(\"If the attachment is not an image or text, it must specify a content type\");\n                        }\n                        parts.push({\n                            type: \"file\",\n                            data: base64Content,\n                            mimeType: attachment.contentType\n                        });\n                    }\n                    break;\n                }\n            default:\n                {\n                    throw new Error(`Unsupported URL protocol: ${url.protocol}`);\n                }\n        }\n    }\n    return parts;\n}\n// core/prompt/message-conversion-error.ts\n\nvar name7 = \"AI_MessageConversionError\";\nvar marker7 = `vercel.ai.error.${name7}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7;\nvar MessageConversionError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ originalMessage, message }){\n        super({\n            name: name7,\n            message\n        });\n        this[_a7] = true;\n        this.originalMessage = originalMessage;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker7);\n    }\n};\n_a7 = symbol7;\n// core/prompt/convert-to-core-messages.ts\nfunction convertToCoreMessages(messages, options) {\n    var _a13;\n    const tools = (_a13 = options == null ? void 0 : options.tools) != null ? _a13 : {};\n    const coreMessages = [];\n    for (const message of messages){\n        const { role, content, toolInvocations, experimental_attachments } = message;\n        switch(role){\n            case \"system\":\n                {\n                    coreMessages.push({\n                        role: \"system\",\n                        content\n                    });\n                    break;\n                }\n            case \"user\":\n                {\n                    coreMessages.push({\n                        role: \"user\",\n                        content: experimental_attachments ? [\n                            {\n                                type: \"text\",\n                                text: content\n                            },\n                            ...attachmentsToParts(experimental_attachments)\n                        ] : content\n                    });\n                    break;\n                }\n            case \"assistant\":\n                {\n                    if (toolInvocations == null) {\n                        coreMessages.push({\n                            role: \"assistant\",\n                            content\n                        });\n                        break;\n                    }\n                    coreMessages.push({\n                        role: \"assistant\",\n                        content: [\n                            {\n                                type: \"text\",\n                                text: content\n                            },\n                            ...toolInvocations.map(({ toolCallId, toolName, args })=>({\n                                    type: \"tool-call\",\n                                    toolCallId,\n                                    toolName,\n                                    args\n                                }))\n                        ]\n                    });\n                    coreMessages.push({\n                        role: \"tool\",\n                        content: toolInvocations.map((toolInvocation)=>{\n                            if (!(\"result\" in toolInvocation)) {\n                                throw new MessageConversionError({\n                                    originalMessage: message,\n                                    message: \"ToolInvocation must have a result: \" + JSON.stringify(toolInvocation)\n                                });\n                            }\n                            const { toolCallId, toolName, result } = toolInvocation;\n                            const tool2 = tools[toolName];\n                            return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {\n                                type: \"tool-result\",\n                                toolCallId,\n                                toolName,\n                                result: tool2.experimental_toToolResultContent(result),\n                                experimental_content: tool2.experimental_toToolResultContent(result)\n                            } : {\n                                type: \"tool-result\",\n                                toolCallId,\n                                toolName,\n                                result\n                            };\n                        })\n                    });\n                    break;\n                }\n            case \"data\":\n                {\n                    break;\n                }\n            default:\n                {\n                    const _exhaustiveCheck = role;\n                    throw new MessageConversionError({\n                        originalMessage: message,\n                        message: `Unsupported role: ${_exhaustiveCheck}`\n                    });\n                }\n        }\n    }\n    return coreMessages;\n}\n// core/prompt/standardize-prompt.ts\nfunction standardizePrompt({ prompt, tools }) {\n    if (prompt.prompt == null && prompt.messages == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n            prompt,\n            message: \"prompt or messages must be defined\"\n        });\n    }\n    if (prompt.prompt != null && prompt.messages != null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n            prompt,\n            message: \"prompt and messages cannot be defined at the same time\"\n        });\n    }\n    if (prompt.system != null && typeof prompt.system !== \"string\") {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n            prompt,\n            message: \"system must be a string\"\n        });\n    }\n    if (prompt.prompt != null) {\n        if (typeof prompt.prompt !== \"string\") {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n                prompt,\n                message: \"prompt must be a string\"\n            });\n        }\n        return {\n            type: \"prompt\",\n            system: prompt.system,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt.prompt\n                }\n            ]\n        };\n    }\n    if (prompt.messages != null) {\n        const promptType = detectPromptType(prompt.messages);\n        if (promptType === \"other\") {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n                prompt,\n                message: \"messages must be an array of CoreMessage or UIMessage\"\n            });\n        }\n        const messages = promptType === \"ui-messages\" ? convertToCoreMessages(prompt.messages, {\n            tools\n        }) : prompt.messages;\n        const validationResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n            value: messages,\n            schema: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(coreMessageSchema)\n        });\n        if (!validationResult.success) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n                prompt,\n                message: \"messages must be an array of CoreMessage or UIMessage\",\n                cause: validationResult.error\n            });\n        }\n        return {\n            type: \"messages\",\n            messages,\n            system: prompt.system\n        };\n    }\n    throw new Error(\"unreachable\");\n}\n// core/types/usage.ts\nfunction calculateLanguageModelUsage({ promptTokens, completionTokens }) {\n    return {\n        promptTokens,\n        completionTokens,\n        totalTokens: promptTokens + completionTokens\n    };\n}\nfunction addLanguageModelUsage(usage1, usage2) {\n    return {\n        promptTokens: usage1.promptTokens + usage2.promptTokens,\n        completionTokens: usage1.completionTokens + usage2.completionTokens,\n        totalTokens: usage1.totalTokens + usage2.totalTokens\n    };\n}\n// core/generate-object/inject-json-instruction.ts\nvar DEFAULT_SCHEMA_PREFIX = \"JSON schema:\";\nvar DEFAULT_SCHEMA_SUFFIX = \"You MUST answer with a JSON object that matches the JSON schema above.\";\nvar DEFAULT_GENERIC_SUFFIX = \"You MUST answer with JSON.\";\nfunction injectJsonInstruction({ prompt, schema, schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : void 0, schemaSuffix = schema != null ? DEFAULT_SCHEMA_SUFFIX : DEFAULT_GENERIC_SUFFIX }) {\n    return [\n        prompt != null && prompt.length > 0 ? prompt : void 0,\n        prompt != null && prompt.length > 0 ? \"\" : void 0,\n        // add a newline if prompt is not null\n        schemaPrefix,\n        schema != null ? JSON.stringify(schema) : void 0,\n        schemaSuffix\n    ].filter((line)=>line != null).join(\"\\n\");\n}\n// core/generate-object/output-strategy.ts\n\n\n\n// core/util/async-iterable-stream.ts\nfunction createAsyncIterableStream(source) {\n    const stream = source.pipeThrough(new TransformStream());\n    stream[Symbol.asyncIterator] = ()=>{\n        const reader = stream.getReader();\n        return {\n            async next () {\n                const { done, value } = await reader.read();\n                return done ? {\n                    done: true,\n                    value: void 0\n                } : {\n                    done: false,\n                    value\n                };\n            }\n        };\n    };\n    return stream;\n}\n// core/generate-object/output-strategy.ts\nvar noSchemaOutputStrategy = {\n    type: \"no-schema\",\n    jsonSchema: void 0,\n    validatePartialResult ({ value, textDelta }) {\n        return {\n            success: true,\n            value: {\n                partial: value,\n                textDelta\n            }\n        };\n    },\n    validateFinalResult (value, context) {\n        return value === void 0 ? {\n            success: false,\n            error: new NoObjectGeneratedError({\n                message: \"No object generated: response did not match schema.\",\n                text: context.text,\n                response: context.response,\n                usage: context.usage\n            })\n        } : {\n            success: true,\n            value\n        };\n    },\n    createElementStream () {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n            functionality: \"element streams in no-schema mode\"\n        });\n    }\n};\nvar objectOutputStrategy = (schema)=>({\n        type: \"object\",\n        jsonSchema: schema.jsonSchema,\n        validatePartialResult ({ value, textDelta }) {\n            return {\n                success: true,\n                value: {\n                    // Note: currently no validation of partial results:\n                    partial: value,\n                    textDelta\n                }\n            };\n        },\n        validateFinalResult (value) {\n            return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n                value,\n                schema\n            });\n        },\n        createElementStream () {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                functionality: \"element streams in object mode\"\n            });\n        }\n    });\nvar arrayOutputStrategy = (schema)=>{\n    const { $schema, ...itemSchema } = schema.jsonSchema;\n    return {\n        type: \"enum\",\n        // wrap in object that contains array of elements, since most LLMs will not\n        // be able to generate an array directly:\n        // possible future optimization: use arrays directly when model supports grammar-guided generation\n        jsonSchema: {\n            $schema: \"http://json-schema.org/draft-07/schema#\",\n            type: \"object\",\n            properties: {\n                elements: {\n                    type: \"array\",\n                    items: itemSchema\n                }\n            },\n            required: [\n                \"elements\"\n            ],\n            additionalProperties: false\n        },\n        validatePartialResult ({ value, latestObject, isFirstDelta, isFinalDelta }) {\n            var _a13;\n            if (!(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.isJSONObject)(value) || !(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.isJSONArray)(value.elements)) {\n                return {\n                    success: false,\n                    error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError({\n                        value,\n                        cause: \"value must be an object that contains an array of elements\"\n                    })\n                };\n            }\n            const inputArray = value.elements;\n            const resultArray = [];\n            for(let i = 0; i < inputArray.length; i++){\n                const element = inputArray[i];\n                const result = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n                    value: element,\n                    schema\n                });\n                if (i === inputArray.length - 1 && !isFinalDelta) {\n                    continue;\n                }\n                if (!result.success) {\n                    return result;\n                }\n                resultArray.push(result.value);\n            }\n            const publishedElementCount = (_a13 = latestObject == null ? void 0 : latestObject.length) != null ? _a13 : 0;\n            let textDelta = \"\";\n            if (isFirstDelta) {\n                textDelta += \"[\";\n            }\n            if (publishedElementCount > 0) {\n                textDelta += \",\";\n            }\n            textDelta += resultArray.slice(publishedElementCount).map((element)=>JSON.stringify(element)).join(\",\");\n            if (isFinalDelta) {\n                textDelta += \"]\";\n            }\n            return {\n                success: true,\n                value: {\n                    partial: resultArray,\n                    textDelta\n                }\n            };\n        },\n        validateFinalResult (value) {\n            if (!(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.isJSONObject)(value) || !(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.isJSONArray)(value.elements)) {\n                return {\n                    success: false,\n                    error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError({\n                        value,\n                        cause: \"value must be an object that contains an array of elements\"\n                    })\n                };\n            }\n            const inputArray = value.elements;\n            for (const element of inputArray){\n                const result = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n                    value: element,\n                    schema\n                });\n                if (!result.success) {\n                    return result;\n                }\n            }\n            return {\n                success: true,\n                value: inputArray\n            };\n        },\n        createElementStream (originalStream) {\n            let publishedElements = 0;\n            return createAsyncIterableStream(originalStream.pipeThrough(new TransformStream({\n                transform (chunk, controller) {\n                    switch(chunk.type){\n                        case \"object\":\n                            {\n                                const array = chunk.object;\n                                for(; publishedElements < array.length; publishedElements++){\n                                    controller.enqueue(array[publishedElements]);\n                                }\n                                break;\n                            }\n                        case \"text-delta\":\n                        case \"finish\":\n                            break;\n                        case \"error\":\n                            controller.error(chunk.error);\n                            break;\n                        default:\n                            {\n                                const _exhaustiveCheck = chunk;\n                                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n                            }\n                    }\n                }\n            })));\n        }\n    };\n};\nvar enumOutputStrategy = (enumValues)=>{\n    return {\n        type: \"enum\",\n        // wrap in object that contains result, since most LLMs will not\n        // be able to generate an enum value directly:\n        // possible future optimization: use enums directly when model supports top-level enums\n        jsonSchema: {\n            $schema: \"http://json-schema.org/draft-07/schema#\",\n            type: \"object\",\n            properties: {\n                result: {\n                    type: \"string\",\n                    enum: enumValues\n                }\n            },\n            required: [\n                \"result\"\n            ],\n            additionalProperties: false\n        },\n        validateFinalResult (value) {\n            if (!(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.isJSONObject)(value) || typeof value.result !== \"string\") {\n                return {\n                    success: false,\n                    error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError({\n                        value,\n                        cause: 'value must be an object that contains a string in the \"result\" property.'\n                    })\n                };\n            }\n            const result = value.result;\n            return enumValues.includes(result) ? {\n                success: true,\n                value: result\n            } : {\n                success: false,\n                error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError({\n                    value,\n                    cause: \"value must be a string in the enum\"\n                })\n            };\n        },\n        validatePartialResult () {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                functionality: \"partial results in enum mode\"\n            });\n        },\n        createElementStream () {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError({\n                functionality: \"element streams in enum mode\"\n            });\n        }\n    };\n};\nfunction getOutputStrategy({ output, schema, enumValues }) {\n    switch(output){\n        case \"object\":\n            return objectOutputStrategy((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(schema));\n        case \"array\":\n            return arrayOutputStrategy((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(schema));\n        case \"enum\":\n            return enumOutputStrategy(enumValues);\n        case \"no-schema\":\n            return noSchemaOutputStrategy;\n        default:\n            {\n                const _exhaustiveCheck = output;\n                throw new Error(`Unsupported output: ${_exhaustiveCheck}`);\n            }\n    }\n}\n// core/generate-object/validate-object-generation-input.ts\nfunction validateObjectGenerationInput({ output, mode, schema, schemaName, schemaDescription, enumValues }) {\n    if (output != null && output !== \"object\" && output !== \"array\" && output !== \"enum\" && output !== \"no-schema\") {\n        throw new InvalidArgumentError({\n            parameter: \"output\",\n            value: output,\n            message: \"Invalid output type.\"\n        });\n    }\n    if (output === \"no-schema\") {\n        if (mode === \"auto\" || mode === \"tool\") {\n            throw new InvalidArgumentError({\n                parameter: \"mode\",\n                value: mode,\n                message: 'Mode must be \"json\" for no-schema output.'\n            });\n        }\n        if (schema != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Schema is not supported for no-schema output.\"\n            });\n        }\n        if (schemaDescription != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaDescription\",\n                value: schemaDescription,\n                message: \"Schema description is not supported for no-schema output.\"\n            });\n        }\n        if (schemaName != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaName\",\n                value: schemaName,\n                message: \"Schema name is not supported for no-schema output.\"\n            });\n        }\n        if (enumValues != null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are not supported for no-schema output.\"\n            });\n        }\n    }\n    if (output === \"object\") {\n        if (schema == null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Schema is required for object output.\"\n            });\n        }\n        if (enumValues != null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are not supported for object output.\"\n            });\n        }\n    }\n    if (output === \"array\") {\n        if (schema == null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Element schema is required for array output.\"\n            });\n        }\n        if (enumValues != null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are not supported for array output.\"\n            });\n        }\n    }\n    if (output === \"enum\") {\n        if (schema != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schema\",\n                value: schema,\n                message: \"Schema is not supported for enum output.\"\n            });\n        }\n        if (schemaDescription != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaDescription\",\n                value: schemaDescription,\n                message: \"Schema description is not supported for enum output.\"\n            });\n        }\n        if (schemaName != null) {\n            throw new InvalidArgumentError({\n                parameter: \"schemaName\",\n                value: schemaName,\n                message: \"Schema name is not supported for enum output.\"\n            });\n        }\n        if (enumValues == null) {\n            throw new InvalidArgumentError({\n                parameter: \"enumValues\",\n                value: enumValues,\n                message: \"Enum values are required for enum output.\"\n            });\n        }\n        for (const value of enumValues){\n            if (typeof value !== \"string\") {\n                throw new InvalidArgumentError({\n                    parameter: \"enumValues\",\n                    value,\n                    message: \"Enum values must be strings.\"\n                });\n            }\n        }\n    }\n}\n// core/generate-object/generate-object.ts\nvar originalGenerateId = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createIdGenerator)({\n    prefix: \"aiobj\",\n    size: 24\n});\nasync function generateObject({ model, enum: enumValues, // rename bc enum is reserved by typescript\nschema: inputSchema, schemaName, schemaDescription, mode, output = \"object\", system, prompt, messages, maxRetries: maxRetriesArg, abortSignal, headers, experimental_telemetry: telemetry, experimental_providerMetadata: providerMetadata, _internal: { generateId: generateId3 = originalGenerateId, currentDate = ()=>/* @__PURE__ */ new Date() } = {}, ...settings }) {\n    validateObjectGenerationInput({\n        output,\n        mode,\n        schema: inputSchema,\n        schemaName,\n        schemaDescription,\n        enumValues\n    });\n    const { maxRetries, retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const outputStrategy = getOutputStrategy({\n        output,\n        schema: inputSchema,\n        enumValues\n    });\n    if (outputStrategy.type === \"no-schema\" && mode === void 0) {\n        mode = \"json\";\n    }\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            ...settings,\n            maxRetries\n        }\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.generateObject\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.generateObject\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                \"ai.prompt\": {\n                    input: ()=>JSON.stringify({\n                            system,\n                            prompt,\n                            messages\n                        })\n                },\n                \"ai.schema\": outputStrategy.jsonSchema != null ? {\n                    input: ()=>JSON.stringify(outputStrategy.jsonSchema)\n                } : void 0,\n                \"ai.schema.name\": schemaName,\n                \"ai.schema.description\": schemaDescription,\n                \"ai.settings.output\": outputStrategy.type,\n                \"ai.settings.mode\": mode\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            var _a13, _b;\n            if (mode === \"auto\" || mode == null) {\n                mode = model.defaultObjectGenerationMode;\n            }\n            let result;\n            let finishReason;\n            let usage;\n            let warnings;\n            let rawResponse;\n            let response;\n            let request;\n            let logprobs;\n            let resultProviderMetadata;\n            switch(mode){\n                case \"json\":\n                    {\n                        const standardizedPrompt = standardizePrompt({\n                            prompt: {\n                                system: outputStrategy.jsonSchema == null ? injectJsonInstruction({\n                                    prompt: system\n                                }) : model.supportsStructuredOutputs ? system : injectJsonInstruction({\n                                    prompt: system,\n                                    schema: outputStrategy.jsonSchema\n                                }),\n                                prompt,\n                                messages\n                            },\n                            tools: void 0\n                        });\n                        const promptMessages = await convertToLanguageModelPrompt({\n                            prompt: standardizedPrompt,\n                            modelSupportsImageUrls: model.supportsImageUrls,\n                            modelSupportsUrl: model.supportsUrl\n                        });\n                        const generateResult = await retry(()=>recordSpan({\n                                name: \"ai.generateObject.doGenerate\",\n                                attributes: selectTelemetryAttributes({\n                                    telemetry,\n                                    attributes: {\n                                        ...assembleOperationName({\n                                            operationId: \"ai.generateObject.doGenerate\",\n                                            telemetry\n                                        }),\n                                        ...baseTelemetryAttributes,\n                                        \"ai.prompt.format\": {\n                                            input: ()=>standardizedPrompt.type\n                                        },\n                                        \"ai.prompt.messages\": {\n                                            input: ()=>JSON.stringify(promptMessages)\n                                        },\n                                        \"ai.settings.mode\": mode,\n                                        // standardized gen-ai llm span attributes:\n                                        \"gen_ai.system\": model.provider,\n                                        \"gen_ai.request.model\": model.modelId,\n                                        \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                        \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                        \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                        \"gen_ai.request.temperature\": settings.temperature,\n                                        \"gen_ai.request.top_k\": settings.topK,\n                                        \"gen_ai.request.top_p\": settings.topP\n                                    }\n                                }),\n                                tracer,\n                                fn: async (span2)=>{\n                                    var _a14, _b2, _c, _d, _e, _f;\n                                    const result2 = await model.doGenerate({\n                                        mode: {\n                                            type: \"object-json\",\n                                            schema: outputStrategy.jsonSchema,\n                                            name: schemaName,\n                                            description: schemaDescription\n                                        },\n                                        ...prepareCallSettings(settings),\n                                        inputFormat: standardizedPrompt.type,\n                                        prompt: promptMessages,\n                                        providerMetadata,\n                                        abortSignal,\n                                        headers\n                                    });\n                                    const responseData = {\n                                        id: (_b2 = (_a14 = result2.response) == null ? void 0 : _a14.id) != null ? _b2 : generateId3(),\n                                        timestamp: (_d = (_c = result2.response) == null ? void 0 : _c.timestamp) != null ? _d : currentDate(),\n                                        modelId: (_f = (_e = result2.response) == null ? void 0 : _e.modelId) != null ? _f : model.modelId\n                                    };\n                                    if (result2.text === void 0) {\n                                        throw new NoObjectGeneratedError({\n                                            message: \"No object generated: the model did not return a response.\",\n                                            response: responseData,\n                                            usage: calculateLanguageModelUsage(result2.usage)\n                                        });\n                                    }\n                                    span2.setAttributes(selectTelemetryAttributes({\n                                        telemetry,\n                                        attributes: {\n                                            \"ai.response.finishReason\": result2.finishReason,\n                                            \"ai.response.object\": {\n                                                output: ()=>result2.text\n                                            },\n                                            \"ai.response.id\": responseData.id,\n                                            \"ai.response.model\": responseData.modelId,\n                                            \"ai.response.timestamp\": responseData.timestamp.toISOString(),\n                                            \"ai.usage.promptTokens\": result2.usage.promptTokens,\n                                            \"ai.usage.completionTokens\": result2.usage.completionTokens,\n                                            // standardized gen-ai llm span attributes:\n                                            \"gen_ai.response.finish_reasons\": [\n                                                result2.finishReason\n                                            ],\n                                            \"gen_ai.response.id\": responseData.id,\n                                            \"gen_ai.response.model\": responseData.modelId,\n                                            \"gen_ai.usage.prompt_tokens\": result2.usage.promptTokens,\n                                            \"gen_ai.usage.completion_tokens\": result2.usage.completionTokens\n                                        }\n                                    }));\n                                    return {\n                                        ...result2,\n                                        objectText: result2.text,\n                                        responseData\n                                    };\n                                }\n                            }));\n                        result = generateResult.objectText;\n                        finishReason = generateResult.finishReason;\n                        usage = generateResult.usage;\n                        warnings = generateResult.warnings;\n                        rawResponse = generateResult.rawResponse;\n                        logprobs = generateResult.logprobs;\n                        resultProviderMetadata = generateResult.providerMetadata;\n                        request = (_a13 = generateResult.request) != null ? _a13 : {};\n                        response = generateResult.responseData;\n                        break;\n                    }\n                case \"tool\":\n                    {\n                        const standardizedPrompt = standardizePrompt({\n                            prompt: {\n                                system,\n                                prompt,\n                                messages\n                            },\n                            tools: void 0\n                        });\n                        const promptMessages = await convertToLanguageModelPrompt({\n                            prompt: standardizedPrompt,\n                            modelSupportsImageUrls: model.supportsImageUrls,\n                            modelSupportsUrl: model.supportsUrl\n                        });\n                        const inputFormat = standardizedPrompt.type;\n                        const generateResult = await retry(()=>recordSpan({\n                                name: \"ai.generateObject.doGenerate\",\n                                attributes: selectTelemetryAttributes({\n                                    telemetry,\n                                    attributes: {\n                                        ...assembleOperationName({\n                                            operationId: \"ai.generateObject.doGenerate\",\n                                            telemetry\n                                        }),\n                                        ...baseTelemetryAttributes,\n                                        \"ai.prompt.format\": {\n                                            input: ()=>inputFormat\n                                        },\n                                        \"ai.prompt.messages\": {\n                                            input: ()=>JSON.stringify(promptMessages)\n                                        },\n                                        \"ai.settings.mode\": mode,\n                                        // standardized gen-ai llm span attributes:\n                                        \"gen_ai.system\": model.provider,\n                                        \"gen_ai.request.model\": model.modelId,\n                                        \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                        \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                        \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                        \"gen_ai.request.temperature\": settings.temperature,\n                                        \"gen_ai.request.top_k\": settings.topK,\n                                        \"gen_ai.request.top_p\": settings.topP\n                                    }\n                                }),\n                                tracer,\n                                fn: async (span2)=>{\n                                    var _a14, _b2, _c, _d, _e, _f, _g, _h;\n                                    const result2 = await model.doGenerate({\n                                        mode: {\n                                            type: \"object-tool\",\n                                            tool: {\n                                                type: \"function\",\n                                                name: schemaName != null ? schemaName : \"json\",\n                                                description: schemaDescription != null ? schemaDescription : \"Respond with a JSON object.\",\n                                                parameters: outputStrategy.jsonSchema\n                                            }\n                                        },\n                                        ...prepareCallSettings(settings),\n                                        inputFormat,\n                                        prompt: promptMessages,\n                                        providerMetadata,\n                                        abortSignal,\n                                        headers\n                                    });\n                                    const objectText = (_b2 = (_a14 = result2.toolCalls) == null ? void 0 : _a14[0]) == null ? void 0 : _b2.args;\n                                    const responseData = {\n                                        id: (_d = (_c = result2.response) == null ? void 0 : _c.id) != null ? _d : generateId3(),\n                                        timestamp: (_f = (_e = result2.response) == null ? void 0 : _e.timestamp) != null ? _f : currentDate(),\n                                        modelId: (_h = (_g = result2.response) == null ? void 0 : _g.modelId) != null ? _h : model.modelId\n                                    };\n                                    if (objectText === void 0) {\n                                        throw new NoObjectGeneratedError({\n                                            message: \"No object generated: the tool was not called.\",\n                                            response: responseData,\n                                            usage: calculateLanguageModelUsage(result2.usage)\n                                        });\n                                    }\n                                    span2.setAttributes(selectTelemetryAttributes({\n                                        telemetry,\n                                        attributes: {\n                                            \"ai.response.finishReason\": result2.finishReason,\n                                            \"ai.response.object\": {\n                                                output: ()=>objectText\n                                            },\n                                            \"ai.response.id\": responseData.id,\n                                            \"ai.response.model\": responseData.modelId,\n                                            \"ai.response.timestamp\": responseData.timestamp.toISOString(),\n                                            \"ai.usage.promptTokens\": result2.usage.promptTokens,\n                                            \"ai.usage.completionTokens\": result2.usage.completionTokens,\n                                            // standardized gen-ai llm span attributes:\n                                            \"gen_ai.response.finish_reasons\": [\n                                                result2.finishReason\n                                            ],\n                                            \"gen_ai.response.id\": responseData.id,\n                                            \"gen_ai.response.model\": responseData.modelId,\n                                            \"gen_ai.usage.input_tokens\": result2.usage.promptTokens,\n                                            \"gen_ai.usage.output_tokens\": result2.usage.completionTokens\n                                        }\n                                    }));\n                                    return {\n                                        ...result2,\n                                        objectText,\n                                        responseData\n                                    };\n                                }\n                            }));\n                        result = generateResult.objectText;\n                        finishReason = generateResult.finishReason;\n                        usage = generateResult.usage;\n                        warnings = generateResult.warnings;\n                        rawResponse = generateResult.rawResponse;\n                        logprobs = generateResult.logprobs;\n                        resultProviderMetadata = generateResult.providerMetadata;\n                        request = (_b = generateResult.request) != null ? _b : {};\n                        response = generateResult.responseData;\n                        break;\n                    }\n                case void 0:\n                    {\n                        throw new Error(\"Model does not have a default object generation mode.\");\n                    }\n                default:\n                    {\n                        const _exhaustiveCheck = mode;\n                        throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);\n                    }\n            }\n            const parseResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)({\n                text: result\n            });\n            if (!parseResult.success) {\n                throw new NoObjectGeneratedError({\n                    message: \"No object generated: could not parse the response.\",\n                    cause: parseResult.error,\n                    text: result,\n                    response,\n                    usage: calculateLanguageModelUsage(usage)\n                });\n            }\n            const validationResult = outputStrategy.validateFinalResult(parseResult.value, {\n                text: result,\n                response,\n                usage: calculateLanguageModelUsage(usage)\n            });\n            if (!validationResult.success) {\n                throw new NoObjectGeneratedError({\n                    message: \"No object generated: response did not match schema.\",\n                    cause: validationResult.error,\n                    text: result,\n                    response,\n                    usage: calculateLanguageModelUsage(usage)\n                });\n            }\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.response.finishReason\": finishReason,\n                    \"ai.response.object\": {\n                        output: ()=>JSON.stringify(validationResult.value)\n                    },\n                    \"ai.usage.promptTokens\": usage.promptTokens,\n                    \"ai.usage.completionTokens\": usage.completionTokens\n                }\n            }));\n            return new DefaultGenerateObjectResult({\n                object: validationResult.value,\n                finishReason,\n                usage: calculateLanguageModelUsage(usage),\n                warnings,\n                request,\n                response: {\n                    ...response,\n                    headers: rawResponse == null ? void 0 : rawResponse.headers\n                },\n                logprobs,\n                providerMetadata: resultProviderMetadata\n            });\n        }\n    });\n}\nvar DefaultGenerateObjectResult = class {\n    constructor(options){\n        this.object = options.object;\n        this.finishReason = options.finishReason;\n        this.usage = options.usage;\n        this.warnings = options.warnings;\n        this.experimental_providerMetadata = options.providerMetadata;\n        this.response = options.response;\n        this.request = options.request;\n        this.logprobs = options.logprobs;\n    }\n    toJsonResponse(init) {\n        var _a13;\n        return new Response(JSON.stringify(this.object), {\n            status: (_a13 = init == null ? void 0 : init.status) != null ? _a13 : 200,\n            headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {\n                contentType: \"application/json; charset=utf-8\"\n            })\n        });\n    }\n};\n// core/generate-object/stream-object.ts\n\n\n// util/delayed-promise.ts\nvar DelayedPromise = class {\n    constructor(){\n        this.status = {\n            type: \"pending\"\n        };\n        this._resolve = void 0;\n        this._reject = void 0;\n    }\n    get value() {\n        if (this.promise) {\n            return this.promise;\n        }\n        this.promise = new Promise((resolve, reject)=>{\n            if (this.status.type === \"resolved\") {\n                resolve(this.status.value);\n            } else if (this.status.type === \"rejected\") {\n                reject(this.status.error);\n            }\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n        return this.promise;\n    }\n    resolve(value) {\n        var _a13;\n        this.status = {\n            type: \"resolved\",\n            value\n        };\n        if (this.promise) {\n            (_a13 = this._resolve) == null ? void 0 : _a13.call(this, value);\n        }\n    }\n    reject(error) {\n        var _a13;\n        this.status = {\n            type: \"rejected\",\n            error\n        };\n        if (this.promise) {\n            (_a13 = this._reject) == null ? void 0 : _a13.call(this, error);\n        }\n    }\n};\n// util/create-resolvable-promise.ts\nfunction createResolvablePromise() {\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\n// core/util/create-stitchable-stream.ts\nfunction createStitchableStream() {\n    let innerStreamReaders = [];\n    let controller = null;\n    let isClosed = false;\n    let waitForNewStream = createResolvablePromise();\n    const processPull = async ()=>{\n        if (isClosed && innerStreamReaders.length === 0) {\n            controller == null ? void 0 : controller.close();\n            return;\n        }\n        if (innerStreamReaders.length === 0) {\n            waitForNewStream = createResolvablePromise();\n            await waitForNewStream.promise;\n            return processPull();\n        }\n        try {\n            const { value, done } = await innerStreamReaders[0].read();\n            if (done) {\n                innerStreamReaders.shift();\n                if (innerStreamReaders.length > 0) {\n                    await processPull();\n                } else if (isClosed) {\n                    controller == null ? void 0 : controller.close();\n                }\n            } else {\n                controller == null ? void 0 : controller.enqueue(value);\n            }\n        } catch (error) {\n            controller == null ? void 0 : controller.error(error);\n            innerStreamReaders.shift();\n            if (isClosed && innerStreamReaders.length === 0) {\n                controller == null ? void 0 : controller.close();\n            }\n        }\n    };\n    return {\n        stream: new ReadableStream({\n            start (controllerParam) {\n                controller = controllerParam;\n            },\n            pull: processPull,\n            async cancel () {\n                for (const reader of innerStreamReaders){\n                    await reader.cancel();\n                }\n                innerStreamReaders = [];\n                isClosed = true;\n            }\n        }),\n        addStream: (innerStream)=>{\n            if (isClosed) {\n                throw new Error(\"Cannot add inner stream: outer stream is closed\");\n            }\n            innerStreamReaders.push(innerStream.getReader());\n            waitForNewStream.resolve();\n        },\n        close: ()=>{\n            isClosed = true;\n            waitForNewStream.resolve();\n            if (innerStreamReaders.length === 0) {\n                controller == null ? void 0 : controller.close();\n            }\n        }\n    };\n}\n// core/util/now.ts\nfunction now() {\n    var _a13, _b;\n    return (_b = (_a13 = globalThis == null ? void 0 : globalThis.performance) == null ? void 0 : _a13.now()) != null ? _b : Date.now();\n}\n// core/generate-object/stream-object.ts\nvar originalGenerateId2 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createIdGenerator)({\n    prefix: \"aiobj\",\n    size: 24\n});\nfunction streamObject({ model, schema: inputSchema, schemaName, schemaDescription, mode, output = \"object\", system, prompt, messages, maxRetries, abortSignal, headers, experimental_telemetry: telemetry, experimental_providerMetadata: providerMetadata, onFinish, _internal: { generateId: generateId3 = originalGenerateId2, currentDate = ()=>/* @__PURE__ */ new Date(), now: now2 = now } = {}, ...settings }) {\n    validateObjectGenerationInput({\n        output,\n        mode,\n        schema: inputSchema,\n        schemaName,\n        schemaDescription\n    });\n    const outputStrategy = getOutputStrategy({\n        output,\n        schema: inputSchema\n    });\n    if (outputStrategy.type === \"no-schema\" && mode === void 0) {\n        mode = \"json\";\n    }\n    return new DefaultStreamObjectResult({\n        model,\n        telemetry,\n        headers,\n        settings,\n        maxRetries,\n        abortSignal,\n        outputStrategy,\n        system,\n        prompt,\n        messages,\n        schemaName,\n        schemaDescription,\n        inputProviderMetadata: providerMetadata,\n        mode,\n        onFinish,\n        generateId: generateId3,\n        currentDate,\n        now: now2\n    });\n}\nvar DefaultStreamObjectResult = class {\n    constructor({ model, headers, telemetry, settings, maxRetries: maxRetriesArg, abortSignal, outputStrategy, system, prompt, messages, schemaName, schemaDescription, inputProviderMetadata, mode, onFinish, generateId: generateId3, currentDate, now: now2 }){\n        this.objectPromise = new DelayedPromise();\n        this.usagePromise = new DelayedPromise();\n        this.providerMetadataPromise = new DelayedPromise();\n        this.warningsPromise = new DelayedPromise();\n        this.requestPromise = new DelayedPromise();\n        this.responsePromise = new DelayedPromise();\n        this.stitchableStream = createStitchableStream();\n        const { maxRetries, retry } = prepareRetries({\n            maxRetries: maxRetriesArg\n        });\n        const baseTelemetryAttributes = getBaseTelemetryAttributes({\n            model,\n            telemetry,\n            headers,\n            settings: {\n                ...settings,\n                maxRetries\n            }\n        });\n        const tracer = getTracer(telemetry);\n        const self = this;\n        recordSpan({\n            name: \"ai.streamObject\",\n            attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    ...assembleOperationName({\n                        operationId: \"ai.streamObject\",\n                        telemetry\n                    }),\n                    ...baseTelemetryAttributes,\n                    // specific settings that only make sense on the outer level:\n                    \"ai.prompt\": {\n                        input: ()=>JSON.stringify({\n                                system,\n                                prompt,\n                                messages\n                            })\n                    },\n                    \"ai.schema\": outputStrategy.jsonSchema != null ? {\n                        input: ()=>JSON.stringify(outputStrategy.jsonSchema)\n                    } : void 0,\n                    \"ai.schema.name\": schemaName,\n                    \"ai.schema.description\": schemaDescription,\n                    \"ai.settings.output\": outputStrategy.type,\n                    \"ai.settings.mode\": mode\n                }\n            }),\n            tracer,\n            endWhenDone: false,\n            fn: async (rootSpan)=>{\n                if (mode === \"auto\" || mode == null) {\n                    mode = model.defaultObjectGenerationMode;\n                }\n                let callOptions;\n                let transformer;\n                switch(mode){\n                    case \"json\":\n                        {\n                            const standardizedPrompt = standardizePrompt({\n                                prompt: {\n                                    system: outputStrategy.jsonSchema == null ? injectJsonInstruction({\n                                        prompt: system\n                                    }) : model.supportsStructuredOutputs ? system : injectJsonInstruction({\n                                        prompt: system,\n                                        schema: outputStrategy.jsonSchema\n                                    }),\n                                    prompt,\n                                    messages\n                                },\n                                tools: void 0\n                            });\n                            callOptions = {\n                                mode: {\n                                    type: \"object-json\",\n                                    schema: outputStrategy.jsonSchema,\n                                    name: schemaName,\n                                    description: schemaDescription\n                                },\n                                ...prepareCallSettings(settings),\n                                inputFormat: standardizedPrompt.type,\n                                prompt: await convertToLanguageModelPrompt({\n                                    prompt: standardizedPrompt,\n                                    modelSupportsImageUrls: model.supportsImageUrls,\n                                    modelSupportsUrl: model.supportsUrl\n                                }),\n                                providerMetadata: inputProviderMetadata,\n                                abortSignal,\n                                headers\n                            };\n                            transformer = {\n                                transform: (chunk, controller)=>{\n                                    switch(chunk.type){\n                                        case \"text-delta\":\n                                            controller.enqueue(chunk.textDelta);\n                                            break;\n                                        case \"response-metadata\":\n                                        case \"finish\":\n                                        case \"error\":\n                                            controller.enqueue(chunk);\n                                            break;\n                                    }\n                                }\n                            };\n                            break;\n                        }\n                    case \"tool\":\n                        {\n                            const standardizedPrompt = standardizePrompt({\n                                prompt: {\n                                    system,\n                                    prompt,\n                                    messages\n                                },\n                                tools: void 0\n                            });\n                            callOptions = {\n                                mode: {\n                                    type: \"object-tool\",\n                                    tool: {\n                                        type: \"function\",\n                                        name: schemaName != null ? schemaName : \"json\",\n                                        description: schemaDescription != null ? schemaDescription : \"Respond with a JSON object.\",\n                                        parameters: outputStrategy.jsonSchema\n                                    }\n                                },\n                                ...prepareCallSettings(settings),\n                                inputFormat: standardizedPrompt.type,\n                                prompt: await convertToLanguageModelPrompt({\n                                    prompt: standardizedPrompt,\n                                    modelSupportsImageUrls: model.supportsImageUrls,\n                                    modelSupportsUrl: model.supportsUrl\n                                }),\n                                providerMetadata: inputProviderMetadata,\n                                abortSignal,\n                                headers\n                            };\n                            transformer = {\n                                transform (chunk, controller) {\n                                    switch(chunk.type){\n                                        case \"tool-call-delta\":\n                                            controller.enqueue(chunk.argsTextDelta);\n                                            break;\n                                        case \"response-metadata\":\n                                        case \"finish\":\n                                        case \"error\":\n                                            controller.enqueue(chunk);\n                                            break;\n                                    }\n                                }\n                            };\n                            break;\n                        }\n                    case void 0:\n                        {\n                            throw new Error(\"Model does not have a default object generation mode.\");\n                        }\n                    default:\n                        {\n                            const _exhaustiveCheck = mode;\n                            throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);\n                        }\n                }\n                const { result: { stream, warnings, rawResponse, request }, doStreamSpan, startTimestampMs } = await retry(()=>recordSpan({\n                        name: \"ai.streamObject.doStream\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.streamObject.doStream\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                \"ai.prompt.format\": {\n                                    input: ()=>callOptions.inputFormat\n                                },\n                                \"ai.prompt.messages\": {\n                                    input: ()=>JSON.stringify(callOptions.prompt)\n                                },\n                                \"ai.settings.mode\": mode,\n                                // standardized gen-ai llm span attributes:\n                                \"gen_ai.system\": model.provider,\n                                \"gen_ai.request.model\": model.modelId,\n                                \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                \"gen_ai.request.temperature\": settings.temperature,\n                                \"gen_ai.request.top_k\": settings.topK,\n                                \"gen_ai.request.top_p\": settings.topP\n                            }\n                        }),\n                        tracer,\n                        endWhenDone: false,\n                        fn: async (doStreamSpan2)=>({\n                                startTimestampMs: now2(),\n                                doStreamSpan: doStreamSpan2,\n                                result: await model.doStream(callOptions)\n                            })\n                    }));\n                self.requestPromise.resolve(request != null ? request : {});\n                let usage;\n                let finishReason;\n                let providerMetadata;\n                let object2;\n                let error;\n                let accumulatedText = \"\";\n                let textDelta = \"\";\n                let response = {\n                    id: generateId3(),\n                    timestamp: currentDate(),\n                    modelId: model.modelId\n                };\n                let latestObjectJson = void 0;\n                let latestObject = void 0;\n                let isFirstChunk = true;\n                let isFirstDelta = true;\n                const transformedStream = stream.pipeThrough(new TransformStream(transformer)).pipeThrough(new TransformStream({\n                    async transform (chunk, controller) {\n                        var _a13, _b, _c;\n                        if (isFirstChunk) {\n                            const msToFirstChunk = now2() - startTimestampMs;\n                            isFirstChunk = false;\n                            doStreamSpan.addEvent(\"ai.stream.firstChunk\", {\n                                \"ai.stream.msToFirstChunk\": msToFirstChunk\n                            });\n                            doStreamSpan.setAttributes({\n                                \"ai.stream.msToFirstChunk\": msToFirstChunk\n                            });\n                        }\n                        if (typeof chunk === \"string\") {\n                            accumulatedText += chunk;\n                            textDelta += chunk;\n                            const { value: currentObjectJson, state: parseState } = (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.parsePartialJson)(accumulatedText);\n                            if (currentObjectJson !== void 0 && !(0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.isDeepEqualData)(latestObjectJson, currentObjectJson)) {\n                                const validationResult = outputStrategy.validatePartialResult({\n                                    value: currentObjectJson,\n                                    textDelta,\n                                    latestObject,\n                                    isFirstDelta,\n                                    isFinalDelta: parseState === \"successful-parse\"\n                                });\n                                if (validationResult.success && !(0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.isDeepEqualData)(latestObject, validationResult.value.partial)) {\n                                    latestObjectJson = currentObjectJson;\n                                    latestObject = validationResult.value.partial;\n                                    controller.enqueue({\n                                        type: \"object\",\n                                        object: latestObject\n                                    });\n                                    controller.enqueue({\n                                        type: \"text-delta\",\n                                        textDelta: validationResult.value.textDelta\n                                    });\n                                    textDelta = \"\";\n                                    isFirstDelta = false;\n                                }\n                            }\n                            return;\n                        }\n                        switch(chunk.type){\n                            case \"response-metadata\":\n                                {\n                                    response = {\n                                        id: (_a13 = chunk.id) != null ? _a13 : response.id,\n                                        timestamp: (_b = chunk.timestamp) != null ? _b : response.timestamp,\n                                        modelId: (_c = chunk.modelId) != null ? _c : response.modelId\n                                    };\n                                    break;\n                                }\n                            case \"finish\":\n                                {\n                                    if (textDelta !== \"\") {\n                                        controller.enqueue({\n                                            type: \"text-delta\",\n                                            textDelta\n                                        });\n                                    }\n                                    finishReason = chunk.finishReason;\n                                    usage = calculateLanguageModelUsage(chunk.usage);\n                                    providerMetadata = chunk.providerMetadata;\n                                    controller.enqueue({\n                                        ...chunk,\n                                        usage,\n                                        response\n                                    });\n                                    self.usagePromise.resolve(usage);\n                                    self.providerMetadataPromise.resolve(providerMetadata);\n                                    self.responsePromise.resolve({\n                                        ...response,\n                                        headers: rawResponse == null ? void 0 : rawResponse.headers\n                                    });\n                                    const validationResult = outputStrategy.validateFinalResult(latestObjectJson, {\n                                        text: accumulatedText,\n                                        response,\n                                        usage\n                                    });\n                                    if (validationResult.success) {\n                                        object2 = validationResult.value;\n                                        self.objectPromise.resolve(object2);\n                                    } else {\n                                        error = new NoObjectGeneratedError({\n                                            message: \"No object generated: response did not match schema.\",\n                                            cause: validationResult.error,\n                                            text: accumulatedText,\n                                            response,\n                                            usage\n                                        });\n                                        self.objectPromise.reject(error);\n                                    }\n                                    break;\n                                }\n                            default:\n                                {\n                                    controller.enqueue(chunk);\n                                    break;\n                                }\n                        }\n                    },\n                    // invoke onFinish callback and resolve toolResults promise when the stream is about to close:\n                    async flush (controller) {\n                        try {\n                            const finalUsage = usage != null ? usage : {\n                                promptTokens: NaN,\n                                completionTokens: NaN,\n                                totalTokens: NaN\n                            };\n                            doStreamSpan.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.response.finishReason\": finishReason,\n                                    \"ai.response.object\": {\n                                        output: ()=>JSON.stringify(object2)\n                                    },\n                                    \"ai.response.id\": response.id,\n                                    \"ai.response.model\": response.modelId,\n                                    \"ai.response.timestamp\": response.timestamp.toISOString(),\n                                    \"ai.usage.promptTokens\": finalUsage.promptTokens,\n                                    \"ai.usage.completionTokens\": finalUsage.completionTokens,\n                                    // standardized gen-ai llm span attributes:\n                                    \"gen_ai.response.finish_reasons\": [\n                                        finishReason\n                                    ],\n                                    \"gen_ai.response.id\": response.id,\n                                    \"gen_ai.response.model\": response.modelId,\n                                    \"gen_ai.usage.input_tokens\": finalUsage.promptTokens,\n                                    \"gen_ai.usage.output_tokens\": finalUsage.completionTokens\n                                }\n                            }));\n                            doStreamSpan.end();\n                            rootSpan.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.usage.promptTokens\": finalUsage.promptTokens,\n                                    \"ai.usage.completionTokens\": finalUsage.completionTokens,\n                                    \"ai.response.object\": {\n                                        output: ()=>JSON.stringify(object2)\n                                    }\n                                }\n                            }));\n                            await (onFinish == null ? void 0 : onFinish({\n                                usage: finalUsage,\n                                object: object2,\n                                error,\n                                response: {\n                                    ...response,\n                                    headers: rawResponse == null ? void 0 : rawResponse.headers\n                                },\n                                warnings,\n                                experimental_providerMetadata: providerMetadata\n                            }));\n                        } catch (error2) {\n                            controller.error(error2);\n                        } finally{\n                            rootSpan.end();\n                        }\n                    }\n                }));\n                self.stitchableStream.addStream(transformedStream);\n            }\n        }).catch((error)=>{\n            self.stitchableStream.addStream(new ReadableStream({\n                start (controller) {\n                    controller.error(error);\n                }\n            }));\n        }).finally(()=>{\n            self.stitchableStream.close();\n        });\n        this.outputStrategy = outputStrategy;\n    }\n    get object() {\n        return this.objectPromise.value;\n    }\n    get usage() {\n        return this.usagePromise.value;\n    }\n    get experimental_providerMetadata() {\n        return this.providerMetadataPromise.value;\n    }\n    get warnings() {\n        return this.warningsPromise.value;\n    }\n    get request() {\n        return this.requestPromise.value;\n    }\n    get response() {\n        return this.responsePromise.value;\n    }\n    get partialObjectStream() {\n        return createAsyncIterableStream(this.stitchableStream.stream.pipeThrough(new TransformStream({\n            transform (chunk, controller) {\n                switch(chunk.type){\n                    case \"object\":\n                        controller.enqueue(chunk.object);\n                        break;\n                    case \"text-delta\":\n                    case \"finish\":\n                        break;\n                    case \"error\":\n                        controller.error(chunk.error);\n                        break;\n                    default:\n                        {\n                            const _exhaustiveCheck = chunk;\n                            throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n                        }\n                }\n            }\n        })));\n    }\n    get elementStream() {\n        return this.outputStrategy.createElementStream(this.stitchableStream.stream);\n    }\n    get textStream() {\n        return createAsyncIterableStream(this.stitchableStream.stream.pipeThrough(new TransformStream({\n            transform (chunk, controller) {\n                switch(chunk.type){\n                    case \"text-delta\":\n                        controller.enqueue(chunk.textDelta);\n                        break;\n                    case \"object\":\n                    case \"finish\":\n                        break;\n                    case \"error\":\n                        controller.error(chunk.error);\n                        break;\n                    default:\n                        {\n                            const _exhaustiveCheck = chunk;\n                            throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n                        }\n                }\n            }\n        })));\n    }\n    get fullStream() {\n        return createAsyncIterableStream(this.stitchableStream.stream);\n    }\n    pipeTextStreamToResponse(response, init) {\n        writeToServerResponse({\n            response,\n            status: init == null ? void 0 : init.status,\n            statusText: init == null ? void 0 : init.statusText,\n            headers: prepareOutgoingHttpHeaders(init == null ? void 0 : init.headers, {\n                contentType: \"text/plain; charset=utf-8\"\n            }),\n            stream: this.textStream.pipeThrough(new TextEncoderStream())\n        });\n    }\n    toTextStreamResponse(init) {\n        var _a13;\n        return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {\n            status: (_a13 = init == null ? void 0 : init.status) != null ? _a13 : 200,\n            headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {\n                contentType: \"text/plain; charset=utf-8\"\n            })\n        });\n    }\n};\n// core/generate-text/generate-text.ts\n\n// errors/index.ts\n\n// errors/invalid-tool-arguments-error.ts\n\nvar name8 = \"AI_InvalidToolArgumentsError\";\nvar marker8 = `vercel.ai.error.${name8}`;\nvar symbol8 = Symbol.for(marker8);\nvar _a8;\nvar InvalidToolArgumentsError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ toolArgs, toolName, cause, message = `Invalid arguments for tool ${toolName}: ${(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.getErrorMessage)(cause)}` }){\n        super({\n            name: name8,\n            message,\n            cause\n        });\n        this[_a8] = true;\n        this.toolArgs = toolArgs;\n        this.toolName = toolName;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker8);\n    }\n};\n_a8 = symbol8;\n// errors/no-such-tool-error.ts\n\nvar name9 = \"AI_NoSuchToolError\";\nvar marker9 = `vercel.ai.error.${name9}`;\nvar symbol9 = Symbol.for(marker9);\nvar _a9;\nvar NoSuchToolError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ toolName, availableTools = void 0, message = `Model tried to call unavailable tool '${toolName}'. ${availableTools === void 0 ? \"No tools are available.\" : `Available tools: ${availableTools.join(\", \")}.`}` }){\n        super({\n            name: name9,\n            message\n        });\n        this[_a9] = true;\n        this.toolName = toolName;\n        this.availableTools = availableTools;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker9);\n    }\n};\n_a9 = symbol9;\n// errors/tool-call-repair-error.ts\n\nvar name10 = \"AI_ToolCallRepairError\";\nvar marker10 = `vercel.ai.error.${name10}`;\nvar symbol10 = Symbol.for(marker10);\nvar _a10;\nvar ToolCallRepairError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ cause, originalError, message = `Error repairing tool call: ${(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.getErrorMessage)(cause)}` }){\n        super({\n            name: name10,\n            message,\n            cause\n        });\n        this[_a10] = true;\n        this.originalError = originalError;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker10);\n    }\n};\n_a10 = symbol10;\n// errors/tool-execution-error.ts\n\nvar name11 = \"AI_ToolExecutionError\";\nvar marker11 = `vercel.ai.error.${name11}`;\nvar symbol11 = Symbol.for(marker11);\nvar _a11;\nvar ToolExecutionError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError {\n    constructor({ toolArgs, toolName, cause, message = `Error executing tool ${toolName}: ${(0,_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.getErrorMessage)(cause)}` }){\n        super({\n            name: name11,\n            message,\n            cause\n        });\n        this[_a11] = true;\n        this.toolArgs = toolArgs;\n        this.toolName = toolName;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker11);\n    }\n};\n_a11 = symbol11;\n// core/prompt/prepare-tools-and-tool-choice.ts\n\n// core/util/is-non-empty-object.ts\nfunction isNonEmptyObject(object2) {\n    return object2 != null && Object.keys(object2).length > 0;\n}\n// core/prompt/prepare-tools-and-tool-choice.ts\nfunction prepareToolsAndToolChoice({ tools, toolChoice, activeTools }) {\n    if (!isNonEmptyObject(tools)) {\n        return {\n            tools: void 0,\n            toolChoice: void 0\n        };\n    }\n    const filteredTools = activeTools != null ? Object.entries(tools).filter(([name13])=>activeTools.includes(name13)) : Object.entries(tools);\n    return {\n        tools: filteredTools.map(([name13, tool2])=>{\n            const toolType = tool2.type;\n            switch(toolType){\n                case void 0:\n                case \"function\":\n                    return {\n                        type: \"function\",\n                        name: name13,\n                        description: tool2.description,\n                        parameters: (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(tool2.parameters).jsonSchema\n                    };\n                case \"provider-defined\":\n                    return {\n                        type: \"provider-defined\",\n                        name: name13,\n                        id: tool2.id,\n                        args: tool2.args\n                    };\n                default:\n                    {\n                        const exhaustiveCheck = toolType;\n                        throw new Error(`Unsupported tool type: ${exhaustiveCheck}`);\n                    }\n            }\n        }),\n        toolChoice: toolChoice == null ? {\n            type: \"auto\"\n        } : typeof toolChoice === \"string\" ? {\n            type: toolChoice\n        } : {\n            type: \"tool\",\n            toolName: toolChoice.toolName\n        }\n    };\n}\n// core/util/split-on-last-whitespace.ts\nvar lastWhitespaceRegexp = /^([\\s\\S]*?)(\\s+)(\\S*)$/;\nfunction splitOnLastWhitespace(text2) {\n    const match = text2.match(lastWhitespaceRegexp);\n    return match ? {\n        prefix: match[1],\n        whitespace: match[2],\n        suffix: match[3]\n    } : void 0;\n}\n// core/util/remove-text-after-last-whitespace.ts\nfunction removeTextAfterLastWhitespace(text2) {\n    const match = splitOnLastWhitespace(text2);\n    return match ? match.prefix + match.whitespace : text2;\n}\n// core/generate-text/parse-tool-call.ts\n\n\nasync function parseToolCall({ toolCall, tools, repairToolCall, system, messages }) {\n    if (tools == null) {\n        throw new NoSuchToolError({\n            toolName: toolCall.toolName\n        });\n    }\n    try {\n        return await doParseToolCall({\n            toolCall,\n            tools\n        });\n    } catch (error) {\n        if (repairToolCall == null || !(NoSuchToolError.isInstance(error) || InvalidToolArgumentsError.isInstance(error))) {\n            throw error;\n        }\n        let repairedToolCall = null;\n        try {\n            repairedToolCall = await repairToolCall({\n                toolCall,\n                tools,\n                parameterSchema: ({ toolName })=>(0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(tools[toolName].parameters).jsonSchema,\n                system,\n                messages,\n                error\n            });\n        } catch (repairError) {\n            throw new ToolCallRepairError({\n                cause: repairError,\n                originalError: error\n            });\n        }\n        if (repairedToolCall == null) {\n            throw error;\n        }\n        return await doParseToolCall({\n            toolCall: repairedToolCall,\n            tools\n        });\n    }\n}\nasync function doParseToolCall({ toolCall, tools }) {\n    const toolName = toolCall.toolName;\n    const tool2 = tools[toolName];\n    if (tool2 == null) {\n        throw new NoSuchToolError({\n            toolName: toolCall.toolName,\n            availableTools: Object.keys(tools)\n        });\n    }\n    const schema = (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(tool2.parameters);\n    const parseResult = toolCall.args.trim() === \"\" ? (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n        value: {},\n        schema\n    }) : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)({\n        text: toolCall.args,\n        schema\n    });\n    if (parseResult.success === false) {\n        throw new InvalidToolArgumentsError({\n            toolName,\n            toolArgs: toolCall.args,\n            cause: parseResult.error\n        });\n    }\n    return {\n        type: \"tool-call\",\n        toolCallId: toolCall.toolCallId,\n        toolName,\n        args: parseResult.value\n    };\n}\n// core/generate-text/to-response-messages.ts\nfunction toResponseMessages({ text: text2 = \"\", tools, toolCalls, toolResults }) {\n    const responseMessages = [];\n    responseMessages.push({\n        role: \"assistant\",\n        content: [\n            {\n                type: \"text\",\n                text: text2\n            },\n            ...toolCalls\n        ]\n    });\n    if (toolResults.length > 0) {\n        responseMessages.push({\n            role: \"tool\",\n            content: toolResults.map((toolResult)=>{\n                const tool2 = tools[toolResult.toolName];\n                return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {\n                    type: \"tool-result\",\n                    toolCallId: toolResult.toolCallId,\n                    toolName: toolResult.toolName,\n                    result: tool2.experimental_toToolResultContent(toolResult.result),\n                    experimental_content: tool2.experimental_toToolResultContent(toolResult.result)\n                } : {\n                    type: \"tool-result\",\n                    toolCallId: toolResult.toolCallId,\n                    toolName: toolResult.toolName,\n                    result: toolResult.result\n                };\n            })\n        });\n    }\n    return responseMessages;\n}\n// core/generate-text/generate-text.ts\nvar originalGenerateId3 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createIdGenerator)({\n    prefix: \"aitxt\",\n    size: 24\n});\nasync function generateText({ model, tools, toolChoice, system, prompt, messages, maxRetries: maxRetriesArg, abortSignal, headers, maxSteps = 1, experimental_output: output, experimental_continueSteps: continueSteps = false, experimental_telemetry: telemetry, experimental_providerMetadata: providerMetadata, experimental_activeTools: activeTools, experimental_repairToolCall: repairToolCall, _internal: { generateId: generateId3 = originalGenerateId3, currentDate = ()=>/* @__PURE__ */ new Date() } = {}, onStepFinish, ...settings }) {\n    var _a13;\n    if (maxSteps < 1) {\n        throw new InvalidArgumentError({\n            parameter: \"maxSteps\",\n            value: maxSteps,\n            message: \"maxSteps must be at least 1\"\n        });\n    }\n    const { maxRetries, retry } = prepareRetries({\n        maxRetries: maxRetriesArg\n    });\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n        model,\n        telemetry,\n        headers,\n        settings: {\n            ...settings,\n            maxRetries\n        }\n    });\n    const initialPrompt = standardizePrompt({\n        prompt: {\n            system: (_a13 = output == null ? void 0 : output.injectIntoSystemPrompt({\n                system,\n                model\n            })) != null ? _a13 : system,\n            prompt,\n            messages\n        },\n        tools\n    });\n    const tracer = getTracer(telemetry);\n    return recordSpan({\n        name: \"ai.generateText\",\n        attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n                ...assembleOperationName({\n                    operationId: \"ai.generateText\",\n                    telemetry\n                }),\n                ...baseTelemetryAttributes,\n                // specific settings that only make sense on the outer level:\n                \"ai.prompt\": {\n                    input: ()=>JSON.stringify({\n                            system,\n                            prompt,\n                            messages\n                        })\n                },\n                \"ai.settings.maxSteps\": maxSteps\n            }\n        }),\n        tracer,\n        fn: async (span)=>{\n            var _a14, _b, _c, _d, _e, _f;\n            const mode = {\n                type: \"regular\",\n                ...prepareToolsAndToolChoice({\n                    tools,\n                    toolChoice,\n                    activeTools\n                })\n            };\n            const callSettings = prepareCallSettings(settings);\n            let currentModelResponse;\n            let currentToolCalls = [];\n            let currentToolResults = [];\n            let stepCount = 0;\n            const responseMessages = [];\n            let text2 = \"\";\n            const steps = [];\n            let usage = {\n                completionTokens: 0,\n                promptTokens: 0,\n                totalTokens: 0\n            };\n            let stepType = \"initial\";\n            do {\n                const promptFormat = stepCount === 0 ? initialPrompt.type : \"messages\";\n                const stepInputMessages = [\n                    ...initialPrompt.messages,\n                    ...responseMessages\n                ];\n                const promptMessages = await convertToLanguageModelPrompt({\n                    prompt: {\n                        type: promptFormat,\n                        system: initialPrompt.system,\n                        messages: stepInputMessages\n                    },\n                    modelSupportsImageUrls: model.supportsImageUrls,\n                    modelSupportsUrl: model.supportsUrl\n                });\n                currentModelResponse = await retry(()=>recordSpan({\n                        name: \"ai.generateText.doGenerate\",\n                        attributes: selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                ...assembleOperationName({\n                                    operationId: \"ai.generateText.doGenerate\",\n                                    telemetry\n                                }),\n                                ...baseTelemetryAttributes,\n                                \"ai.prompt.format\": {\n                                    input: ()=>promptFormat\n                                },\n                                \"ai.prompt.messages\": {\n                                    input: ()=>JSON.stringify(promptMessages)\n                                },\n                                \"ai.prompt.tools\": {\n                                    // convert the language model level tools:\n                                    input: ()=>{\n                                        var _a15;\n                                        return (_a15 = mode.tools) == null ? void 0 : _a15.map((tool2)=>JSON.stringify(tool2));\n                                    }\n                                },\n                                \"ai.prompt.toolChoice\": {\n                                    input: ()=>mode.toolChoice != null ? JSON.stringify(mode.toolChoice) : void 0\n                                },\n                                // standardized gen-ai llm span attributes:\n                                \"gen_ai.system\": model.provider,\n                                \"gen_ai.request.model\": model.modelId,\n                                \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                \"gen_ai.request.stop_sequences\": settings.stopSequences,\n                                \"gen_ai.request.temperature\": settings.temperature,\n                                \"gen_ai.request.top_k\": settings.topK,\n                                \"gen_ai.request.top_p\": settings.topP\n                            }\n                        }),\n                        tracer,\n                        fn: async (span2)=>{\n                            var _a15, _b2, _c2, _d2, _e2, _f2;\n                            const result = await model.doGenerate({\n                                mode,\n                                ...callSettings,\n                                inputFormat: promptFormat,\n                                responseFormat: output == null ? void 0 : output.responseFormat({\n                                    model\n                                }),\n                                prompt: promptMessages,\n                                providerMetadata,\n                                abortSignal,\n                                headers\n                            });\n                            const responseData = {\n                                id: (_b2 = (_a15 = result.response) == null ? void 0 : _a15.id) != null ? _b2 : generateId3(),\n                                timestamp: (_d2 = (_c2 = result.response) == null ? void 0 : _c2.timestamp) != null ? _d2 : currentDate(),\n                                modelId: (_f2 = (_e2 = result.response) == null ? void 0 : _e2.modelId) != null ? _f2 : model.modelId\n                            };\n                            span2.setAttributes(selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    \"ai.response.finishReason\": result.finishReason,\n                                    \"ai.response.text\": {\n                                        output: ()=>result.text\n                                    },\n                                    \"ai.response.toolCalls\": {\n                                        output: ()=>JSON.stringify(result.toolCalls)\n                                    },\n                                    \"ai.response.id\": responseData.id,\n                                    \"ai.response.model\": responseData.modelId,\n                                    \"ai.response.timestamp\": responseData.timestamp.toISOString(),\n                                    \"ai.usage.promptTokens\": result.usage.promptTokens,\n                                    \"ai.usage.completionTokens\": result.usage.completionTokens,\n                                    // standardized gen-ai llm span attributes:\n                                    \"gen_ai.response.finish_reasons\": [\n                                        result.finishReason\n                                    ],\n                                    \"gen_ai.response.id\": responseData.id,\n                                    \"gen_ai.response.model\": responseData.modelId,\n                                    \"gen_ai.usage.input_tokens\": result.usage.promptTokens,\n                                    \"gen_ai.usage.output_tokens\": result.usage.completionTokens\n                                }\n                            }));\n                            return {\n                                ...result,\n                                response: responseData\n                            };\n                        }\n                    }));\n                currentToolCalls = await Promise.all(((_a14 = currentModelResponse.toolCalls) != null ? _a14 : []).map((toolCall)=>parseToolCall({\n                        toolCall,\n                        tools,\n                        repairToolCall,\n                        system,\n                        messages: stepInputMessages\n                    })));\n                currentToolResults = tools == null ? [] : await executeTools({\n                    toolCalls: currentToolCalls,\n                    tools,\n                    tracer,\n                    telemetry,\n                    messages: stepInputMessages,\n                    abortSignal\n                });\n                const currentUsage = calculateLanguageModelUsage(currentModelResponse.usage);\n                usage = addLanguageModelUsage(usage, currentUsage);\n                let nextStepType = \"done\";\n                if (++stepCount < maxSteps) {\n                    if (continueSteps && currentModelResponse.finishReason === \"length\" && // only use continue when there are no tool calls:\n                    currentToolCalls.length === 0) {\n                        nextStepType = \"continue\";\n                    } else if (// there are tool calls:\n                    currentToolCalls.length > 0 && // all current tool calls have results:\n                    currentToolResults.length === currentToolCalls.length) {\n                        nextStepType = \"tool-result\";\n                    }\n                }\n                const originalText = (_b = currentModelResponse.text) != null ? _b : \"\";\n                const stepTextLeadingWhitespaceTrimmed = stepType === \"continue\" && // only for continue steps\n                text2.trimEnd() !== text2 ? originalText.trimStart() : originalText;\n                const stepText = nextStepType === \"continue\" ? removeTextAfterLastWhitespace(stepTextLeadingWhitespaceTrimmed) : stepTextLeadingWhitespaceTrimmed;\n                text2 = nextStepType === \"continue\" || stepType === \"continue\" ? text2 + stepText : stepText;\n                if (stepType === \"continue\") {\n                    const lastMessage = responseMessages[responseMessages.length - 1];\n                    if (typeof lastMessage.content === \"string\") {\n                        lastMessage.content += stepText;\n                    } else {\n                        lastMessage.content.push({\n                            text: stepText,\n                            type: \"text\"\n                        });\n                    }\n                } else {\n                    responseMessages.push(...toResponseMessages({\n                        text: text2,\n                        tools: tools != null ? tools : {},\n                        toolCalls: currentToolCalls,\n                        toolResults: currentToolResults\n                    }));\n                }\n                const currentStepResult = {\n                    stepType,\n                    text: stepText,\n                    toolCalls: currentToolCalls,\n                    toolResults: currentToolResults,\n                    finishReason: currentModelResponse.finishReason,\n                    usage: currentUsage,\n                    warnings: currentModelResponse.warnings,\n                    logprobs: currentModelResponse.logprobs,\n                    request: (_c = currentModelResponse.request) != null ? _c : {},\n                    response: {\n                        ...currentModelResponse.response,\n                        headers: (_d = currentModelResponse.rawResponse) == null ? void 0 : _d.headers,\n                        // deep clone msgs to avoid mutating past messages in multi-step:\n                        messages: JSON.parse(JSON.stringify(responseMessages))\n                    },\n                    experimental_providerMetadata: currentModelResponse.providerMetadata,\n                    isContinued: nextStepType === \"continue\"\n                };\n                steps.push(currentStepResult);\n                await (onStepFinish == null ? void 0 : onStepFinish(currentStepResult));\n                stepType = nextStepType;\n            }while (stepType !== \"done\");\n            span.setAttributes(selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    \"ai.response.finishReason\": currentModelResponse.finishReason,\n                    \"ai.response.text\": {\n                        output: ()=>currentModelResponse.text\n                    },\n                    \"ai.response.toolCalls\": {\n                        output: ()=>JSON.stringify(currentModelResponse.toolCalls)\n                    },\n                    \"ai.usage.promptTokens\": currentModelResponse.usage.promptTokens,\n                    \"ai.usage.completionTokens\": currentModelResponse.usage.completionTokens\n                }\n            }));\n            return new DefaultGenerateTextResult({\n                text: text2,\n                output: output == null ? void 0 : output.parseOutput({\n                    text: text2\n                }, {\n                    response: currentModelResponse.response,\n                    usage\n                }),\n                toolCalls: currentToolCalls,\n                toolResults: currentToolResults,\n                finishReason: currentModelResponse.finishReason,\n                usage,\n                warnings: currentModelResponse.warnings,\n                request: (_e = currentModelResponse.request) != null ? _e : {},\n                response: {\n                    ...currentModelResponse.response,\n                    headers: (_f = currentModelResponse.rawResponse) == null ? void 0 : _f.headers,\n                    messages: responseMessages\n                },\n                logprobs: currentModelResponse.logprobs,\n                steps,\n                providerMetadata: currentModelResponse.providerMetadata\n            });\n        }\n    });\n}\nasync function executeTools({ toolCalls, tools, tracer, telemetry, messages, abortSignal }) {\n    const toolResults = await Promise.all(toolCalls.map(async ({ toolCallId, toolName, args })=>{\n        const tool2 = tools[toolName];\n        if ((tool2 == null ? void 0 : tool2.execute) == null) {\n            return void 0;\n        }\n        const result = await recordSpan({\n            name: \"ai.toolCall\",\n            attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    ...assembleOperationName({\n                        operationId: \"ai.toolCall\",\n                        telemetry\n                    }),\n                    \"ai.toolCall.name\": toolName,\n                    \"ai.toolCall.id\": toolCallId,\n                    \"ai.toolCall.args\": {\n                        output: ()=>JSON.stringify(args)\n                    }\n                }\n            }),\n            tracer,\n            fn: async (span)=>{\n                try {\n                    const result2 = await tool2.execute(args, {\n                        toolCallId,\n                        messages,\n                        abortSignal\n                    });\n                    try {\n                        span.setAttributes(selectTelemetryAttributes({\n                            telemetry,\n                            attributes: {\n                                \"ai.toolCall.result\": {\n                                    output: ()=>JSON.stringify(result2)\n                                }\n                            }\n                        }));\n                    } catch (ignored) {}\n                    return result2;\n                } catch (error) {\n                    throw new ToolExecutionError({\n                        toolName,\n                        toolArgs: args,\n                        cause: error\n                    });\n                }\n            }\n        });\n        return {\n            type: \"tool-result\",\n            toolCallId,\n            toolName,\n            args,\n            result\n        };\n    }));\n    return toolResults.filter((result)=>result != null);\n}\nvar DefaultGenerateTextResult = class {\n    constructor(options){\n        this.text = options.text;\n        this.toolCalls = options.toolCalls;\n        this.toolResults = options.toolResults;\n        this.finishReason = options.finishReason;\n        this.usage = options.usage;\n        this.warnings = options.warnings;\n        this.request = options.request;\n        this.response = options.response;\n        this.steps = options.steps;\n        this.experimental_providerMetadata = options.providerMetadata;\n        this.logprobs = options.logprobs;\n        this.experimental_output = options.output;\n    }\n};\n// core/generate-text/output.ts\nvar output_exports = {};\n__export(output_exports, {\n    object: ()=>object,\n    text: ()=>text\n});\n\n\nvar text = ()=>({\n        type: \"text\",\n        responseFormat: ()=>({\n                type: \"text\"\n            }),\n        injectIntoSystemPrompt ({ system }) {\n            return system;\n        },\n        parseOutput ({ text: text2 }) {\n            return text2;\n        }\n    });\nvar object = ({ schema: inputSchema })=>{\n    const schema = (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.asSchema)(inputSchema);\n    return {\n        type: \"object\",\n        responseFormat: ({ model })=>({\n                type: \"json\",\n                schema: model.supportsStructuredOutputs ? schema.jsonSchema : void 0\n            }),\n        injectIntoSystemPrompt ({ system, model }) {\n            return model.supportsStructuredOutputs ? system : injectJsonInstruction({\n                prompt: system,\n                schema: schema.jsonSchema\n            });\n        },\n        parseOutput ({ text: text2 }, context) {\n            const parseResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)({\n                text: text2\n            });\n            if (!parseResult.success) {\n                throw new NoObjectGeneratedError({\n                    message: \"No object generated: could not parse the response.\",\n                    cause: parseResult.error,\n                    text: text2,\n                    response: context.response,\n                    usage: context.usage\n                });\n            }\n            const validationResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.safeValidateTypes)({\n                value: parseResult.value,\n                schema\n            });\n            if (!validationResult.success) {\n                throw new NoObjectGeneratedError({\n                    message: \"No object generated: response did not match schema.\",\n                    cause: validationResult.error,\n                    text: text2,\n                    response: context.response,\n                    usage: context.usage\n                });\n            }\n            return validationResult.value;\n        }\n    };\n};\n// core/generate-text/stream-text.ts\n\n\n// core/util/merge-streams.ts\nfunction mergeStreams(stream1, stream2) {\n    const reader1 = stream1.getReader();\n    const reader2 = stream2.getReader();\n    let lastRead1 = void 0;\n    let lastRead2 = void 0;\n    let stream1Done = false;\n    let stream2Done = false;\n    async function readStream1(controller) {\n        try {\n            if (lastRead1 == null) {\n                lastRead1 = reader1.read();\n            }\n            const result = await lastRead1;\n            lastRead1 = void 0;\n            if (!result.done) {\n                controller.enqueue(result.value);\n            } else {\n                controller.close();\n            }\n        } catch (error) {\n            controller.error(error);\n        }\n    }\n    async function readStream2(controller) {\n        try {\n            if (lastRead2 == null) {\n                lastRead2 = reader2.read();\n            }\n            const result = await lastRead2;\n            lastRead2 = void 0;\n            if (!result.done) {\n                controller.enqueue(result.value);\n            } else {\n                controller.close();\n            }\n        } catch (error) {\n            controller.error(error);\n        }\n    }\n    return new ReadableStream({\n        async pull (controller) {\n            try {\n                if (stream1Done) {\n                    await readStream2(controller);\n                    return;\n                }\n                if (stream2Done) {\n                    await readStream1(controller);\n                    return;\n                }\n                if (lastRead1 == null) {\n                    lastRead1 = reader1.read();\n                }\n                if (lastRead2 == null) {\n                    lastRead2 = reader2.read();\n                }\n                const { result, reader } = await Promise.race([\n                    lastRead1.then((result2)=>({\n                            result: result2,\n                            reader: reader1\n                        })),\n                    lastRead2.then((result2)=>({\n                            result: result2,\n                            reader: reader2\n                        }))\n                ]);\n                if (!result.done) {\n                    controller.enqueue(result.value);\n                }\n                if (reader === reader1) {\n                    lastRead1 = void 0;\n                    if (result.done) {\n                        await readStream2(controller);\n                        stream1Done = true;\n                    }\n                } else {\n                    lastRead2 = void 0;\n                    if (result.done) {\n                        stream2Done = true;\n                        await readStream1(controller);\n                    }\n                }\n            } catch (error) {\n                controller.error(error);\n            }\n        },\n        cancel () {\n            reader1.cancel();\n            reader2.cancel();\n        }\n    });\n}\n// core/generate-text/run-tools-transformation.ts\n\nfunction runToolsTransformation({ tools, generatorStream, toolCallStreaming, tracer, telemetry, system, messages, abortSignal, repairToolCall }) {\n    let toolResultsStreamController = null;\n    const toolResultsStream = new ReadableStream({\n        start (controller) {\n            toolResultsStreamController = controller;\n        }\n    });\n    const activeToolCalls = {};\n    const outstandingToolResults = /* @__PURE__ */ new Set();\n    let canClose = false;\n    let finishChunk = void 0;\n    function attemptClose() {\n        if (canClose && outstandingToolResults.size === 0) {\n            if (finishChunk != null) {\n                toolResultsStreamController.enqueue(finishChunk);\n            }\n            toolResultsStreamController.close();\n        }\n    }\n    const forwardStream = new TransformStream({\n        async transform (chunk, controller) {\n            const chunkType = chunk.type;\n            switch(chunkType){\n                case \"text-delta\":\n                case \"response-metadata\":\n                case \"error\":\n                    {\n                        controller.enqueue(chunk);\n                        break;\n                    }\n                case \"tool-call-delta\":\n                    {\n                        if (toolCallStreaming) {\n                            if (!activeToolCalls[chunk.toolCallId]) {\n                                controller.enqueue({\n                                    type: \"tool-call-streaming-start\",\n                                    toolCallId: chunk.toolCallId,\n                                    toolName: chunk.toolName\n                                });\n                                activeToolCalls[chunk.toolCallId] = true;\n                            }\n                            controller.enqueue({\n                                type: \"tool-call-delta\",\n                                toolCallId: chunk.toolCallId,\n                                toolName: chunk.toolName,\n                                argsTextDelta: chunk.argsTextDelta\n                            });\n                        }\n                        break;\n                    }\n                case \"tool-call\":\n                    {\n                        try {\n                            const toolCall = await parseToolCall({\n                                toolCall: chunk,\n                                tools,\n                                repairToolCall,\n                                system,\n                                messages\n                            });\n                            controller.enqueue(toolCall);\n                            const tool2 = tools[toolCall.toolName];\n                            if (tool2.execute != null) {\n                                const toolExecutionId = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.generateId)();\n                                outstandingToolResults.add(toolExecutionId);\n                                recordSpan({\n                                    name: \"ai.toolCall\",\n                                    attributes: selectTelemetryAttributes({\n                                        telemetry,\n                                        attributes: {\n                                            ...assembleOperationName({\n                                                operationId: \"ai.toolCall\",\n                                                telemetry\n                                            }),\n                                            \"ai.toolCall.name\": toolCall.toolName,\n                                            \"ai.toolCall.id\": toolCall.toolCallId,\n                                            \"ai.toolCall.args\": {\n                                                output: ()=>JSON.stringify(toolCall.args)\n                                            }\n                                        }\n                                    }),\n                                    tracer,\n                                    fn: async (span)=>tool2.execute(toolCall.args, {\n                                            toolCallId: toolCall.toolCallId,\n                                            messages,\n                                            abortSignal\n                                        }).then((result)=>{\n                                            toolResultsStreamController.enqueue({\n                                                ...toolCall,\n                                                type: \"tool-result\",\n                                                result\n                                            });\n                                            outstandingToolResults.delete(toolExecutionId);\n                                            attemptClose();\n                                            try {\n                                                span.setAttributes(selectTelemetryAttributes({\n                                                    telemetry,\n                                                    attributes: {\n                                                        \"ai.toolCall.result\": {\n                                                            output: ()=>JSON.stringify(result)\n                                                        }\n                                                    }\n                                                }));\n                                            } catch (ignored) {}\n                                        }, (error)=>{\n                                            toolResultsStreamController.enqueue({\n                                                type: \"error\",\n                                                error: new ToolExecutionError({\n                                                    toolName: toolCall.toolName,\n                                                    toolArgs: toolCall.args,\n                                                    cause: error\n                                                })\n                                            });\n                                            outstandingToolResults.delete(toolExecutionId);\n                                            attemptClose();\n                                        })\n                                });\n                            }\n                        } catch (error) {\n                            toolResultsStreamController.enqueue({\n                                type: \"error\",\n                                error\n                            });\n                        }\n                        break;\n                    }\n                case \"finish\":\n                    {\n                        finishChunk = {\n                            type: \"finish\",\n                            finishReason: chunk.finishReason,\n                            logprobs: chunk.logprobs,\n                            usage: calculateLanguageModelUsage(chunk.usage),\n                            experimental_providerMetadata: chunk.providerMetadata\n                        };\n                        break;\n                    }\n                default:\n                    {\n                        const _exhaustiveCheck = chunkType;\n                        throw new Error(`Unhandled chunk type: ${_exhaustiveCheck}`);\n                    }\n            }\n        },\n        flush () {\n            canClose = true;\n            attemptClose();\n        }\n    });\n    return new ReadableStream({\n        async start (controller) {\n            return Promise.all([\n                generatorStream.pipeThrough(forwardStream).pipeTo(new WritableStream({\n                    write (chunk) {\n                        controller.enqueue(chunk);\n                    },\n                    close () {}\n                })),\n                toolResultsStream.pipeTo(new WritableStream({\n                    write (chunk) {\n                        controller.enqueue(chunk);\n                    },\n                    close () {\n                        controller.close();\n                    }\n                }))\n            ]);\n        }\n    });\n}\n// core/generate-text/stream-text.ts\nvar originalGenerateId4 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.createIdGenerator)({\n    prefix: \"aitxt\",\n    size: 24\n});\nfunction streamText({ model, tools, toolChoice, system, prompt, messages, maxRetries, abortSignal, headers, maxSteps = 1, experimental_continueSteps: continueSteps = false, experimental_telemetry: telemetry, experimental_providerMetadata: providerMetadata, experimental_toolCallStreaming: toolCallStreaming = false, experimental_activeTools: activeTools, experimental_repairToolCall: repairToolCall, experimental_transform: transform, onChunk, onFinish, onStepFinish, _internal: { now: now2 = now, generateId: generateId3 = originalGenerateId4, currentDate = ()=>/* @__PURE__ */ new Date() } = {}, ...settings }) {\n    return new DefaultStreamTextResult({\n        model,\n        telemetry,\n        headers,\n        settings,\n        maxRetries,\n        abortSignal,\n        system,\n        prompt,\n        messages,\n        tools,\n        toolChoice,\n        toolCallStreaming,\n        transform: transform == null ? void 0 : transform({\n            tools\n        }),\n        activeTools,\n        repairToolCall,\n        maxSteps,\n        continueSteps,\n        providerMetadata,\n        onChunk,\n        onFinish,\n        onStepFinish,\n        now: now2,\n        currentDate,\n        generateId: generateId3\n    });\n}\nvar DefaultStreamTextResult = class {\n    constructor({ model, telemetry, headers, settings, maxRetries: maxRetriesArg, abortSignal, system, prompt, messages, tools, toolChoice, toolCallStreaming, transform, activeTools, repairToolCall, maxSteps, continueSteps, providerMetadata, onChunk, onFinish, onStepFinish, now: now2, currentDate, generateId: generateId3 }){\n        this.warningsPromise = new DelayedPromise();\n        this.usagePromise = new DelayedPromise();\n        this.finishReasonPromise = new DelayedPromise();\n        this.providerMetadataPromise = new DelayedPromise();\n        this.textPromise = new DelayedPromise();\n        this.toolCallsPromise = new DelayedPromise();\n        this.toolResultsPromise = new DelayedPromise();\n        this.requestPromise = new DelayedPromise();\n        this.responsePromise = new DelayedPromise();\n        this.stepsPromise = new DelayedPromise();\n        if (maxSteps < 1) {\n            throw new InvalidArgumentError({\n                parameter: \"maxSteps\",\n                value: maxSteps,\n                message: \"maxSteps must be at least 1\"\n            });\n        }\n        let recordedStepText = \"\";\n        let recordedContinuationText = \"\";\n        let recordedFullText = \"\";\n        let recordedRequest = void 0;\n        const recordedResponse = {\n            id: generateId3(),\n            timestamp: currentDate(),\n            modelId: model.modelId,\n            messages: []\n        };\n        let recordedToolCalls = [];\n        let recordedToolResults = [];\n        let recordedFinishReason = void 0;\n        let recordedUsage = void 0;\n        let recordedProviderMetadata = void 0;\n        let stepType = \"initial\";\n        const recordedSteps = [];\n        let rootSpan;\n        const eventProcessor = new TransformStream({\n            async transform (chunk, controller) {\n                controller.enqueue(chunk);\n                if (chunk.type === \"text-delta\" || chunk.type === \"tool-call\" || chunk.type === \"tool-result\" || chunk.type === \"tool-call-streaming-start\" || chunk.type === \"tool-call-delta\") {\n                    await (onChunk == null ? void 0 : onChunk({\n                        chunk\n                    }));\n                }\n                if (chunk.type === \"text-delta\") {\n                    recordedStepText += chunk.textDelta;\n                    recordedContinuationText += chunk.textDelta;\n                    recordedFullText += chunk.textDelta;\n                }\n                if (chunk.type === \"tool-call\") {\n                    recordedToolCalls.push(chunk);\n                }\n                if (chunk.type === \"tool-result\") {\n                    recordedToolResults.push(chunk);\n                }\n                if (chunk.type === \"step-finish\") {\n                    const stepMessages = toResponseMessages({\n                        text: recordedContinuationText,\n                        tools: tools != null ? tools : {},\n                        toolCalls: recordedToolCalls,\n                        toolResults: recordedToolResults\n                    });\n                    const currentStep = recordedSteps.length;\n                    let nextStepType = \"done\";\n                    if (currentStep + 1 < maxSteps) {\n                        if (continueSteps && chunk.finishReason === \"length\" && // only use continue when there are no tool calls:\n                        recordedToolCalls.length === 0) {\n                            nextStepType = \"continue\";\n                        } else if (// there are tool calls:\n                        recordedToolCalls.length > 0 && // all current tool calls have results:\n                        recordedToolResults.length === recordedToolCalls.length) {\n                            nextStepType = \"tool-result\";\n                        }\n                    }\n                    const currentStepResult = {\n                        stepType,\n                        text: recordedStepText,\n                        toolCalls: recordedToolCalls,\n                        toolResults: recordedToolResults,\n                        finishReason: chunk.finishReason,\n                        usage: chunk.usage,\n                        warnings: chunk.warnings,\n                        logprobs: chunk.logprobs,\n                        request: chunk.request,\n                        response: {\n                            ...chunk.response,\n                            messages: [\n                                ...recordedResponse.messages,\n                                ...stepMessages\n                            ]\n                        },\n                        experimental_providerMetadata: chunk.experimental_providerMetadata,\n                        isContinued: chunk.isContinued\n                    };\n                    await (onStepFinish == null ? void 0 : onStepFinish(currentStepResult));\n                    recordedSteps.push(currentStepResult);\n                    recordedToolCalls = [];\n                    recordedToolResults = [];\n                    recordedStepText = \"\";\n                    recordedRequest = chunk.request;\n                    if (nextStepType !== \"done\") {\n                        stepType = nextStepType;\n                    }\n                    if (nextStepType !== \"continue\") {\n                        recordedResponse.messages.push(...stepMessages);\n                        recordedContinuationText = \"\";\n                    }\n                }\n                if (chunk.type === \"finish\") {\n                    recordedResponse.id = chunk.response.id;\n                    recordedResponse.timestamp = chunk.response.timestamp;\n                    recordedResponse.modelId = chunk.response.modelId;\n                    recordedResponse.headers = chunk.response.headers;\n                    recordedUsage = chunk.usage;\n                    recordedFinishReason = chunk.finishReason;\n                    recordedProviderMetadata = chunk.experimental_providerMetadata;\n                }\n            },\n            async flush (controller) {\n                var _a13;\n                try {\n                    const lastStep = recordedSteps[recordedSteps.length - 1];\n                    if (lastStep) {\n                        self.warningsPromise.resolve(lastStep.warnings);\n                        self.requestPromise.resolve(lastStep.request);\n                        self.responsePromise.resolve(lastStep.response);\n                        self.toolCallsPromise.resolve(lastStep.toolCalls);\n                        self.toolResultsPromise.resolve(lastStep.toolResults);\n                        self.providerMetadataPromise.resolve(lastStep.experimental_providerMetadata);\n                    }\n                    const finishReason = recordedFinishReason != null ? recordedFinishReason : \"unknown\";\n                    const usage = recordedUsage != null ? recordedUsage : {\n                        completionTokens: NaN,\n                        promptTokens: NaN,\n                        totalTokens: NaN\n                    };\n                    self.finishReasonPromise.resolve(finishReason);\n                    self.usagePromise.resolve(usage);\n                    self.textPromise.resolve(recordedFullText);\n                    self.stepsPromise.resolve(recordedSteps);\n                    await (onFinish == null ? void 0 : onFinish({\n                        finishReason,\n                        logprobs: void 0,\n                        usage,\n                        text: recordedFullText,\n                        toolCalls: lastStep.toolCalls,\n                        toolResults: lastStep.toolResults,\n                        request: (_a13 = lastStep.request) != null ? _a13 : {},\n                        response: lastStep.response,\n                        warnings: lastStep.warnings,\n                        experimental_providerMetadata: lastStep.experimental_providerMetadata,\n                        steps: recordedSteps\n                    }));\n                    rootSpan.setAttributes(selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                            \"ai.response.finishReason\": finishReason,\n                            \"ai.response.text\": {\n                                output: ()=>recordedFullText\n                            },\n                            \"ai.response.toolCalls\": {\n                                output: ()=>{\n                                    var _a14;\n                                    return ((_a14 = lastStep.toolCalls) == null ? void 0 : _a14.length) ? JSON.stringify(lastStep.toolCalls) : void 0;\n                                }\n                            },\n                            \"ai.usage.promptTokens\": usage.promptTokens,\n                            \"ai.usage.completionTokens\": usage.completionTokens\n                        }\n                    }));\n                } catch (error) {\n                    controller.error(error);\n                } finally{\n                    rootSpan.end();\n                }\n            }\n        });\n        const stitchableStream = createStitchableStream();\n        this.addStream = stitchableStream.addStream;\n        this.closeStream = stitchableStream.close;\n        this.baseStream = (transform ? stitchableStream.stream.pipeThrough(transform) : stitchableStream.stream).pipeThrough(eventProcessor);\n        const { maxRetries, retry } = prepareRetries({\n            maxRetries: maxRetriesArg\n        });\n        const tracer = getTracer(telemetry);\n        const baseTelemetryAttributes = getBaseTelemetryAttributes({\n            model,\n            telemetry,\n            headers,\n            settings: {\n                ...settings,\n                maxRetries\n            }\n        });\n        const initialPrompt = standardizePrompt({\n            prompt: {\n                system,\n                prompt,\n                messages\n            },\n            tools\n        });\n        const self = this;\n        recordSpan({\n            name: \"ai.streamText\",\n            attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                    ...assembleOperationName({\n                        operationId: \"ai.streamText\",\n                        telemetry\n                    }),\n                    ...baseTelemetryAttributes,\n                    // specific settings that only make sense on the outer level:\n                    \"ai.prompt\": {\n                        input: ()=>JSON.stringify({\n                                system,\n                                prompt,\n                                messages\n                            })\n                    },\n                    \"ai.settings.maxSteps\": maxSteps\n                }\n            }),\n            tracer,\n            endWhenDone: false,\n            fn: async (rootSpanArg)=>{\n                rootSpan = rootSpanArg;\n                async function streamStep({ currentStep, responseMessages, usage, stepType: stepType2, previousStepText, hasLeadingWhitespace }) {\n                    const promptFormat = responseMessages.length === 0 ? initialPrompt.type : \"messages\";\n                    const stepInputMessages = [\n                        ...initialPrompt.messages,\n                        ...responseMessages\n                    ];\n                    const promptMessages = await convertToLanguageModelPrompt({\n                        prompt: {\n                            type: promptFormat,\n                            system: initialPrompt.system,\n                            messages: stepInputMessages\n                        },\n                        modelSupportsImageUrls: model.supportsImageUrls,\n                        modelSupportsUrl: model.supportsUrl\n                    });\n                    const mode = {\n                        type: \"regular\",\n                        ...prepareToolsAndToolChoice({\n                            tools,\n                            toolChoice,\n                            activeTools\n                        })\n                    };\n                    const { result: { stream, warnings, rawResponse, request }, doStreamSpan, startTimestampMs } = await retry(()=>recordSpan({\n                            name: \"ai.streamText.doStream\",\n                            attributes: selectTelemetryAttributes({\n                                telemetry,\n                                attributes: {\n                                    ...assembleOperationName({\n                                        operationId: \"ai.streamText.doStream\",\n                                        telemetry\n                                    }),\n                                    ...baseTelemetryAttributes,\n                                    \"ai.prompt.format\": {\n                                        input: ()=>promptFormat\n                                    },\n                                    \"ai.prompt.messages\": {\n                                        input: ()=>JSON.stringify(promptMessages)\n                                    },\n                                    \"ai.prompt.tools\": {\n                                        // convert the language model level tools:\n                                        input: ()=>{\n                                            var _a13;\n                                            return (_a13 = mode.tools) == null ? void 0 : _a13.map((tool2)=>JSON.stringify(tool2));\n                                        }\n                                    },\n                                    \"ai.prompt.toolChoice\": {\n                                        input: ()=>mode.toolChoice != null ? JSON.stringify(mode.toolChoice) : void 0\n                                    },\n                                    // standardized gen-ai llm span attributes:\n                                    \"gen_ai.system\": model.provider,\n                                    \"gen_ai.request.model\": model.modelId,\n                                    \"gen_ai.request.frequency_penalty\": settings.frequencyPenalty,\n                                    \"gen_ai.request.max_tokens\": settings.maxTokens,\n                                    \"gen_ai.request.presence_penalty\": settings.presencePenalty,\n                                    \"gen_ai.request.stop_sequences\": settings.stopSequences,\n                                    \"gen_ai.request.temperature\": settings.temperature,\n                                    \"gen_ai.request.top_k\": settings.topK,\n                                    \"gen_ai.request.top_p\": settings.topP\n                                }\n                            }),\n                            tracer,\n                            endWhenDone: false,\n                            fn: async (doStreamSpan2)=>({\n                                    startTimestampMs: now2(),\n                                    // get before the call\n                                    doStreamSpan: doStreamSpan2,\n                                    result: await model.doStream({\n                                        mode,\n                                        ...prepareCallSettings(settings),\n                                        inputFormat: promptFormat,\n                                        prompt: promptMessages,\n                                        providerMetadata,\n                                        abortSignal,\n                                        headers\n                                    })\n                                })\n                        }));\n                    const transformedStream = runToolsTransformation({\n                        tools,\n                        generatorStream: stream,\n                        toolCallStreaming,\n                        tracer,\n                        telemetry,\n                        system,\n                        messages: stepInputMessages,\n                        repairToolCall,\n                        abortSignal\n                    });\n                    const stepRequest = request != null ? request : {};\n                    const stepToolCalls = [];\n                    const stepToolResults = [];\n                    let stepFinishReason = \"unknown\";\n                    let stepUsage = {\n                        promptTokens: 0,\n                        completionTokens: 0,\n                        totalTokens: 0\n                    };\n                    let stepProviderMetadata;\n                    let stepFirstChunk = true;\n                    let stepText = \"\";\n                    let fullStepText = stepType2 === \"continue\" ? previousStepText : \"\";\n                    let stepLogProbs;\n                    let stepResponse = {\n                        id: generateId3(),\n                        timestamp: currentDate(),\n                        modelId: model.modelId\n                    };\n                    let chunkBuffer = \"\";\n                    let chunkTextPublished = false;\n                    let inWhitespacePrefix = true;\n                    let hasWhitespaceSuffix = false;\n                    async function publishTextChunk({ controller, chunk }) {\n                        controller.enqueue(chunk);\n                        stepText += chunk.textDelta;\n                        fullStepText += chunk.textDelta;\n                        chunkTextPublished = true;\n                        hasWhitespaceSuffix = chunk.textDelta.trimEnd() !== chunk.textDelta;\n                    }\n                    self.addStream(transformedStream.pipeThrough(new TransformStream({\n                        async transform (chunk, controller) {\n                            var _a13, _b, _c;\n                            if (stepFirstChunk) {\n                                const msToFirstChunk = now2() - startTimestampMs;\n                                stepFirstChunk = false;\n                                doStreamSpan.addEvent(\"ai.stream.firstChunk\", {\n                                    \"ai.response.msToFirstChunk\": msToFirstChunk\n                                });\n                                doStreamSpan.setAttributes({\n                                    \"ai.response.msToFirstChunk\": msToFirstChunk\n                                });\n                            }\n                            if (chunk.type === \"text-delta\" && chunk.textDelta.length === 0) {\n                                return;\n                            }\n                            const chunkType = chunk.type;\n                            switch(chunkType){\n                                case \"text-delta\":\n                                    {\n                                        if (continueSteps) {\n                                            const trimmedChunkText = inWhitespacePrefix && hasLeadingWhitespace ? chunk.textDelta.trimStart() : chunk.textDelta;\n                                            if (trimmedChunkText.length === 0) {\n                                                break;\n                                            }\n                                            inWhitespacePrefix = false;\n                                            chunkBuffer += trimmedChunkText;\n                                            const split = splitOnLastWhitespace(chunkBuffer);\n                                            if (split != null) {\n                                                chunkBuffer = split.suffix;\n                                                await publishTextChunk({\n                                                    controller,\n                                                    chunk: {\n                                                        type: \"text-delta\",\n                                                        textDelta: split.prefix + split.whitespace\n                                                    }\n                                                });\n                                            }\n                                        } else {\n                                            await publishTextChunk({\n                                                controller,\n                                                chunk\n                                            });\n                                        }\n                                        break;\n                                    }\n                                case \"tool-call\":\n                                    {\n                                        controller.enqueue(chunk);\n                                        stepToolCalls.push(chunk);\n                                        break;\n                                    }\n                                case \"tool-result\":\n                                    {\n                                        controller.enqueue(chunk);\n                                        stepToolResults.push(chunk);\n                                        break;\n                                    }\n                                case \"response-metadata\":\n                                    {\n                                        stepResponse = {\n                                            id: (_a13 = chunk.id) != null ? _a13 : stepResponse.id,\n                                            timestamp: (_b = chunk.timestamp) != null ? _b : stepResponse.timestamp,\n                                            modelId: (_c = chunk.modelId) != null ? _c : stepResponse.modelId\n                                        };\n                                        break;\n                                    }\n                                case \"finish\":\n                                    {\n                                        stepUsage = chunk.usage;\n                                        stepFinishReason = chunk.finishReason;\n                                        stepProviderMetadata = chunk.experimental_providerMetadata;\n                                        stepLogProbs = chunk.logprobs;\n                                        const msToFinish = now2() - startTimestampMs;\n                                        doStreamSpan.addEvent(\"ai.stream.finish\");\n                                        doStreamSpan.setAttributes({\n                                            \"ai.response.msToFinish\": msToFinish,\n                                            \"ai.response.avgCompletionTokensPerSecond\": 1e3 * stepUsage.completionTokens / msToFinish\n                                        });\n                                        break;\n                                    }\n                                case \"tool-call-streaming-start\":\n                                case \"tool-call-delta\":\n                                    {\n                                        controller.enqueue(chunk);\n                                        break;\n                                    }\n                                case \"error\":\n                                    {\n                                        controller.enqueue(chunk);\n                                        stepFinishReason = \"error\";\n                                        break;\n                                    }\n                                default:\n                                    {\n                                        const exhaustiveCheck = chunkType;\n                                        throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);\n                                    }\n                            }\n                        },\n                        // invoke onFinish callback and resolve toolResults promise when the stream is about to close:\n                        async flush (controller) {\n                            const stepToolCallsJson = stepToolCalls.length > 0 ? JSON.stringify(stepToolCalls) : void 0;\n                            let nextStepType = \"done\";\n                            if (currentStep + 1 < maxSteps) {\n                                if (continueSteps && stepFinishReason === \"length\" && // only use continue when there are no tool calls:\n                                stepToolCalls.length === 0) {\n                                    nextStepType = \"continue\";\n                                } else if (// there are tool calls:\n                                stepToolCalls.length > 0 && // all current tool calls have results:\n                                stepToolResults.length === stepToolCalls.length) {\n                                    nextStepType = \"tool-result\";\n                                }\n                            }\n                            if (continueSteps && chunkBuffer.length > 0 && (nextStepType !== \"continue\" || // when the next step is a regular step, publish the buffer\n                            stepType2 === \"continue\" && !chunkTextPublished)) {\n                                await publishTextChunk({\n                                    controller,\n                                    chunk: {\n                                        type: \"text-delta\",\n                                        textDelta: chunkBuffer\n                                    }\n                                });\n                                chunkBuffer = \"\";\n                            }\n                            try {\n                                doStreamSpan.setAttributes(selectTelemetryAttributes({\n                                    telemetry,\n                                    attributes: {\n                                        \"ai.response.finishReason\": stepFinishReason,\n                                        \"ai.response.text\": {\n                                            output: ()=>stepText\n                                        },\n                                        \"ai.response.toolCalls\": {\n                                            output: ()=>stepToolCallsJson\n                                        },\n                                        \"ai.response.id\": stepResponse.id,\n                                        \"ai.response.model\": stepResponse.modelId,\n                                        \"ai.response.timestamp\": stepResponse.timestamp.toISOString(),\n                                        \"ai.usage.promptTokens\": stepUsage.promptTokens,\n                                        \"ai.usage.completionTokens\": stepUsage.completionTokens,\n                                        // standardized gen-ai llm span attributes:\n                                        \"gen_ai.response.finish_reasons\": [\n                                            stepFinishReason\n                                        ],\n                                        \"gen_ai.response.id\": stepResponse.id,\n                                        \"gen_ai.response.model\": stepResponse.modelId,\n                                        \"gen_ai.usage.input_tokens\": stepUsage.promptTokens,\n                                        \"gen_ai.usage.output_tokens\": stepUsage.completionTokens\n                                    }\n                                }));\n                            } catch (error) {} finally{\n                                doStreamSpan.end();\n                            }\n                            controller.enqueue({\n                                type: \"step-finish\",\n                                finishReason: stepFinishReason,\n                                usage: stepUsage,\n                                experimental_providerMetadata: stepProviderMetadata,\n                                logprobs: stepLogProbs,\n                                request: stepRequest,\n                                response: {\n                                    ...stepResponse,\n                                    headers: rawResponse == null ? void 0 : rawResponse.headers\n                                },\n                                warnings,\n                                isContinued: nextStepType === \"continue\"\n                            });\n                            const combinedUsage = addLanguageModelUsage(usage, stepUsage);\n                            if (nextStepType === \"done\") {\n                                controller.enqueue({\n                                    type: \"finish\",\n                                    finishReason: stepFinishReason,\n                                    usage: combinedUsage,\n                                    experimental_providerMetadata: stepProviderMetadata,\n                                    logprobs: stepLogProbs,\n                                    response: {\n                                        ...stepResponse,\n                                        headers: rawResponse == null ? void 0 : rawResponse.headers\n                                    }\n                                });\n                                self.closeStream();\n                            } else {\n                                if (stepType2 === \"continue\") {\n                                    const lastMessage = responseMessages[responseMessages.length - 1];\n                                    if (typeof lastMessage.content === \"string\") {\n                                        lastMessage.content += stepText;\n                                    } else {\n                                        lastMessage.content.push({\n                                            text: stepText,\n                                            type: \"text\"\n                                        });\n                                    }\n                                } else {\n                                    responseMessages.push(...toResponseMessages({\n                                        text: stepText,\n                                        tools: tools != null ? tools : {},\n                                        toolCalls: stepToolCalls,\n                                        toolResults: stepToolResults\n                                    }));\n                                }\n                                await streamStep({\n                                    currentStep: currentStep + 1,\n                                    responseMessages,\n                                    usage: combinedUsage,\n                                    stepType: nextStepType,\n                                    previousStepText: fullStepText,\n                                    hasLeadingWhitespace: hasWhitespaceSuffix\n                                });\n                            }\n                        }\n                    })));\n                }\n                await streamStep({\n                    currentStep: 0,\n                    responseMessages: [],\n                    usage: {\n                        promptTokens: 0,\n                        completionTokens: 0,\n                        totalTokens: 0\n                    },\n                    previousStepText: \"\",\n                    stepType: \"initial\",\n                    hasLeadingWhitespace: false\n                });\n            }\n        }).catch((error)=>{\n            self.addStream(new ReadableStream({\n                start (controller) {\n                    controller.enqueue({\n                        type: \"error\",\n                        error\n                    });\n                    controller.close();\n                }\n            }));\n            self.closeStream();\n        });\n    }\n    get warnings() {\n        return this.warningsPromise.value;\n    }\n    get usage() {\n        return this.usagePromise.value;\n    }\n    get finishReason() {\n        return this.finishReasonPromise.value;\n    }\n    get experimental_providerMetadata() {\n        return this.providerMetadataPromise.value;\n    }\n    get text() {\n        return this.textPromise.value;\n    }\n    get toolCalls() {\n        return this.toolCallsPromise.value;\n    }\n    get toolResults() {\n        return this.toolResultsPromise.value;\n    }\n    get request() {\n        return this.requestPromise.value;\n    }\n    get response() {\n        return this.responsePromise.value;\n    }\n    get steps() {\n        return this.stepsPromise.value;\n    }\n    /**\n  Split out a new stream from the original stream.\n  The original stream is replaced to allow for further splitting,\n  since we do not know how many times the stream will be split.\n  \n  Note: this leads to buffering the stream content on the server.\n  However, the LLM results are expected to be small enough to not cause issues.\n     */ teeStream() {\n        const [stream1, stream2] = this.baseStream.tee();\n        this.baseStream = stream2;\n        return stream1;\n    }\n    get textStream() {\n        return createAsyncIterableStream(this.teeStream().pipeThrough(new TransformStream({\n            transform (chunk, controller) {\n                if (chunk.type === \"text-delta\") {\n                    controller.enqueue(chunk.textDelta);\n                } else if (chunk.type === \"error\") {\n                    controller.error(chunk.error);\n                }\n            }\n        })));\n    }\n    get fullStream() {\n        return createAsyncIterableStream(this.teeStream());\n    }\n    toDataStreamInternal({ getErrorMessage: getErrorMessage5 = ()=>\"An error occurred.\", // mask error messages for safety by default\n    sendUsage = true } = {}) {\n        let aggregatedResponse = \"\";\n        const callbackTransformer = new TransformStream({\n            async transform (chunk, controller) {\n                controller.enqueue(chunk);\n                if (chunk.type === \"text-delta\") {\n                    aggregatedResponse += chunk.textDelta;\n                }\n            }\n        });\n        const streamPartsTransformer = new TransformStream({\n            transform: async (chunk, controller)=>{\n                const chunkType = chunk.type;\n                switch(chunkType){\n                    case \"text-delta\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"text\", chunk.textDelta));\n                            break;\n                        }\n                    case \"tool-call-streaming-start\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"tool_call_streaming_start\", {\n                                toolCallId: chunk.toolCallId,\n                                toolName: chunk.toolName\n                            }));\n                            break;\n                        }\n                    case \"tool-call-delta\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"tool_call_delta\", {\n                                toolCallId: chunk.toolCallId,\n                                argsTextDelta: chunk.argsTextDelta\n                            }));\n                            break;\n                        }\n                    case \"tool-call\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"tool_call\", {\n                                toolCallId: chunk.toolCallId,\n                                toolName: chunk.toolName,\n                                args: chunk.args\n                            }));\n                            break;\n                        }\n                    case \"tool-result\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"tool_result\", {\n                                toolCallId: chunk.toolCallId,\n                                result: chunk.result\n                            }));\n                            break;\n                        }\n                    case \"error\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"error\", getErrorMessage5(chunk.error)));\n                            break;\n                        }\n                    case \"step-finish\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"finish_step\", {\n                                finishReason: chunk.finishReason,\n                                usage: sendUsage ? {\n                                    promptTokens: chunk.usage.promptTokens,\n                                    completionTokens: chunk.usage.completionTokens\n                                } : void 0,\n                                isContinued: chunk.isContinued\n                            }));\n                            break;\n                        }\n                    case \"finish\":\n                        {\n                            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"finish_message\", {\n                                finishReason: chunk.finishReason,\n                                usage: sendUsage ? {\n                                    promptTokens: chunk.usage.promptTokens,\n                                    completionTokens: chunk.usage.completionTokens\n                                } : void 0\n                            }));\n                            break;\n                        }\n                    default:\n                        {\n                            const exhaustiveCheck = chunkType;\n                            throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);\n                        }\n                }\n            }\n        });\n        return this.fullStream.pipeThrough(callbackTransformer).pipeThrough(streamPartsTransformer);\n    }\n    pipeDataStreamToResponse(response, { status, statusText, headers, data, getErrorMessage: getErrorMessage5, sendUsage } = {}) {\n        writeToServerResponse({\n            response,\n            status,\n            statusText,\n            headers: prepareOutgoingHttpHeaders(headers, {\n                contentType: \"text/plain; charset=utf-8\",\n                dataStreamVersion: \"v1\"\n            }),\n            stream: this.toDataStream({\n                data,\n                getErrorMessage: getErrorMessage5,\n                sendUsage\n            })\n        });\n    }\n    pipeTextStreamToResponse(response, init) {\n        writeToServerResponse({\n            response,\n            status: init == null ? void 0 : init.status,\n            statusText: init == null ? void 0 : init.statusText,\n            headers: prepareOutgoingHttpHeaders(init == null ? void 0 : init.headers, {\n                contentType: \"text/plain; charset=utf-8\"\n            }),\n            stream: this.textStream.pipeThrough(new TextEncoderStream())\n        });\n    }\n    // TODO breaking change 5.0: remove pipeThrough(new TextEncoderStream())\n    toDataStream(options) {\n        const stream = this.toDataStreamInternal({\n            getErrorMessage: options == null ? void 0 : options.getErrorMessage,\n            sendUsage: options == null ? void 0 : options.sendUsage\n        }).pipeThrough(new TextEncoderStream());\n        return (options == null ? void 0 : options.data) ? mergeStreams(options == null ? void 0 : options.data.stream, stream) : stream;\n    }\n    mergeIntoDataStream(writer) {\n        writer.merge(this.toDataStreamInternal({\n            getErrorMessage: writer.onError\n        }));\n    }\n    toDataStreamResponse({ headers, status, statusText, data, getErrorMessage: getErrorMessage5, sendUsage } = {}) {\n        return new Response(this.toDataStream({\n            data,\n            getErrorMessage: getErrorMessage5,\n            sendUsage\n        }), {\n            status,\n            statusText,\n            headers: prepareResponseHeaders(headers, {\n                contentType: \"text/plain; charset=utf-8\",\n                dataStreamVersion: \"v1\"\n            })\n        });\n    }\n    toTextStreamResponse(init) {\n        var _a13;\n        return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {\n            status: (_a13 = init == null ? void 0 : init.status) != null ? _a13 : 200,\n            headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {\n                contentType: \"text/plain; charset=utf-8\"\n            })\n        });\n    }\n};\n// core/generate-text/smooth-stream.ts\nfunction smoothStream({ delayInMs = 10, _internal: { delay: delay2 = delay } = {} } = {}) {\n    let buffer = \"\";\n    return ()=>new TransformStream({\n            async transform (chunk, controller) {\n                if (chunk.type === \"step-finish\") {\n                    if (buffer.length > 0) {\n                        controller.enqueue({\n                            type: \"text-delta\",\n                            textDelta: buffer\n                        });\n                        buffer = \"\";\n                    }\n                    controller.enqueue(chunk);\n                    return;\n                }\n                if (chunk.type !== \"text-delta\") {\n                    controller.enqueue(chunk);\n                    return;\n                }\n                buffer += chunk.textDelta;\n                while(buffer.match(/\\s/)){\n                    const whitespaceIndex = buffer.search(/\\s/);\n                    const word = buffer.slice(0, whitespaceIndex + 1);\n                    controller.enqueue({\n                        type: \"text-delta\",\n                        textDelta: word\n                    });\n                    buffer = buffer.slice(whitespaceIndex + 1);\n                    if (delayInMs > 0) {\n                        await delay2(delayInMs);\n                    }\n                }\n            }\n        });\n}\n// core/middleware/wrap-language-model.ts\nvar experimental_wrapLanguageModel = ({ model, middleware: { transformParams, wrapGenerate, wrapStream }, modelId, providerId })=>{\n    async function doTransform({ params, type }) {\n        return transformParams ? await transformParams({\n            params,\n            type\n        }) : params;\n    }\n    return {\n        specificationVersion: \"v1\",\n        provider: providerId != null ? providerId : model.provider,\n        modelId: modelId != null ? modelId : model.modelId,\n        defaultObjectGenerationMode: model.defaultObjectGenerationMode,\n        supportsImageUrls: model.supportsImageUrls,\n        supportsUrl: model.supportsUrl,\n        supportsStructuredOutputs: model.supportsStructuredOutputs,\n        async doGenerate (params) {\n            const transformedParams = await doTransform({\n                params,\n                type: \"generate\"\n            });\n            const doGenerate = async ()=>model.doGenerate(transformedParams);\n            return wrapGenerate ? wrapGenerate({\n                doGenerate,\n                params: transformedParams,\n                model\n            }) : doGenerate();\n        },\n        async doStream (params) {\n            const transformedParams = await doTransform({\n                params,\n                type: \"stream\"\n            });\n            const doStream = async ()=>model.doStream(transformedParams);\n            return wrapStream ? wrapStream({\n                doStream,\n                params: transformedParams,\n                model\n            }) : doStream();\n        }\n    };\n};\n// core/registry/custom-provider.ts\n\nfunction experimental_customProvider({ languageModels, textEmbeddingModels, fallbackProvider }) {\n    return {\n        languageModel (modelId) {\n            if (languageModels != null && modelId in languageModels) {\n                return languageModels[modelId];\n            }\n            if (fallbackProvider) {\n                return fallbackProvider.languageModel(modelId);\n            }\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId,\n                modelType: \"languageModel\"\n            });\n        },\n        textEmbeddingModel (modelId) {\n            if (textEmbeddingModels != null && modelId in textEmbeddingModels) {\n                return textEmbeddingModels[modelId];\n            }\n            if (fallbackProvider) {\n                return fallbackProvider.textEmbeddingModel(modelId);\n            }\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId,\n                modelType: \"textEmbeddingModel\"\n            });\n        }\n    };\n}\n// core/registry/no-such-provider-error.ts\n\nvar name12 = \"AI_NoSuchProviderError\";\nvar marker12 = `vercel.ai.error.${name12}`;\nvar symbol12 = Symbol.for(marker12);\nvar _a12;\nvar NoSuchProviderError = class extends _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError {\n    constructor({ modelId, modelType, providerId, availableProviders, message = `No such provider: ${providerId} (available providers: ${availableProviders.join()})` }){\n        super({\n            errorName: name12,\n            modelId,\n            modelType,\n            message\n        });\n        this[_a12] = true;\n        this.providerId = providerId;\n        this.availableProviders = availableProviders;\n    }\n    static isInstance(error) {\n        return _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.AISDKError.hasMarker(error, marker12);\n    }\n};\n_a12 = symbol12;\n// core/registry/provider-registry.ts\n\nfunction experimental_createProviderRegistry(providers) {\n    const registry = new DefaultProviderRegistry();\n    for (const [id, provider] of Object.entries(providers)){\n        registry.registerProvider({\n            id,\n            provider\n        });\n    }\n    return registry;\n}\nvar DefaultProviderRegistry = class {\n    constructor(){\n        this.providers = {};\n    }\n    registerProvider({ id, provider }) {\n        this.providers[id] = provider;\n    }\n    getProvider(id) {\n        const provider = this.providers[id];\n        if (provider == null) {\n            throw new NoSuchProviderError({\n                modelId: id,\n                modelType: \"languageModel\",\n                providerId: id,\n                availableProviders: Object.keys(this.providers)\n            });\n        }\n        return provider;\n    }\n    splitId(id, modelType) {\n        const index = id.indexOf(\":\");\n        if (index === -1) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId: id,\n                modelType,\n                message: `Invalid ${modelType} id for registry: ${id} (must be in the format \"providerId:modelId\")`\n            });\n        }\n        return [\n            id.slice(0, index),\n            id.slice(index + 1)\n        ];\n    }\n    languageModel(id) {\n        var _a13, _b;\n        const [providerId, modelId] = this.splitId(id, \"languageModel\");\n        const model = (_b = (_a13 = this.getProvider(providerId)).languageModel) == null ? void 0 : _b.call(_a13, modelId);\n        if (model == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId: id,\n                modelType: \"languageModel\"\n            });\n        }\n        return model;\n    }\n    textEmbeddingModel(id) {\n        var _a13;\n        const [providerId, modelId] = this.splitId(id, \"textEmbeddingModel\");\n        const provider = this.getProvider(providerId);\n        const model = (_a13 = provider.textEmbeddingModel) == null ? void 0 : _a13.call(provider, modelId);\n        if (model == null) {\n            throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchModelError({\n                modelId: id,\n                modelType: \"textEmbeddingModel\"\n            });\n        }\n        return model;\n    }\n    /**\n   * @deprecated Use `textEmbeddingModel` instead.\n   */ textEmbedding(id) {\n        return this.textEmbeddingModel(id);\n    }\n};\n// core/tool/tool.ts\nfunction tool(tool2) {\n    return tool2;\n}\n// core/util/cosine-similarity.ts\nfunction cosineSimilarity(vector1, vector2) {\n    if (vector1.length !== vector2.length) {\n        throw new Error(`Vectors must have the same length (vector1: ${vector1.length} elements, vector2: ${vector2.length} elements)`);\n    }\n    return dotProduct(vector1, vector2) / (magnitude(vector1) * magnitude(vector2));\n}\nfunction dotProduct(vector1, vector2) {\n    return vector1.reduce((accumulator, value, index)=>accumulator + value * vector2[index], 0);\n}\nfunction magnitude(vector) {\n    return Math.sqrt(dotProduct(vector, vector));\n}\n// streams/assistant-response.ts\n\nfunction AssistantResponse({ threadId, messageId }, process2) {\n    const stream = new ReadableStream({\n        async start (controller) {\n            var _a13;\n            const textEncoder = new TextEncoder();\n            const sendMessage = (message)=>{\n                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"assistant_message\", message)));\n            };\n            const sendDataMessage = (message)=>{\n                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"data_message\", message)));\n            };\n            const sendError = (errorMessage)=>{\n                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"error\", errorMessage)));\n            };\n            const forwardStream = async (stream2)=>{\n                var _a14, _b;\n                let result = void 0;\n                for await (const value of stream2){\n                    switch(value.event){\n                        case \"thread.message.created\":\n                            {\n                                controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"assistant_message\", {\n                                    id: value.data.id,\n                                    role: \"assistant\",\n                                    content: [\n                                        {\n                                            type: \"text\",\n                                            text: {\n                                                value: \"\"\n                                            }\n                                        }\n                                    ]\n                                })));\n                                break;\n                            }\n                        case \"thread.message.delta\":\n                            {\n                                const content = (_a14 = value.data.delta.content) == null ? void 0 : _a14[0];\n                                if ((content == null ? void 0 : content.type) === \"text\" && ((_b = content.text) == null ? void 0 : _b.value) != null) {\n                                    controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"text\", content.text.value)));\n                                }\n                                break;\n                            }\n                        case \"thread.run.completed\":\n                        case \"thread.run.requires_action\":\n                            {\n                                result = value.data;\n                                break;\n                            }\n                    }\n                }\n                return result;\n            };\n            controller.enqueue(textEncoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatAssistantStreamPart)(\"assistant_control_data\", {\n                threadId,\n                messageId\n            })));\n            try {\n                await process2({\n                    sendMessage,\n                    sendDataMessage,\n                    forwardStream\n                });\n            } catch (error) {\n                sendError((_a13 = error.message) != null ? _a13 : `${error}`);\n            } finally{\n                controller.close();\n            }\n        },\n        pull (controller) {},\n        cancel () {}\n    });\n    return new Response(stream, {\n        status: 200,\n        headers: {\n            \"Content-Type\": \"text/plain; charset=utf-8\"\n        }\n    });\n}\n// streams/langchain-adapter.ts\nvar langchain_adapter_exports = {};\n__export(langchain_adapter_exports, {\n    mergeIntoDataStream: ()=>mergeIntoDataStream,\n    toDataStream: ()=>toDataStream,\n    toDataStreamResponse: ()=>toDataStreamResponse\n});\n\n// streams/stream-callbacks.ts\nfunction createCallbacksTransformer(callbacks = {}) {\n    const textEncoder = new TextEncoder();\n    let aggregatedResponse = \"\";\n    return new TransformStream({\n        async start () {\n            if (callbacks.onStart) await callbacks.onStart();\n        },\n        async transform (message, controller) {\n            controller.enqueue(textEncoder.encode(message));\n            aggregatedResponse += message;\n            if (callbacks.onToken) await callbacks.onToken(message);\n            if (callbacks.onText && typeof message === \"string\") {\n                await callbacks.onText(message);\n            }\n        },\n        async flush () {\n            if (callbacks.onCompletion) {\n                await callbacks.onCompletion(aggregatedResponse);\n            }\n            if (callbacks.onFinal) {\n                await callbacks.onFinal(aggregatedResponse);\n            }\n        }\n    });\n}\n// streams/langchain-adapter.ts\nfunction toDataStreamInternal(stream, callbacks) {\n    return stream.pipeThrough(new TransformStream({\n        transform: async (value, controller)=>{\n            var _a13;\n            if (typeof value === \"string\") {\n                controller.enqueue(value);\n                return;\n            }\n            if (\"event\" in value) {\n                if (value.event === \"on_chat_model_stream\") {\n                    forwardAIMessageChunk((_a13 = value.data) == null ? void 0 : _a13.chunk, controller);\n                }\n                return;\n            }\n            forwardAIMessageChunk(value, controller);\n        }\n    })).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({\n        transform: async (chunk, controller)=>{\n            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"text\", chunk));\n        }\n    }));\n}\nfunction toDataStream(stream, callbacks) {\n    return toDataStreamInternal(stream, callbacks).pipeThrough(new TextEncoderStream());\n}\nfunction toDataStreamResponse(stream, options) {\n    var _a13;\n    const dataStream = toDataStreamInternal(stream, options == null ? void 0 : options.callbacks).pipeThrough(new TextEncoderStream());\n    const data = options == null ? void 0 : options.data;\n    const init = options == null ? void 0 : options.init;\n    const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;\n    return new Response(responseStream, {\n        status: (_a13 = init == null ? void 0 : init.status) != null ? _a13 : 200,\n        statusText: init == null ? void 0 : init.statusText,\n        headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {\n            contentType: \"text/plain; charset=utf-8\",\n            dataStreamVersion: \"v1\"\n        })\n    });\n}\nfunction mergeIntoDataStream(stream, options) {\n    options.dataStream.merge(toDataStreamInternal(stream, options.callbacks));\n}\nfunction forwardAIMessageChunk(chunk, controller) {\n    if (typeof chunk.content === \"string\") {\n        controller.enqueue(chunk.content);\n    } else {\n        const content = chunk.content;\n        for (const item of content){\n            if (item.type === \"text\") {\n                controller.enqueue(item.text);\n            }\n        }\n    }\n}\n// streams/llamaindex-adapter.ts\nvar llamaindex_adapter_exports = {};\n__export(llamaindex_adapter_exports, {\n    mergeIntoDataStream: ()=>mergeIntoDataStream2,\n    toDataStream: ()=>toDataStream2,\n    toDataStreamResponse: ()=>toDataStreamResponse2\n});\n\n\nfunction toDataStreamInternal2(stream, callbacks) {\n    const trimStart = trimStartOfStream();\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_2__.convertAsyncIteratorToReadableStream)(stream[Symbol.asyncIterator]()).pipeThrough(new TransformStream({\n        async transform (message, controller) {\n            controller.enqueue(trimStart(message.delta));\n        }\n    })).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({\n        transform: async (chunk, controller)=>{\n            controller.enqueue((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"text\", chunk));\n        }\n    }));\n}\nfunction toDataStream2(stream, callbacks) {\n    return toDataStreamInternal2(stream, callbacks).pipeThrough(new TextEncoderStream());\n}\nfunction toDataStreamResponse2(stream, options = {}) {\n    var _a13;\n    const { init, data, callbacks } = options;\n    const dataStream = toDataStreamInternal2(stream, callbacks).pipeThrough(new TextEncoderStream());\n    const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;\n    return new Response(responseStream, {\n        status: (_a13 = init == null ? void 0 : init.status) != null ? _a13 : 200,\n        statusText: init == null ? void 0 : init.statusText,\n        headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {\n            contentType: \"text/plain; charset=utf-8\",\n            dataStreamVersion: \"v1\"\n        })\n    });\n}\nfunction mergeIntoDataStream2(stream, options) {\n    options.dataStream.merge(toDataStreamInternal2(stream, options.callbacks));\n}\nfunction trimStartOfStream() {\n    let isStreamStart = true;\n    return (text2)=>{\n        if (isStreamStart) {\n            text2 = text2.trimStart();\n            if (text2) isStreamStart = false;\n        }\n        return text2;\n    };\n}\n// streams/stream-data.ts\n\n// util/constants.ts\nvar HANGING_STREAM_WARNING_TIME_MS = 15 * 1e3;\n// streams/stream-data.ts\nvar StreamData = class {\n    constructor(){\n        this.encoder = new TextEncoder();\n        this.controller = null;\n        this.isClosed = false;\n        this.warningTimeout = null;\n        const self = this;\n        this.stream = new ReadableStream({\n            start: async (controller)=>{\n                self.controller = controller;\n                if (true) {\n                    self.warningTimeout = setTimeout(()=>{\n                        console.warn(\"The data stream is hanging. Did you forget to close it with `data.close()`?\");\n                    }, HANGING_STREAM_WARNING_TIME_MS);\n                }\n            },\n            pull: (controller)=>{},\n            cancel: (reason)=>{\n                this.isClosed = true;\n            }\n        });\n    }\n    async close() {\n        if (this.isClosed) {\n            throw new Error(\"Data Stream has already been closed.\");\n        }\n        if (!this.controller) {\n            throw new Error(\"Stream controller is not initialized.\");\n        }\n        this.controller.close();\n        this.isClosed = true;\n        if (this.warningTimeout) {\n            clearTimeout(this.warningTimeout);\n        }\n    }\n    append(value) {\n        if (this.isClosed) {\n            throw new Error(\"Data Stream has already been closed.\");\n        }\n        if (!this.controller) {\n            throw new Error(\"Stream controller is not initialized.\");\n        }\n        this.controller.enqueue(this.encoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"data\", [\n            value\n        ])));\n    }\n    appendMessageAnnotation(value) {\n        if (this.isClosed) {\n            throw new Error(\"Data Stream has already been closed.\");\n        }\n        if (!this.controller) {\n            throw new Error(\"Stream controller is not initialized.\");\n        }\n        this.controller.enqueue(this.encoder.encode((0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_0__.formatDataStreamPart)(\"message_annotations\", [\n            value\n        ])));\n    }\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/dist/index.mjs\n");

/***/ })

};
;